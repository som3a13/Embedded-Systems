/*
 * Module: UART
 *
 * File Name: uart.c
 *
 * Description : Source file for UART driver
 *
 * Author: Mohamed Ismail
 *
 */

#include "../UART/uart.h"
#include <avr/io.h>
#include "../../LIBRARY/common_macros.h"


/*
 * Description :
 * Function for Initialize the UART device
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
	uint16  ubrr_value = 0;
	UCSRA =(1<<U2X); // double speed
	 /* RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 */
	UCSRB =(1<<RXEN)|(1<<TXEN);
	/************************** UCSRC Description **************************
	 * The UART Frame should be in the below format:
		• Date Length: 8-Bits Data
		• Parity Type: Even Parity
		• Stop Bits: 1-Stop Bit
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UPM1:0  = 10 Even parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 write to 0 at async operaton
	 */
	UCSRC = (1 << URSEL);
	UCSRC = (UCSRC & 0xF9)| (Config_Ptr->bit_data<< UCSZ0);
	UCSRC = (UCSRC & 0xCF)| (Config_Ptr->parity<< UPM0);
	UCSRC = (UCSRC & 0xF7)| (Config_Ptr->stop_bit<< USBS);
	//Calculate the UBRR register value
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
	UBRRH = ubrr_value >> 8;
	UBRRL = ubrr_value;
}



/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;

	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
/*
 * Description :
 * Functional responsible for receive byte from another UART device by polling.
 */

uint8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
}

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
		i++;
	}
	/************************* Another Method *************************
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}

