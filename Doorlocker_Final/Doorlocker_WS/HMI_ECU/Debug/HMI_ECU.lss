
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  00003f22  00003fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800112  00800112  00004068  2**0
                  ALLOC
  3 .stab         000039cc  00000000  00000000  00004068  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d63  00000000  00000000  00007a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009797  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000098d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b690  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c57b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d328  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d715  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__vector_7>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__pack_f+0xba>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e2 e2       	ldi	r30, 0x22	; 34
     162:	ff e3       	ldi	r31, 0x3F	; 63
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a2 31       	cpi	r26, 0x12	; 18
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a2 e1       	ldi	r26, 0x12	; 18
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a6 31       	cpi	r26, 0x16	; 22
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 20 12 	call	0x2440	; 0x2440 <main>
     184:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 c6 03 	call	0x78c	; 0x78c <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 26 04 	call	0x84c	; 0x84c <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	ae ef       	ldi	r26, 0xFE	; 254
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8e ef       	ldi	r24, 0xFE	; 254
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__epilogue_restores__>

0000072c <__gtsf2>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__prologue_saves__+0x18>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	89 e0       	ldi	r24, 0x09	; 9
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     76c:	89 85       	ldd	r24, Y+9	; 0x09
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	40 f0       	brcs	.+16     	; 0x782 <__gtsf2+0x56>
     772:	89 89       	ldd	r24, Y+17	; 0x11
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	28 f0       	brcs	.+10     	; 0x782 <__gtsf2+0x56>
     778:	c7 01       	movw	r24, r14
     77a:	b8 01       	movw	r22, r16
     77c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     780:	01 c0       	rjmp	.+2      	; 0x784 <__gtsf2+0x58>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	68 96       	adiw	r28, 0x18	; 24
     786:	e6 e0       	ldi	r30, 0x06	; 6
     788:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__epilogue_restores__+0x18>

0000078c <__gesf2>:
     78c:	a8 e1       	ldi	r26, 0x18	; 24
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	ec ec       	ldi	r30, 0xCC	; 204
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__prologue_saves__+0x18>
     798:	69 83       	std	Y+1, r22	; 0x01
     79a:	7a 83       	std	Y+2, r23	; 0x02
     79c:	8b 83       	std	Y+3, r24	; 0x03
     79e:	9c 83       	std	Y+4, r25	; 0x04
     7a0:	2d 83       	std	Y+5, r18	; 0x05
     7a2:	3e 83       	std	Y+6, r19	; 0x06
     7a4:	4f 83       	std	Y+7, r20	; 0x07
     7a6:	58 87       	std	Y+8, r21	; 0x08
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	e8 2e       	mov	r14, r24
     7ac:	f1 2c       	mov	r15, r1
     7ae:	ec 0e       	add	r14, r28
     7b0:	fd 1e       	adc	r15, r29
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	b7 01       	movw	r22, r14
     7b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5e       	subi	r16, 0xEF	; 239
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	ce 01       	movw	r24, r28
     7c4:	05 96       	adiw	r24, 0x05	; 5
     7c6:	b8 01       	movw	r22, r16
     7c8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     7cc:	89 85       	ldd	r24, Y+9	; 0x09
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	40 f0       	brcs	.+16     	; 0x7e2 <__gesf2+0x56>
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	28 f0       	brcs	.+10     	; 0x7e2 <__gesf2+0x56>
     7d8:	c7 01       	movw	r24, r14
     7da:	b8 01       	movw	r22, r16
     7dc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <__gesf2+0x58>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	68 96       	adiw	r28, 0x18	; 24
     7e6:	e6 e0       	ldi	r30, 0x06	; 6
     7e8:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__epilogue_restores__+0x18>

000007ec <__ltsf2>:
     7ec:	a8 e1       	ldi	r26, 0x18	; 24
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	ec ef       	ldi	r30, 0xFC	; 252
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__prologue_saves__+0x18>
     7f8:	69 83       	std	Y+1, r22	; 0x01
     7fa:	7a 83       	std	Y+2, r23	; 0x02
     7fc:	8b 83       	std	Y+3, r24	; 0x03
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	2d 83       	std	Y+5, r18	; 0x05
     802:	3e 83       	std	Y+6, r19	; 0x06
     804:	4f 83       	std	Y+7, r20	; 0x07
     806:	58 87       	std	Y+8, r21	; 0x08
     808:	89 e0       	ldi	r24, 0x09	; 9
     80a:	e8 2e       	mov	r14, r24
     80c:	f1 2c       	mov	r15, r1
     80e:	ec 0e       	add	r14, r28
     810:	fd 1e       	adc	r15, r29
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	b7 01       	movw	r22, r14
     818:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5e       	subi	r16, 0xEF	; 239
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	05 96       	adiw	r24, 0x05	; 5
     826:	b8 01       	movw	r22, r16
     828:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     82c:	89 85       	ldd	r24, Y+9	; 0x09
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	40 f0       	brcs	.+16     	; 0x842 <__ltsf2+0x56>
     832:	89 89       	ldd	r24, Y+17	; 0x11
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	28 f0       	brcs	.+10     	; 0x842 <__ltsf2+0x56>
     838:	c7 01       	movw	r24, r14
     83a:	b8 01       	movw	r22, r16
     83c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__fpcmp_parts_f>
     840:	01 c0       	rjmp	.+2      	; 0x844 <__ltsf2+0x58>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	68 96       	adiw	r28, 0x18	; 24
     846:	e6 e0       	ldi	r30, 0x06	; 6
     848:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__epilogue_restores__+0x18>

0000084c <__fixsfsi>:
     84c:	ac e0       	ldi	r26, 0x0C	; 12
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__+0x20>
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	be 01       	movw	r22, r28
     866:	6b 5f       	subi	r22, 0xFB	; 251
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__unpack_f>
     86e:	8d 81       	ldd	r24, Y+5	; 0x05
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	61 f1       	breq	.+88     	; 0x8cc <__stack+0x6d>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	50 f1       	brcs	.+84     	; 0x8cc <__stack+0x6d>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
     87c:	8e 81       	ldd	r24, Y+6	; 0x06
     87e:	88 23       	and	r24, r24
     880:	51 f1       	breq	.+84     	; 0x8d6 <__stack+0x77>
     882:	2e c0       	rjmp	.+92     	; 0x8e0 <__stack+0x81>
     884:	2f 81       	ldd	r18, Y+7	; 0x07
     886:	38 85       	ldd	r19, Y+8	; 0x08
     888:	37 fd       	sbrc	r19, 7
     88a:	20 c0       	rjmp	.+64     	; 0x8cc <__stack+0x6d>
     88c:	6e 81       	ldd	r22, Y+6	; 0x06
     88e:	2f 31       	cpi	r18, 0x1F	; 31
     890:	31 05       	cpc	r19, r1
     892:	1c f0       	brlt	.+6      	; 0x89a <__stack+0x3b>
     894:	66 23       	and	r22, r22
     896:	f9 f0       	breq	.+62     	; 0x8d6 <__stack+0x77>
     898:	23 c0       	rjmp	.+70     	; 0x8e0 <__stack+0x81>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	82 1b       	sub	r24, r18
     8a0:	93 0b       	sbc	r25, r19
     8a2:	29 85       	ldd	r18, Y+9	; 0x09
     8a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a6:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a8:	5c 85       	ldd	r21, Y+12	; 0x0c
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	56 95       	lsr	r21
     8ae:	47 95       	ror	r20
     8b0:	37 95       	ror	r19
     8b2:	27 95       	ror	r18
     8b4:	8a 95       	dec	r24
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	66 23       	and	r22, r22
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <__stack+0x89>
     8bc:	50 95       	com	r21
     8be:	40 95       	com	r20
     8c0:	30 95       	com	r19
     8c2:	21 95       	neg	r18
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	4f 4f       	sbci	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	0e c0       	rjmp	.+28     	; 0x8e8 <__stack+0x89>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f ef       	ldi	r20, 0xFF	; 255
     8dc:	5f e7       	ldi	r21, 0x7F	; 127
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e8       	ldi	r21, 0x80	; 128
     8e8:	b9 01       	movw	r22, r18
     8ea:	ca 01       	movw	r24, r20
     8ec:	2c 96       	adiw	r28, 0x0c	; 12
     8ee:	e2 e0       	ldi	r30, 0x02	; 2
     8f0:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__+0x20>

000008f4 <__pack_f>:
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	fc 01       	movw	r30, r24
     900:	e4 80       	ldd	r14, Z+4	; 0x04
     902:	f5 80       	ldd	r15, Z+5	; 0x05
     904:	06 81       	ldd	r16, Z+6	; 0x06
     906:	17 81       	ldd	r17, Z+7	; 0x07
     908:	d1 80       	ldd	r13, Z+1	; 0x01
     90a:	80 81       	ld	r24, Z
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	48 f4       	brcc	.+18     	; 0x922 <__pack_f+0x2e>
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	a0 e1       	ldi	r26, 0x10	; 16
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e8 2a       	or	r14, r24
     91a:	f9 2a       	or	r15, r25
     91c:	0a 2b       	or	r16, r26
     91e:	1b 2b       	or	r17, r27
     920:	a5 c0       	rjmp	.+330    	; 0xa6c <__pack_f+0x178>
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	09 f4       	brne	.+2      	; 0x928 <__pack_f+0x34>
     926:	9f c0       	rjmp	.+318    	; 0xa66 <__pack_f+0x172>
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	21 f4       	brne	.+8      	; 0x934 <__pack_f+0x40>
     92c:	ee 24       	eor	r14, r14
     92e:	ff 24       	eor	r15, r15
     930:	87 01       	movw	r16, r14
     932:	05 c0       	rjmp	.+10     	; 0x93e <__pack_f+0x4a>
     934:	e1 14       	cp	r14, r1
     936:	f1 04       	cpc	r15, r1
     938:	01 05       	cpc	r16, r1
     93a:	11 05       	cpc	r17, r1
     93c:	19 f4       	brne	.+6      	; 0x944 <__pack_f+0x50>
     93e:	e0 e0       	ldi	r30, 0x00	; 0
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	96 c0       	rjmp	.+300    	; 0xa70 <__pack_f+0x17c>
     944:	62 81       	ldd	r22, Z+2	; 0x02
     946:	73 81       	ldd	r23, Z+3	; 0x03
     948:	9f ef       	ldi	r25, 0xFF	; 255
     94a:	62 38       	cpi	r22, 0x82	; 130
     94c:	79 07       	cpc	r23, r25
     94e:	0c f0       	brlt	.+2      	; 0x952 <__pack_f+0x5e>
     950:	5b c0       	rjmp	.+182    	; 0xa08 <__pack_f+0x114>
     952:	22 e8       	ldi	r18, 0x82	; 130
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	26 1b       	sub	r18, r22
     958:	37 0b       	sbc	r19, r23
     95a:	2a 31       	cpi	r18, 0x1A	; 26
     95c:	31 05       	cpc	r19, r1
     95e:	2c f0       	brlt	.+10     	; 0x96a <__pack_f+0x76>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	2a c0       	rjmp	.+84     	; 0x9be <__pack_f+0xca>
     96a:	b8 01       	movw	r22, r16
     96c:	a7 01       	movw	r20, r14
     96e:	02 2e       	mov	r0, r18
     970:	04 c0       	rjmp	.+8      	; 0x97a <__pack_f+0x86>
     972:	76 95       	lsr	r23
     974:	67 95       	ror	r22
     976:	57 95       	ror	r21
     978:	47 95       	ror	r20
     97a:	0a 94       	dec	r0
     97c:	d2 f7       	brpl	.-12     	; 0x972 <__pack_f+0x7e>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a0 e0       	ldi	r26, 0x00	; 0
     984:	b0 e0       	ldi	r27, 0x00	; 0
     986:	04 c0       	rjmp	.+8      	; 0x990 <__pack_f+0x9c>
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	aa 1f       	adc	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	2a 95       	dec	r18
     992:	d2 f7       	brpl	.-12     	; 0x988 <__pack_f+0x94>
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	a1 09       	sbc	r26, r1
     998:	b1 09       	sbc	r27, r1
     99a:	8e 21       	and	r24, r14
     99c:	9f 21       	and	r25, r15
     99e:	a0 23       	and	r26, r16
     9a0:	b1 23       	and	r27, r17
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <__pack_f+0xbe>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	9a 01       	movw	r18, r20
     9b4:	ab 01       	movw	r20, r22
     9b6:	28 2b       	or	r18, r24
     9b8:	39 2b       	or	r19, r25
     9ba:	4a 2b       	or	r20, r26
     9bc:	5b 2b       	or	r21, r27
     9be:	da 01       	movw	r26, r20
     9c0:	c9 01       	movw	r24, r18
     9c2:	8f 77       	andi	r24, 0x7F	; 127
     9c4:	90 70       	andi	r25, 0x00	; 0
     9c6:	a0 70       	andi	r26, 0x00	; 0
     9c8:	b0 70       	andi	r27, 0x00	; 0
     9ca:	80 34       	cpi	r24, 0x40	; 64
     9cc:	91 05       	cpc	r25, r1
     9ce:	a1 05       	cpc	r26, r1
     9d0:	b1 05       	cpc	r27, r1
     9d2:	39 f4       	brne	.+14     	; 0x9e2 <__pack_f+0xee>
     9d4:	27 ff       	sbrs	r18, 7
     9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__pack_f+0xf6>
     9d8:	20 5c       	subi	r18, 0xC0	; 192
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	4f 4f       	sbci	r20, 0xFF	; 255
     9de:	5f 4f       	sbci	r21, 0xFF	; 255
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__pack_f+0xf6>
     9e2:	21 5c       	subi	r18, 0xC1	; 193
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	4f 4f       	sbci	r20, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	e0 e0       	ldi	r30, 0x00	; 0
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	20 30       	cpi	r18, 0x00	; 0
     9f0:	a0 e0       	ldi	r26, 0x00	; 0
     9f2:	3a 07       	cpc	r19, r26
     9f4:	a0 e0       	ldi	r26, 0x00	; 0
     9f6:	4a 07       	cpc	r20, r26
     9f8:	a0 e4       	ldi	r26, 0x40	; 64
     9fa:	5a 07       	cpc	r21, r26
     9fc:	10 f0       	brcs	.+4      	; 0xa02 <__pack_f+0x10e>
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	79 01       	movw	r14, r18
     a04:	8a 01       	movw	r16, r20
     a06:	27 c0       	rjmp	.+78     	; 0xa56 <__pack_f+0x162>
     a08:	60 38       	cpi	r22, 0x80	; 128
     a0a:	71 05       	cpc	r23, r1
     a0c:	64 f5       	brge	.+88     	; 0xa66 <__pack_f+0x172>
     a0e:	fb 01       	movw	r30, r22
     a10:	e1 58       	subi	r30, 0x81	; 129
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	d8 01       	movw	r26, r16
     a16:	c7 01       	movw	r24, r14
     a18:	8f 77       	andi	r24, 0x7F	; 127
     a1a:	90 70       	andi	r25, 0x00	; 0
     a1c:	a0 70       	andi	r26, 0x00	; 0
     a1e:	b0 70       	andi	r27, 0x00	; 0
     a20:	80 34       	cpi	r24, 0x40	; 64
     a22:	91 05       	cpc	r25, r1
     a24:	a1 05       	cpc	r26, r1
     a26:	b1 05       	cpc	r27, r1
     a28:	39 f4       	brne	.+14     	; 0xa38 <__pack_f+0x144>
     a2a:	e7 fe       	sbrs	r14, 7
     a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__pack_f+0x154>
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__pack_f+0x14c>
     a38:	8f e3       	ldi	r24, 0x3F	; 63
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e8 0e       	add	r14, r24
     a42:	f9 1e       	adc	r15, r25
     a44:	0a 1f       	adc	r16, r26
     a46:	1b 1f       	adc	r17, r27
     a48:	17 ff       	sbrs	r17, 7
     a4a:	05 c0       	rjmp	.+10     	; 0xa56 <__pack_f+0x162>
     a4c:	16 95       	lsr	r17
     a4e:	07 95       	ror	r16
     a50:	f7 94       	ror	r15
     a52:	e7 94       	ror	r14
     a54:	31 96       	adiw	r30, 0x01	; 1
     a56:	87 e0       	ldi	r24, 0x07	; 7
     a58:	16 95       	lsr	r17
     a5a:	07 95       	ror	r16
     a5c:	f7 94       	ror	r15
     a5e:	e7 94       	ror	r14
     a60:	8a 95       	dec	r24
     a62:	d1 f7       	brne	.-12     	; 0xa58 <__pack_f+0x164>
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__pack_f+0x17c>
     a66:	ee 24       	eor	r14, r14
     a68:	ff 24       	eor	r15, r15
     a6a:	87 01       	movw	r16, r14
     a6c:	ef ef       	ldi	r30, 0xFF	; 255
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	6e 2f       	mov	r22, r30
     a72:	67 95       	ror	r22
     a74:	66 27       	eor	r22, r22
     a76:	67 95       	ror	r22
     a78:	90 2f       	mov	r25, r16
     a7a:	9f 77       	andi	r25, 0x7F	; 127
     a7c:	d7 94       	ror	r13
     a7e:	dd 24       	eor	r13, r13
     a80:	d7 94       	ror	r13
     a82:	8e 2f       	mov	r24, r30
     a84:	86 95       	lsr	r24
     a86:	49 2f       	mov	r20, r25
     a88:	46 2b       	or	r20, r22
     a8a:	58 2f       	mov	r21, r24
     a8c:	5d 29       	or	r21, r13
     a8e:	b7 01       	movw	r22, r14
     a90:	ca 01       	movw	r24, r20
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	08 95       	ret

00000a9e <__unpack_f>:
     a9e:	fc 01       	movw	r30, r24
     aa0:	db 01       	movw	r26, r22
     aa2:	40 81       	ld	r20, Z
     aa4:	51 81       	ldd	r21, Z+1	; 0x01
     aa6:	22 81       	ldd	r18, Z+2	; 0x02
     aa8:	62 2f       	mov	r22, r18
     aaa:	6f 77       	andi	r22, 0x7F	; 127
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	22 1f       	adc	r18, r18
     ab0:	22 27       	eor	r18, r18
     ab2:	22 1f       	adc	r18, r18
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	89 2f       	mov	r24, r25
     ab8:	88 0f       	add	r24, r24
     aba:	82 2b       	or	r24, r18
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	99 1f       	adc	r25, r25
     ac2:	99 27       	eor	r25, r25
     ac4:	99 1f       	adc	r25, r25
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	9c 93       	st	X, r25
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	21 15       	cp	r18, r1
     ace:	31 05       	cpc	r19, r1
     ad0:	a9 f5       	brne	.+106    	; 0xb3c <__unpack_f+0x9e>
     ad2:	41 15       	cp	r20, r1
     ad4:	51 05       	cpc	r21, r1
     ad6:	61 05       	cpc	r22, r1
     ad8:	71 05       	cpc	r23, r1
     ada:	11 f4       	brne	.+4      	; 0xae0 <__unpack_f+0x42>
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	37 c0       	rjmp	.+110    	; 0xb4e <__unpack_f+0xb0>
     ae0:	82 e8       	ldi	r24, 0x82	; 130
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	12 97       	sbiw	r26, 0x02	; 2
     aec:	9a 01       	movw	r18, r20
     aee:	ab 01       	movw	r20, r22
     af0:	67 e0       	ldi	r22, 0x07	; 7
     af2:	22 0f       	add	r18, r18
     af4:	33 1f       	adc	r19, r19
     af6:	44 1f       	adc	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	6a 95       	dec	r22
     afc:	d1 f7       	brne	.-12     	; 0xaf2 <__unpack_f+0x54>
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	8c 93       	st	X, r24
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <__unpack_f+0x80>
     b04:	22 0f       	add	r18, r18
     b06:	33 1f       	adc	r19, r19
     b08:	44 1f       	adc	r20, r20
     b0a:	55 1f       	adc	r21, r21
     b0c:	12 96       	adiw	r26, 0x02	; 2
     b0e:	8d 91       	ld	r24, X+
     b10:	9c 91       	ld	r25, X
     b12:	13 97       	sbiw	r26, 0x03	; 3
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	13 96       	adiw	r26, 0x03	; 3
     b18:	9c 93       	st	X, r25
     b1a:	8e 93       	st	-X, r24
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	20 30       	cpi	r18, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	38 07       	cpc	r19, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	48 07       	cpc	r20, r24
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	58 07       	cpc	r21, r24
     b2c:	58 f3       	brcs	.-42     	; 0xb04 <__unpack_f+0x66>
     b2e:	14 96       	adiw	r26, 0x04	; 4
     b30:	2d 93       	st	X+, r18
     b32:	3d 93       	st	X+, r19
     b34:	4d 93       	st	X+, r20
     b36:	5c 93       	st	X, r21
     b38:	17 97       	sbiw	r26, 0x07	; 7
     b3a:	08 95       	ret
     b3c:	2f 3f       	cpi	r18, 0xFF	; 255
     b3e:	31 05       	cpc	r19, r1
     b40:	79 f4       	brne	.+30     	; 0xb60 <__unpack_f+0xc2>
     b42:	41 15       	cp	r20, r1
     b44:	51 05       	cpc	r21, r1
     b46:	61 05       	cpc	r22, r1
     b48:	71 05       	cpc	r23, r1
     b4a:	19 f4       	brne	.+6      	; 0xb52 <__unpack_f+0xb4>
     b4c:	84 e0       	ldi	r24, 0x04	; 4
     b4e:	8c 93       	st	X, r24
     b50:	08 95       	ret
     b52:	64 ff       	sbrs	r22, 4
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <__unpack_f+0xbe>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8c 93       	st	X, r24
     b5a:	12 c0       	rjmp	.+36     	; 0xb80 <__unpack_f+0xe2>
     b5c:	1c 92       	st	X, r1
     b5e:	10 c0       	rjmp	.+32     	; 0xb80 <__unpack_f+0xe2>
     b60:	2f 57       	subi	r18, 0x7F	; 127
     b62:	30 40       	sbci	r19, 0x00	; 0
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	3c 93       	st	X, r19
     b68:	2e 93       	st	-X, r18
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	8c 93       	st	X, r24
     b70:	87 e0       	ldi	r24, 0x07	; 7
     b72:	44 0f       	add	r20, r20
     b74:	55 1f       	adc	r21, r21
     b76:	66 1f       	adc	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	8a 95       	dec	r24
     b7c:	d1 f7       	brne	.-12     	; 0xb72 <__unpack_f+0xd4>
     b7e:	70 64       	ori	r23, 0x40	; 64
     b80:	14 96       	adiw	r26, 0x04	; 4
     b82:	4d 93       	st	X+, r20
     b84:	5d 93       	st	X+, r21
     b86:	6d 93       	st	X+, r22
     b88:	7c 93       	st	X, r23
     b8a:	17 97       	sbiw	r26, 0x07	; 7
     b8c:	08 95       	ret

00000b8e <__fpcmp_parts_f>:
     b8e:	1f 93       	push	r17
     b90:	dc 01       	movw	r26, r24
     b92:	fb 01       	movw	r30, r22
     b94:	9c 91       	ld	r25, X
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	08 f4       	brcc	.+2      	; 0xb9c <__fpcmp_parts_f+0xe>
     b9a:	47 c0       	rjmp	.+142    	; 0xc2a <__fpcmp_parts_f+0x9c>
     b9c:	80 81       	ld	r24, Z
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <__fpcmp_parts_f+0x16>
     ba2:	43 c0       	rjmp	.+134    	; 0xc2a <__fpcmp_parts_f+0x9c>
     ba4:	94 30       	cpi	r25, 0x04	; 4
     ba6:	51 f4       	brne	.+20     	; 0xbbc <__fpcmp_parts_f+0x2e>
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	1c 91       	ld	r17, X
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	99 f5       	brne	.+102    	; 0xc16 <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	68 2f       	mov	r22, r24
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	61 1b       	sub	r22, r17
     bb8:	71 09       	sbc	r23, r1
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <__fpcmp_parts_f+0xac>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <__fpcmp_parts_f+0x3a>
     bc0:	92 30       	cpi	r25, 0x02	; 2
     bc2:	31 f4       	brne	.+12     	; 0xbd0 <__fpcmp_parts_f+0x42>
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	b9 f1       	breq	.+110    	; 0xc36 <__fpcmp_parts_f+0xa8>
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	88 23       	and	r24, r24
     bcc:	89 f1       	breq	.+98     	; 0xc30 <__fpcmp_parts_f+0xa2>
     bce:	2d c0       	rjmp	.+90     	; 0xc2a <__fpcmp_parts_f+0x9c>
     bd0:	11 96       	adiw	r26, 0x01	; 1
     bd2:	1c 91       	ld	r17, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	f1 f0       	breq	.+60     	; 0xc16 <__fpcmp_parts_f+0x88>
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	18 17       	cp	r17, r24
     bde:	d9 f4       	brne	.+54     	; 0xc16 <__fpcmp_parts_f+0x88>
     be0:	12 96       	adiw	r26, 0x02	; 2
     be2:	2d 91       	ld	r18, X+
     be4:	3c 91       	ld	r19, X
     be6:	13 97       	sbiw	r26, 0x03	; 3
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	82 17       	cp	r24, r18
     bee:	93 07       	cpc	r25, r19
     bf0:	94 f0       	brlt	.+36     	; 0xc16 <__fpcmp_parts_f+0x88>
     bf2:	28 17       	cp	r18, r24
     bf4:	39 07       	cpc	r19, r25
     bf6:	bc f0       	brlt	.+46     	; 0xc26 <__fpcmp_parts_f+0x98>
     bf8:	14 96       	adiw	r26, 0x04	; 4
     bfa:	8d 91       	ld	r24, X+
     bfc:	9d 91       	ld	r25, X+
     bfe:	0d 90       	ld	r0, X+
     c00:	bc 91       	ld	r27, X
     c02:	a0 2d       	mov	r26, r0
     c04:	24 81       	ldd	r18, Z+4	; 0x04
     c06:	35 81       	ldd	r19, Z+5	; 0x05
     c08:	46 81       	ldd	r20, Z+6	; 0x06
     c0a:	57 81       	ldd	r21, Z+7	; 0x07
     c0c:	28 17       	cp	r18, r24
     c0e:	39 07       	cpc	r19, r25
     c10:	4a 07       	cpc	r20, r26
     c12:	5b 07       	cpc	r21, r27
     c14:	18 f4       	brcc	.+6      	; 0xc1c <__fpcmp_parts_f+0x8e>
     c16:	11 23       	and	r17, r17
     c18:	41 f0       	breq	.+16     	; 0xc2a <__fpcmp_parts_f+0x9c>
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <__fpcmp_parts_f+0xa2>
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	a4 07       	cpc	r26, r20
     c22:	b5 07       	cpc	r27, r21
     c24:	40 f4       	brcc	.+16     	; 0xc36 <__fpcmp_parts_f+0xa8>
     c26:	11 23       	and	r17, r17
     c28:	19 f0       	breq	.+6      	; 0xc30 <__fpcmp_parts_f+0xa2>
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__fpcmp_parts_f+0xac>
     c30:	6f ef       	ldi	r22, 0xFF	; 255
     c32:	7f ef       	ldi	r23, 0xFF	; 255
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <__fpcmp_parts_f+0xac>
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	cb 01       	movw	r24, r22
     c3c:	1f 91       	pop	r17
     c3e:	08 95       	ret

00000c40 <__vector_7>:

static uint8 counter=0;


ISR(TIMER1_COMPA_vect)
{
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr !=NULL_PTR)
     c6a:	80 91 12 01 	lds	r24, 0x0112
     c6e:	90 91 13 01 	lds	r25, 0x0113
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	29 f0       	breq	.+10     	; 0xc80 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
     c76:	e0 91 12 01 	lds	r30, 0x0112
     c7a:	f0 91 13 01 	lds	r31, 0x0113
     c7e:	09 95       	icall
	}
}
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	bf 91       	pop	r27
     c8a:	af 91       	pop	r26
     c8c:	9f 91       	pop	r25
     c8e:	8f 91       	pop	r24
     c90:	7f 91       	pop	r23
     c92:	6f 91       	pop	r22
     c94:	5f 91       	pop	r21
     c96:	4f 91       	pop	r20
     c98:	3f 91       	pop	r19
     c9a:	2f 91       	pop	r18
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     cd0:	80 91 12 01 	lds	r24, 0x0112
     cd4:	90 91 13 01 	lds	r25, 0x0113
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	39 f0       	breq	.+14     	; 0xcea <__vector_9+0x44>
	{ 	(*g_callBackPtr)();
     cdc:	e0 91 12 01 	lds	r30, 0x0112
     ce0:	f0 91 13 01 	lds	r31, 0x0113
     ce4:	09 95       	icall
		 counter=0;	}
     ce6:	10 92 14 01 	sts	0x0114, r1
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <Timer1_init>:

/*
 * Function to initialize the Timer driver
*/
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	00 d0       	rcall	.+0      	; 0xd16 <Timer1_init+0x6>
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	89 83       	std	Y+1, r24	; 0x01

	//FOC1A & FOC1B for Non PWM mode
	TCCR1A =(1<<FOC1A) | (1<<FOC1B);
     d1e:	ef e4       	ldi	r30, 0x4F	; 79
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	8c e0       	ldi	r24, 0x0C	; 12
     d24:	80 83       	st	Z, r24
	// Prescaler bits are  CS10,CS11,CS12
	TCCR1B =(TCCR1B& 0xF8)|(Config_Ptr->prescaler);
     d26:	ae e4       	ldi	r26, 0x4E	; 78
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ee e4       	ldi	r30, 0x4E	; 78
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	98 2f       	mov	r25, r24
     d32:	98 7f       	andi	r25, 0xF8	; 248
     d34:	e9 81       	ldd	r30, Y+1	; 0x01
     d36:	fa 81       	ldd	r31, Y+2	; 0x02
     d38:	82 81       	ldd	r24, Z+2	; 0x02
     d3a:	89 2b       	or	r24, r25
     d3c:	8c 93       	st	X, r24
	// Initial value to start counting from
	TCNT1 = Config_Ptr->initial_value;
     d3e:	ac e4       	ldi	r26, 0x4C	; 76
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e9 81       	ldd	r30, Y+1	; 0x01
     d44:	fa 81       	ldd	r31, Y+2	; 0x02
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	9c 93       	st	X, r25
     d4e:	8e 93       	st	-X, r24

	//For compare
	if(Config_Ptr->mode == COMPARE)
     d50:	e9 81       	ldd	r30, Y+1	; 0x01
     d52:	fa 81       	ldd	r31, Y+2	; 0x02
     d54:	83 81       	ldd	r24, Z+3	; 0x03
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	a9 f4       	brne	.+42     	; 0xd84 <Timer1_init+0x74>
	{
			OCR1A = Config_Ptr->compare_value;
     d5a:	aa e4       	ldi	r26, 0x4A	; 74
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e9 81       	ldd	r30, Y+1	; 0x01
     d60:	fa 81       	ldd	r31, Y+2	; 0x02
     d62:	84 81       	ldd	r24, Z+4	; 0x04
     d64:	95 81       	ldd	r25, Z+5	; 0x05
     d66:	11 96       	adiw	r26, 0x01	; 1
     d68:	9c 93       	st	X, r25
     d6a:	8e 93       	st	-X, r24
			// Timer1 Compare Interrupt
			TIMSK = (1<<OCIE1A);
     d6c:	e9 e5       	ldi	r30, 0x59	; 89
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 e1       	ldi	r24, 0x10	; 16
     d72:	80 83       	st	Z, r24
			//WGM12 for compare mode WMG11:10 =0
			TCCR1B |= (1<<WGM12);
     d74:	ae e4       	ldi	r26, 0x4E	; 78
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ee e4       	ldi	r30, 0x4E	; 78
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	88 60       	ori	r24, 0x08	; 8
     d80:	8c 93       	st	X, r24
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <Timer1_init+0x86>
	}
	//For Normal
	else if(Config_Ptr->mode == NORMAL)
     d84:	e9 81       	ldd	r30, Y+1	; 0x01
     d86:	fa 81       	ldd	r31, Y+2	; 0x02
     d88:	83 81       	ldd	r24, Z+3	; 0x03
     d8a:	88 23       	and	r24, r24
     d8c:	21 f4       	brne	.+8      	; 0xd96 <Timer1_init+0x86>
	{
			TIMSK =(1<<TOIE1);} // Turning on normal mode interrupt
     d8e:	e9 e5       	ldi	r30, 0x59	; 89
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	80 83       	st	Z, r24
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <Timer1_deInit>:
void Timer1_deInit(void)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
	//Clearing all timer registers
	TCCR1A=0;
     da8:	ef e4       	ldi	r30, 0x4F	; 79
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	10 82       	st	Z, r1
	 TCCR1B=0;
     dae:	ee e4       	ldi	r30, 0x4E	; 78
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	10 82       	st	Z, r1
	TCNT1=0;
     db4:	ec e4       	ldi	r30, 0x4C	; 76
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	11 82       	std	Z+1, r1	; 0x01
     dba:	10 82       	st	Z, r1
	OCR1A=0;
     dbc:	ea e4       	ldi	r30, 0x4A	; 74
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	11 82       	std	Z+1, r1	; 0x01
     dc2:	10 82       	st	Z, r1

	// Clearing all 4 Interrupt enable bits
	TIMSK &= (0xC3);
     dc4:	a9 e5       	ldi	r26, 0x59	; 89
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e9 e5       	ldi	r30, 0x59	; 89
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	83 7c       	andi	r24, 0xC3	; 195
     dd0:	8c 93       	st	X, r24
	 counter=0;
     dd2:	10 92 14 01 	sts	0x0114, r1
	g_callBackPtr = NULL_PTR;
     dd6:	10 92 13 01 	sts	0x0113, r1
     dda:	10 92 12 01 	sts	0x0112, r1
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	00 d0       	rcall	.+0      	; 0xdea <Timer1_setCallBack+0x6>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	90 93 13 01 	sts	0x0113, r25
     dfa:	80 93 12 01 	sts	0x0112, r24
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <UART_init>:

/*
 * Description :
 * Function for Initialize the UART device Configurable
 */
void UART_init(const UART_ConfigType *Config_Ptr) {
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <UART_init+0x6>
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <UART_init+0x8>
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	9c 83       	std	Y+4, r25	; 0x04
     e16:	8b 83       	std	Y+3, r24	; 0x03
	uint16  ubrr_value = 0;
     e18:	1a 82       	std	Y+2, r1	; 0x02
     e1a:	19 82       	std	Y+1, r1	; 0x01
	UCSRA =(1<<U2X); // double speed
     e1c:	eb e2       	ldi	r30, 0x2B	; 43
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	80 83       	st	Z, r24
	 /* RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 */
	UCSRB =(1<<RXEN)|(1<<TXEN);
     e24:	ea e2       	ldi	r30, 0x2A	; 42
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	88 e1       	ldi	r24, 0x18	; 24
     e2a:	80 83       	st	Z, r24
	 * UPM1:0  = 10 Even parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 write to 0 at async operaton
	 */
	UCSRC = (1 << URSEL) | (Config_Ptr->bit_data<< UCSZ0) | (Config_Ptr->parity<< UPM0) | (Config_Ptr->stop_bit<< USBS);
     e2c:	a0 e4       	ldi	r26, 0x40	; 64
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	eb 81       	ldd	r30, Y+3	; 0x03
     e32:	fc 81       	ldd	r31, Y+4	; 0x04
     e34:	80 81       	ld	r24, Z
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	28 2f       	mov	r18, r24
     e40:	20 68       	ori	r18, 0x80	; 128
     e42:	eb 81       	ldd	r30, Y+3	; 0x03
     e44:	fc 81       	ldd	r31, Y+4	; 0x04
     e46:	81 81       	ldd	r24, Z+1	; 0x01
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	82 95       	swap	r24
     e4e:	92 95       	swap	r25
     e50:	90 7f       	andi	r25, 0xF0	; 240
     e52:	98 27       	eor	r25, r24
     e54:	80 7f       	andi	r24, 0xF0	; 240
     e56:	98 27       	eor	r25, r24
     e58:	28 2b       	or	r18, r24
     e5a:	eb 81       	ldd	r30, Y+3	; 0x03
     e5c:	fc 81       	ldd	r31, Y+4	; 0x04
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	82 2b       	or	r24, r18
     e72:	8c 93       	st	X, r24

	//Calculate the UBRR register value
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     e74:	eb 81       	ldd	r30, Y+3	; 0x03
     e76:	fc 81       	ldd	r31, Y+4	; 0x04
     e78:	83 81       	ldd	r24, Z+3	; 0x03
     e7a:	94 81       	ldd	r25, Z+4	; 0x04
     e7c:	cc 01       	movw	r24, r24
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	aa 1f       	adc	r26, r26
     e88:	bb 1f       	adc	r27, r27
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	aa 1f       	adc	r26, r26
     e90:	bb 1f       	adc	r27, r27
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	aa 1f       	adc	r26, r26
     e98:	bb 1f       	adc	r27, r27
     e9a:	9c 01       	movw	r18, r24
     e9c:	ad 01       	movw	r20, r26
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	92 e1       	ldi	r25, 0x12	; 18
     ea2:	aa e7       	ldi	r26, 0x7A	; 122
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 96 1c 	call	0x392c	; 0x392c <__udivmodsi4>
     eae:	da 01       	movw	r26, r20
     eb0:	c9 01       	movw	r24, r18
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9a 83       	std	Y+2, r25	; 0x02
     eb6:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = ubrr_value >> 8;
     eb8:	e0 e4       	ldi	r30, 0x40	; 64
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	89 2f       	mov	r24, r25
     ec2:	99 27       	eor	r25, r25
     ec4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     ec6:	e9 e2       	ldi	r30, 0x29	; 41
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	80 83       	st	Z, r24
}
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     ee8:	eb e2       	ldi	r30, 0x2B	; 43
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	80 72       	andi	r24, 0x20	; 32
     ef4:	90 70       	andi	r25, 0x00	; 0
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	b9 f3       	breq	.-18     	; 0xee8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     efa:	ec e2       	ldi	r30, 0x2C	; 44
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <UART_recieveByte>:
 * Description :
 * Functional responsible for receive byte from another UART device by polling.
 */

uint8 UART_recieveByte(void)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     f12:	eb e2       	ldi	r30, 0x2B	; 43
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	88 23       	and	r24, r24
     f1a:	dc f7       	brge	.-10     	; 0xf12 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     f1c:	ec e2       	ldi	r30, 0x2C	; 44
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <UART_sendString+0x6>
     f2e:	0f 92       	push	r0
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	9b 83       	std	Y+3, r25	; 0x03
     f36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f38:	19 82       	std	Y+1, r1	; 0x01
     f3a:	0e c0       	rjmp	.+28     	; 0xf58 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	fc 01       	movw	r30, r24
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	80 81       	ld	r24, Z
     f4e:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_sendByte>
		i++;
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	fc 01       	movw	r30, r24
     f64:	e2 0f       	add	r30, r18
     f66:	f3 1f       	adc	r31, r19
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	39 f7       	brne	.-50     	; 0xf3c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	00 d0       	rcall	.+0      	; 0xf84 <UART_receiveString+0xa>
     f84:	0f 92       	push	r0
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	9b 83       	std	Y+3, r25	; 0x03
     f8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f8e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	8c 01       	movw	r16, r24
     f9c:	02 0f       	add	r16, r18
     f9e:	13 1f       	adc	r17, r19
     fa0:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_recieveByte>
     fa4:	f8 01       	movw	r30, r16
     fa6:	80 83       	st	Z, r24
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	9b 81       	ldd	r25, Y+3	; 0x03
     fba:	8c 01       	movw	r16, r24
     fbc:	02 0f       	add	r16, r18
     fbe:	13 1f       	adc	r17, r19
     fc0:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_recieveByte>
     fc4:	f8 01       	movw	r30, r16
     fc6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	fc 01       	movw	r30, r24
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	80 81       	ld	r24, Z
     fda:	83 32       	cpi	r24, 0x23	; 35
     fdc:	31 f7       	brne	.-52     	; 0xfaa <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	9b 81       	ldd	r25, Y+3	; 0x03
     fe8:	fc 01       	movw	r30, r24
     fea:	e2 0f       	add	r30, r18
     fec:	f3 1f       	adc	r31, r19
     fee:	10 82       	st	Z, r1
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction) {
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <GPIO_setupPinDirection+0x6>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <GPIO_setupPinDirection+0x8>
    1008:	0f 92       	push	r0
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	6a 83       	std	Y+2, r22	; 0x02
    1012:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	88 30       	cpi	r24, 0x08	; 8
    1018:	08 f0       	brcs	.+2      	; 0x101c <GPIO_setupPinDirection+0x1c>
    101a:	d5 c0       	rjmp	.+426    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	08 f0       	brcs	.+2      	; 0x1024 <GPIO_setupPinDirection+0x24>
    1022:	d1 c0       	rjmp	.+418    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	3d 83       	std	Y+5, r19	; 0x05
    102c:	2c 83       	std	Y+4, r18	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <GPIO_setupPinDirection+0x3a>
    1038:	43 c0       	rjmp	.+134    	; 0x10c0 <GPIO_setupPinDirection+0xc0>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <GPIO_setupPinDirection+0x4e>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	71 f0       	breq	.+28     	; 0x1068 <GPIO_setupPinDirection+0x68>
    104c:	bc c0       	rjmp	.+376    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <GPIO_setupPinDirection+0x5a>
    1058:	5f c0       	rjmp	.+190    	; 0x1118 <GPIO_setupPinDirection+0x118>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	91 05       	cpc	r25, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <GPIO_setupPinDirection+0x66>
    1064:	85 c0       	rjmp	.+266    	; 0x1170 <GPIO_setupPinDirection+0x170>
    1066:	af c0       	rjmp	.+350    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	a1 f4       	brne	.+40     	; 0x1096 <GPIO_setupPinDirection+0x96>

				SET_BIT(DDRA, pin_num); /* This line is equivalent to 	DDRA |= (1 << pin_num);  */
    106e:	aa e3       	ldi	r26, 0x3A	; 58
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ea e3       	ldi	r30, 0x3A	; 58
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <GPIO_setupPinDirection+0x8c>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <GPIO_setupPinDirection+0x88>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	98 c0       	rjmp	.+304    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num); /* This line is equivalent to 	DDRA &= ~(1 << pin_num); */
    1096:	aa e3       	ldi	r26, 0x3A	; 58
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	ea e3       	ldi	r30, 0x3A	; 58
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <GPIO_setupPinDirection+0xb4>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <GPIO_setupPinDirection+0xb0>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	83 c0       	rjmp	.+262    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	a1 f4       	brne	.+40     	; 0x10ee <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    10c6:	a7 e3       	ldi	r26, 0x37	; 55
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e7 e3       	ldi	r30, 0x37	; 55
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_setupPinDirection+0xe4>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_setupPinDirection+0xe0>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	6c c0       	rjmp	.+216    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    10ee:	a7 e3       	ldi	r26, 0x37	; 55
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e7 e3       	ldi	r30, 0x37	; 55
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <GPIO_setupPinDirection+0x10c>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <GPIO_setupPinDirection+0x108>
    1110:	80 95       	com	r24
    1112:	84 23       	and	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	57 c0       	rjmp	.+174    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	a1 f4       	brne	.+40     	; 0x1146 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    111e:	a4 e3       	ldi	r26, 0x34	; 52
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e4 e3       	ldi	r30, 0x34	; 52
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_setupPinDirection+0x13c>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_setupPinDirection+0x138>
    1140:	84 2b       	or	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	40 c0       	rjmp	.+128    	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    1146:	a4 e3       	ldi	r26, 0x34	; 52
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e4 e3       	ldi	r30, 0x34	; 52
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_setupPinDirection+0x164>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_setupPinDirection+0x160>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	2b c0       	rjmp	.+86     	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	a1 f4       	brne	.+40     	; 0x119e <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    1176:	a1 e3       	ldi	r26, 0x31	; 49
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e1 e3       	ldi	r30, 0x31	; 49
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <GPIO_setupPinDirection+0x194>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <GPIO_setupPinDirection+0x190>
    1198:	84 2b       	or	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    119e:	a1 e3       	ldi	r26, 0x31	; 49
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e1 e3       	ldi	r30, 0x31	; 49
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <GPIO_setupPinDirection+0x1bc>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <GPIO_setupPinDirection+0x1b8>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <GPIO_writePin+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_writePin+0x8>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
    11e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <GPIO_writePin+0x1c>
    11f0:	d5 c0       	rjmp	.+426    	; 0x139c <GPIO_writePin+0x1c6>
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	84 30       	cpi	r24, 0x04	; 4
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <GPIO_writePin+0x24>
    11f8:	d1 c0       	rjmp	.+418    	; 0x139c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* Write the pin value as required */
		switch (port_num) {
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3d 83       	std	Y+5, r19	; 0x05
    1202:	2c 83       	std	Y+4, r18	; 0x04
    1204:	8c 81       	ldd	r24, Y+4	; 0x04
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <GPIO_writePin+0x3a>
    120e:	43 c0       	rjmp	.+134    	; 0x1296 <GPIO_writePin+0xc0>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <GPIO_writePin+0x4e>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	71 f0       	breq	.+28     	; 0x123e <GPIO_writePin+0x68>
    1222:	bc c0       	rjmp	.+376    	; 0x139c <GPIO_writePin+0x1c6>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_writePin+0x5a>
    122e:	5f c0       	rjmp	.+190    	; 0x12ee <GPIO_writePin+0x118>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <GPIO_writePin+0x66>
    123a:	85 c0       	rjmp	.+266    	; 0x1346 <GPIO_writePin+0x170>
    123c:	af c0       	rjmp	.+350    	; 0x139c <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	a1 f4       	brne	.+40     	; 0x126c <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    1244:	ab e3       	ldi	r26, 0x3B	; 59
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	eb e3       	ldi	r30, 0x3B	; 59
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_writePin+0x8c>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_writePin+0x88>
    1266:	84 2b       	or	r24, r20
    1268:	8c 93       	st	X, r24
    126a:	98 c0       	rjmp	.+304    	; 0x139c <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    126c:	ab e3       	ldi	r26, 0x3B	; 59
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <GPIO_writePin+0xb4>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <GPIO_writePin+0xb0>
    128e:	80 95       	com	r24
    1290:	84 23       	and	r24, r20
    1292:	8c 93       	st	X, r24
    1294:	83 c0       	rjmp	.+262    	; 0x139c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	a1 f4       	brne	.+40     	; 0x12c4 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    129c:	a8 e3       	ldi	r26, 0x38	; 56
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e8 e3       	ldi	r30, 0x38	; 56
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <GPIO_writePin+0xe4>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <GPIO_writePin+0xe0>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	6c c0       	rjmp	.+216    	; 0x139c <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    12c4:	a8 e3       	ldi	r26, 0x38	; 56
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e3       	ldi	r30, 0x38	; 56
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <GPIO_writePin+0x10c>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <GPIO_writePin+0x108>
    12e6:	80 95       	com	r24
    12e8:	84 23       	and	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	57 c0       	rjmp	.+174    	; 0x139c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	a1 f4       	brne	.+40     	; 0x131c <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    12f4:	a5 e3       	ldi	r26, 0x35	; 53
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e5 e3       	ldi	r30, 0x35	; 53
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <GPIO_writePin+0x13c>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <GPIO_writePin+0x138>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	40 c0       	rjmp	.+128    	; 0x139c <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    131c:	a5 e3       	ldi	r26, 0x35	; 53
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e5 e3       	ldi	r30, 0x35	; 53
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_writePin+0x164>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_writePin+0x160>
    133e:	80 95       	com	r24
    1340:	84 23       	and	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	2b c0       	rjmp	.+86     	; 0x139c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	a1 f4       	brne	.+40     	; 0x1374 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    134c:	a2 e3       	ldi	r26, 0x32	; 50
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e2 e3       	ldi	r30, 0x32	; 50
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_writePin+0x194>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_writePin+0x190>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	14 c0       	rjmp	.+40     	; 0x139c <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    1374:	a2 e3       	ldi	r26, 0x32	; 50
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e2 e3       	ldi	r30, 0x32	; 50
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_writePin+0x1bc>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_writePin+0x1b8>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <GPIO_readPin+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <GPIO_readPin+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13be:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 30       	cpi	r24, 0x08	; 8
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <GPIO_readPin+0x1c>
    13c6:	84 c0       	rjmp	.+264    	; 0x14d0 <GPIO_readPin+0x124>
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	84 30       	cpi	r24, 0x04	; 4
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <GPIO_readPin+0x24>
    13ce:	80 c0       	rjmp	.+256    	; 0x14d0 <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* Read the pin value as required */
		switch (port_num) {
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	4c 81       	ldd	r20, Y+4	; 0x04
    13dc:	5d 81       	ldd	r21, Y+5	; 0x05
    13de:	41 30       	cpi	r20, 0x01	; 1
    13e0:	51 05       	cpc	r21, r1
    13e2:	79 f1       	breq	.+94     	; 0x1442 <GPIO_readPin+0x96>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	91 05       	cpc	r25, r1
    13ec:	34 f4       	brge	.+12     	; 0x13fa <GPIO_readPin+0x4e>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	21 15       	cp	r18, r1
    13f4:	31 05       	cpc	r19, r1
    13f6:	69 f0       	breq	.+26     	; 0x1412 <GPIO_readPin+0x66>
    13f8:	6b c0       	rjmp	.+214    	; 0x14d0 <GPIO_readPin+0x124>
    13fa:	4c 81       	ldd	r20, Y+4	; 0x04
    13fc:	5d 81       	ldd	r21, Y+5	; 0x05
    13fe:	42 30       	cpi	r20, 0x02	; 2
    1400:	51 05       	cpc	r21, r1
    1402:	b9 f1       	breq	.+110    	; 0x1472 <GPIO_readPin+0xc6>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	09 f4       	brne	.+2      	; 0x1410 <GPIO_readPin+0x64>
    140e:	49 c0       	rjmp	.+146    	; 0x14a2 <GPIO_readPin+0xf6>
    1410:	5f c0       	rjmp	.+190    	; 0x14d0 <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    1412:	e9 e3       	ldi	r30, 0x39	; 57
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a9 01       	movw	r20, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_readPin+0x7e>
    1426:	55 95       	asr	r21
    1428:	47 95       	ror	r20
    142a:	8a 95       	dec	r24
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_readPin+0x7a>
    142e:	ca 01       	movw	r24, r20
    1430:	81 70       	andi	r24, 0x01	; 1
    1432:	90 70       	andi	r25, 0x00	; 0
    1434:	88 23       	and	r24, r24
    1436:	19 f0       	breq	.+6      	; 0x143e <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	49 c0       	rjmp	.+146    	; 0x14d0 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    143e:	19 82       	std	Y+1, r1	; 0x01
    1440:	47 c0       	rjmp	.+142    	; 0x14d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    1442:	e6 e3       	ldi	r30, 0x36	; 54
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 2f       	mov	r24, r24
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	a9 01       	movw	r20, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_readPin+0xae>
    1456:	55 95       	asr	r21
    1458:	47 95       	ror	r20
    145a:	8a 95       	dec	r24
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_readPin+0xaa>
    145e:	ca 01       	movw	r24, r20
    1460:	81 70       	andi	r24, 0x01	; 1
    1462:	90 70       	andi	r25, 0x00	; 0
    1464:	88 23       	and	r24, r24
    1466:	19 f0       	breq	.+6      	; 0x146e <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	31 c0       	rjmp	.+98     	; 0x14d0 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    146e:	19 82       	std	Y+1, r1	; 0x01
    1470:	2f c0       	rjmp	.+94     	; 0x14d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    1472:	e3 e3       	ldi	r30, 0x33	; 51
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <GPIO_readPin+0xde>
    1486:	55 95       	asr	r21
    1488:	47 95       	ror	r20
    148a:	8a 95       	dec	r24
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <GPIO_readPin+0xda>
    148e:	ca 01       	movw	r24, r20
    1490:	81 70       	andi	r24, 0x01	; 1
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	88 23       	and	r24, r24
    1496:	19 f0       	breq	.+6      	; 0x149e <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	19 c0       	rjmp	.+50     	; 0x14d0 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    149e:	19 82       	std	Y+1, r1	; 0x01
    14a0:	17 c0       	rjmp	.+46     	; 0x14d0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    14a2:	e0 e3       	ldi	r30, 0x30	; 48
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a9 01       	movw	r20, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_readPin+0x10e>
    14b6:	55 95       	asr	r21
    14b8:	47 95       	ror	r20
    14ba:	8a 95       	dec	r24
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_readPin+0x10a>
    14be:	ca 01       	movw	r24, r20
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	88 23       	and	r24, r24
    14c6:	19 f0       	breq	.+6      	; 0x14ce <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <GPIO_readPin+0x124>
			} else {
				pin_value = LOGIC_LOW;
    14ce:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <GPIO_setupPortDirection+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <GPIO_setupPortDirection+0x8>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	90 f5       	brcc	.+100    	; 0x155c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	3c 83       	std	Y+4, r19	; 0x04
    1500:	2b 83       	std	Y+3, r18	; 0x03
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	91 05       	cpc	r25, r1
    150a:	d1 f0       	breq	.+52     	; 0x1540 <GPIO_setupPortDirection+0x5e>
    150c:	2b 81       	ldd	r18, Y+3	; 0x03
    150e:	3c 81       	ldd	r19, Y+4	; 0x04
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <GPIO_setupPortDirection+0x3e>
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	61 f0       	breq	.+24     	; 0x1536 <GPIO_setupPortDirection+0x54>
    151e:	1e c0       	rjmp	.+60     	; 0x155c <GPIO_setupPortDirection+0x7a>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	81 f0       	breq	.+32     	; 0x154a <GPIO_setupPortDirection+0x68>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	91 05       	cpc	r25, r1
    1532:	81 f0       	breq	.+32     	; 0x1554 <GPIO_setupPortDirection+0x72>
    1534:	13 c0       	rjmp	.+38     	; 0x155c <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    1536:	ea e3       	ldi	r30, 0x3A	; 58
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	80 83       	st	Z, r24
    153e:	0e c0       	rjmp	.+28     	; 0x155c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1540:	e7 e3       	ldi	r30, 0x37	; 55
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	80 83       	st	Z, r24
    1548:	09 c0       	rjmp	.+18     	; 0x155c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    154a:	e4 e3       	ldi	r30, 0x34	; 52
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	80 83       	st	Z, r24
    1552:	04 c0       	rjmp	.+8      	; 0x155c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1554:	e1 e3       	ldi	r30, 0x31	; 49
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 83       	st	Z, r24
			break;
		}
	}
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <GPIO_writePort+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <GPIO_writePort+0x8>
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	90 f5       	brcc	.+100    	; 0x15e4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* Write the port value as required */
		switch (port_num) {
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3c 83       	std	Y+4, r19	; 0x04
    1588:	2b 83       	std	Y+3, r18	; 0x03
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	91 05       	cpc	r25, r1
    1592:	d1 f0       	breq	.+52     	; 0x15c8 <GPIO_writePort+0x5e>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	2c f4       	brge	.+10     	; 0x15a8 <GPIO_writePort+0x3e>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	61 f0       	breq	.+24     	; 0x15be <GPIO_writePort+0x54>
    15a6:	1e c0       	rjmp	.+60     	; 0x15e4 <GPIO_writePort+0x7a>
    15a8:	2b 81       	ldd	r18, Y+3	; 0x03
    15aa:	3c 81       	ldd	r19, Y+4	; 0x04
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <GPIO_writePort+0x68>
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	83 30       	cpi	r24, 0x03	; 3
    15b8:	91 05       	cpc	r25, r1
    15ba:	81 f0       	breq	.+32     	; 0x15dc <GPIO_writePort+0x72>
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	80 83       	st	Z, r24
    15c6:	0e c0       	rjmp	.+28     	; 0x15e4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15c8:	e8 e3       	ldi	r30, 0x38	; 56
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 83       	st	Z, r24
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15d2:	e5 e3       	ldi	r30, 0x35	; 53
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	80 83       	st	Z, r24
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15dc:	e2 e3       	ldi	r30, 0x32	; 50
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <GPIO_readPort+0x6>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <GPIO_readPort+0x8>
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
    15fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1600:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	90 f5       	brcc	.+100    	; 0x166c <GPIO_readPort+0x7a>
		/* Do Nothing */
	} else {
		/* Read the port value as required */
		switch (port_num) {
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3c 83       	std	Y+4, r19	; 0x04
    1610:	2b 83       	std	Y+3, r18	; 0x03
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	d1 f0       	breq	.+52     	; 0x1650 <GPIO_readPort+0x5e>
    161c:	2b 81       	ldd	r18, Y+3	; 0x03
    161e:	3c 81       	ldd	r19, Y+4	; 0x04
    1620:	22 30       	cpi	r18, 0x02	; 2
    1622:	31 05       	cpc	r19, r1
    1624:	2c f4       	brge	.+10     	; 0x1630 <GPIO_readPort+0x3e>
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	61 f0       	breq	.+24     	; 0x1646 <GPIO_readPort+0x54>
    162e:	1e c0       	rjmp	.+60     	; 0x166c <GPIO_readPort+0x7a>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	81 f0       	breq	.+32     	; 0x165a <GPIO_readPort+0x68>
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	81 f0       	breq	.+32     	; 0x1664 <GPIO_readPort+0x72>
    1644:	13 c0       	rjmp	.+38     	; 0x166c <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    1646:	e9 e3       	ldi	r30, 0x39	; 57
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	0e c0       	rjmp	.+28     	; 0x166c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1650:	e6 e3       	ldi	r30, 0x36	; 54
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	09 c0       	rjmp	.+18     	; 0x166c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    165a:	e3 e3       	ldi	r30, 0x33	; 51
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	04 c0       	rjmp	.+8      	; 0x166c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1664:	e0 e3       	ldi	r30, 0x30	; 48
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	2e 97       	sbiw	r28, 0x0e	; 14
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	41 e0       	ldi	r20, 0x01	; 1
    1696:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	41 e0       	ldi	r20, 0x01	; 1
    16a0:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a0 ea       	ldi	r26, 0xA0	; 160
    16aa:	b1 e4       	ldi	r27, 0x41	; 65
    16ac:	8b 87       	std	Y+11, r24	; 0x0b
    16ae:	9c 87       	std	Y+12, r25	; 0x0c
    16b0:	ad 87       	std	Y+13, r26	; 0x0d
    16b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a ef       	ldi	r20, 0xFA	; 250
    16c2:	54 e4       	ldi	r21, 0x44	; 68
    16c4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8f 83       	std	Y+7, r24	; 0x07
    16ce:	98 87       	std	Y+8, r25	; 0x08
    16d0:	a9 87       	std	Y+9, r26	; 0x09
    16d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <LCD_init+0x7a>
		__ticks = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <LCD_init+0xf8>
	else if (__tmp > 65535)
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    170a:	18 16       	cp	r1, r24
    170c:	4c f5       	brge	.+82     	; 0x1760 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1710:	7c 85       	ldd	r23, Y+12	; 0x0c
    1712:	8d 85       	ldd	r24, Y+13	; 0x0d
    1714:	9e 85       	ldd	r25, Y+14	; 0x0e
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e2       	ldi	r20, 0x20	; 32
    171c:	51 e4       	ldi	r21, 0x41	; 65
    171e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <LCD_init+0xda>
    1738:	88 ec       	ldi	r24, 0xC8	; 200
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_init+0xc8>
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f7       	brne	.-38     	; 0x1738 <LCD_init+0xbc>
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	9e 81       	ldd	r25, Y+6	; 0x06
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <LCD_init+0x104>
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	6f ef       	ldi	r22, 0xFF	; 255
    178c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1790:	88 e3       	ldi	r24, 0x38	; 56
    1792:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1796:	8c e0       	ldi	r24, 0x0C	; 12
    1798:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>
}
    17a2:	2e 96       	adiw	r28, 0x0e	; 14
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	e9 97       	sbiw	r28, 0x39	; 57
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e8       	ldi	r26, 0x80	; 128
    17da:	bf e3       	ldi	r27, 0x3F	; 63
    17dc:	8d ab       	std	Y+53, r24	; 0x35
    17de:	9e ab       	std	Y+54, r25	; 0x36
    17e0:	af ab       	std	Y+55, r26	; 0x37
    17e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6d a9       	ldd	r22, Y+53	; 0x35
    17e6:	7e a9       	ldd	r23, Y+54	; 0x36
    17e8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ea:	98 ad       	ldd	r25, Y+56	; 0x38
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a ef       	ldi	r20, 0xFA	; 250
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	89 ab       	std	Y+49, r24	; 0x31
    17fe:	9a ab       	std	Y+50, r25	; 0x32
    1800:	ab ab       	std	Y+51, r26	; 0x33
    1802:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1804:	69 a9       	ldd	r22, Y+49	; 0x31
    1806:	7a a9       	ldd	r23, Y+50	; 0x32
    1808:	8b a9       	ldd	r24, Y+51	; 0x33
    180a:	9c a9       	ldd	r25, Y+52	; 0x34
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <LCD_sendCommand+0x72>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	98 ab       	std	Y+48, r25	; 0x30
    1822:	8f a7       	std	Y+47, r24	; 0x2f
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1826:	69 a9       	ldd	r22, Y+49	; 0x31
    1828:	7a a9       	ldd	r23, Y+50	; 0x32
    182a:	8b a9       	ldd	r24, Y+51	; 0x33
    182c:	9c a9       	ldd	r25, Y+52	; 0x34
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6d a9       	ldd	r22, Y+53	; 0x35
    1840:	7e a9       	ldd	r23, Y+54	; 0x36
    1842:	8f a9       	ldd	r24, Y+55	; 0x37
    1844:	98 ad       	ldd	r25, Y+56	; 0x38
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	98 ab       	std	Y+48, r25	; 0x30
    1864:	8f a7       	std	Y+47, r24	; 0x2f
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <LCD_sendCommand+0xd2>
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9e a7       	std	Y+46, r25	; 0x2e
    186e:	8d a7       	std	Y+45, r24	; 0x2d
    1870:	8d a5       	ldd	r24, Y+45	; 0x2d
    1872:	9e a5       	ldd	r25, Y+46	; 0x2e
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_sendCommand+0xc0>
    1878:	9e a7       	std	Y+46, r25	; 0x2e
    187a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8f a5       	ldd	r24, Y+47	; 0x2f
    187e:	98 a9       	ldd	r25, Y+48	; 0x30
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	98 ab       	std	Y+48, r25	; 0x30
    1884:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8f a5       	ldd	r24, Y+47	; 0x2f
    1888:	98 a9       	ldd	r25, Y+48	; 0x30
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <LCD_sendCommand+0xb4>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	69 a9       	ldd	r22, Y+49	; 0x31
    1892:	7a a9       	ldd	r23, Y+50	; 0x32
    1894:	8b a9       	ldd	r24, Y+51	; 0x33
    1896:	9c a9       	ldd	r25, Y+52	; 0x34
    1898:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	98 ab       	std	Y+48, r25	; 0x30
    18a2:	8f a7       	std	Y+47, r24	; 0x2f
    18a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a6:	98 a9       	ldd	r25, Y+48	; 0x30
    18a8:	9c a7       	std	Y+44, r25	; 0x2c
    18aa:	8b a7       	std	Y+43, r24	; 0x2b
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_sendCommand+0xfc>
    18b4:	9c a7       	std	Y+44, r25	; 0x2c
    18b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e8       	ldi	r26, 0x80	; 128
    18c8:	bf e3       	ldi	r27, 0x3F	; 63
    18ca:	8f a3       	std	Y+39, r24	; 0x27
    18cc:	98 a7       	std	Y+40, r25	; 0x28
    18ce:	a9 a7       	std	Y+41, r26	; 0x29
    18d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	6f a1       	ldd	r22, Y+39	; 0x27
    18d4:	78 a5       	ldd	r23, Y+40	; 0x28
    18d6:	89 a5       	ldd	r24, Y+41	; 0x29
    18d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a ef       	ldi	r20, 0xFA	; 250
    18e0:	54 e4       	ldi	r21, 0x44	; 68
    18e2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8b a3       	std	Y+35, r24	; 0x23
    18ec:	9c a3       	std	Y+36, r25	; 0x24
    18ee:	ad a3       	std	Y+37, r26	; 0x25
    18f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f2:	6b a1       	ldd	r22, Y+35	; 0x23
    18f4:	7c a1       	ldd	r23, Y+36	; 0x24
    18f6:	8d a1       	ldd	r24, Y+37	; 0x25
    18f8:	9e a1       	ldd	r25, Y+38	; 0x26
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <LCD_sendCommand+0x160>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9a a3       	std	Y+34, r25	; 0x22
    1910:	89 a3       	std	Y+33, r24	; 0x21
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1914:	6b a1       	ldd	r22, Y+35	; 0x23
    1916:	7c a1       	ldd	r23, Y+36	; 0x24
    1918:	8d a1       	ldd	r24, Y+37	; 0x25
    191a:	9e a1       	ldd	r25, Y+38	; 0x26
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	6f a1       	ldd	r22, Y+39	; 0x27
    192e:	78 a5       	ldd	r23, Y+40	; 0x28
    1930:	89 a5       	ldd	r24, Y+41	; 0x29
    1932:	9a a5       	ldd	r25, Y+42	; 0x2a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <LCD_sendCommand+0x1c0>
    1956:	88 ec       	ldi	r24, 0xC8	; 200
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	98 a3       	std	Y+32, r25	; 0x20
    195c:	8f 8f       	std	Y+31, r24	; 0x1f
    195e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1960:	98 a1       	ldd	r25, Y+32	; 0x20
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_sendCommand+0x1ae>
    1966:	98 a3       	std	Y+32, r25	; 0x20
    1968:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	89 a1       	ldd	r24, Y+33	; 0x21
    196c:	9a a1       	ldd	r25, Y+34	; 0x22
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9a a3       	std	Y+34, r25	; 0x22
    1972:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	89 a1       	ldd	r24, Y+33	; 0x21
    1976:	9a a1       	ldd	r25, Y+34	; 0x22
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <LCD_sendCommand+0x1a2>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6b a1       	ldd	r22, Y+35	; 0x23
    1980:	7c a1       	ldd	r23, Y+36	; 0x24
    1982:	8d a1       	ldd	r24, Y+37	; 0x25
    1984:	9e a1       	ldd	r25, Y+38	; 0x26
    1986:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9a a3       	std	Y+34, r25	; 0x22
    1990:	89 a3       	std	Y+33, r24	; 0x21
    1992:	89 a1       	ldd	r24, Y+33	; 0x21
    1994:	9a a1       	ldd	r25, Y+34	; 0x22
    1996:	9e 8f       	std	Y+30, r25	; 0x1e
    1998:	8d 8f       	std	Y+29, r24	; 0x1d
    199a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_sendCommand+0x1ea>
    19a2:	9e 8f       	std	Y+30, r25	; 0x1e
    19a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	69 ad       	ldd	r22, Y+57	; 0x39
    19aa:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_writePort>
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 e8       	ldi	r26, 0x80	; 128
    19b4:	bf e3       	ldi	r27, 0x3F	; 63
    19b6:	89 8f       	std	Y+25, r24	; 0x19
    19b8:	9a 8f       	std	Y+26, r25	; 0x1a
    19ba:	ab 8f       	std	Y+27, r26	; 0x1b
    19bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19be:	69 8d       	ldd	r22, Y+25	; 0x19
    19c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	4a ef       	ldi	r20, 0xFA	; 250
    19cc:	54 e4       	ldi	r21, 0x44	; 68
    19ce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	8d 8b       	std	Y+21, r24	; 0x15
    19d8:	9e 8b       	std	Y+22, r25	; 0x16
    19da:	af 8b       	std	Y+23, r26	; 0x17
    19dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <LCD_sendCommand+0x24c>
		__ticks = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
    19fe:	3f c0       	rjmp	.+126    	; 0x1a7e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a00:	6d 89       	ldd	r22, Y+21	; 0x15
    1a02:	7e 89       	ldd	r23, Y+22	; 0x16
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f e7       	ldi	r20, 0x7F	; 127
    1a0e:	57 e4       	ldi	r21, 0x47	; 71
    1a10:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1a14:	18 16       	cp	r1, r24
    1a16:	4c f5       	brge	.+82     	; 0x1a6a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a18:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e2       	ldi	r20, 0x20	; 32
    1a26:	51 e4       	ldi	r21, 0x41	; 65
    1a28:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	0f c0       	rjmp	.+30     	; 0x1a60 <LCD_sendCommand+0x2ac>
    1a42:	88 ec       	ldi	r24, 0xC8	; 200
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	89 8b       	std	Y+17, r24	; 0x11
    1a4a:	89 89       	ldd	r24, Y+17	; 0x11
    1a4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <LCD_sendCommand+0x29a>
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	9c 8b       	std	Y+20, r25	; 0x14
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	69 f7       	brne	.-38     	; 0x1a42 <LCD_sendCommand+0x28e>
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a70:	98 8d       	ldd	r25, Y+24	; 0x18
    1a72:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a80:	9c 89       	ldd	r25, Y+20	; 0x14
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	98 89       	ldd	r25, Y+16	; 0x10
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <LCD_sendCommand+0x2d6>
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e8       	ldi	r26, 0x80	; 128
    1aa2:	bf e3       	ldi	r27, 0x3F	; 63
    1aa4:	8b 87       	std	Y+11, r24	; 0x0b
    1aa6:	9c 87       	std	Y+12, r25	; 0x0c
    1aa8:	ad 87       	std	Y+13, r26	; 0x0d
    1aaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a ef       	ldi	r20, 0xFA	; 250
    1aba:	54 e4       	ldi	r21, 0x44	; 68
    1abc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	8f 83       	std	Y+7, r24	; 0x07
    1ac6:	98 87       	std	Y+8, r25	; 0x08
    1ac8:	a9 87       	std	Y+9, r26	; 0x09
    1aca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e8       	ldi	r20, 0x80	; 128
    1ada:	5f e3       	ldi	r21, 0x3F	; 63
    1adc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1ae0:	88 23       	and	r24, r24
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	3f c0       	rjmp	.+126    	; 0x1b6c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	4c f5       	brge	.+82     	; 0x1b58 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e2       	ldi	r20, 0x20	; 32
    1b14:	51 e4       	ldi	r21, 0x41	; 65
    1b16:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	0f c0       	rjmp	.+30     	; 0x1b4e <LCD_sendCommand+0x39a>
    1b30:	88 ec       	ldi	r24, 0xC8	; 200
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	f1 f7       	brne	.-4      	; 0x1b3c <LCD_sendCommand+0x388>
    1b40:	9c 83       	std	Y+4, r25	; 0x04
    1b42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	9e 81       	ldd	r25, Y+6	; 0x06
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	69 f7       	brne	.-38     	; 0x1b30 <LCD_sendCommand+0x37c>
    1b56:	14 c0       	rjmp	.+40     	; 0x1b80 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b58:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5a:	78 85       	ldd	r23, Y+8	; 0x08
    1b5c:	89 85       	ldd	r24, Y+9	; 0x09
    1b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b60:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	f1 f7       	brne	.-4      	; 0x1b78 <LCD_sendCommand+0x3c4>
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b80:	e9 96       	adiw	r28, 0x39	; 57
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	e9 97       	sbiw	r28, 0x39	; 57
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e8       	ldi	r26, 0x80	; 128
    1bb8:	bf e3       	ldi	r27, 0x3F	; 63
    1bba:	8d ab       	std	Y+53, r24	; 0x35
    1bbc:	9e ab       	std	Y+54, r25	; 0x36
    1bbe:	af ab       	std	Y+55, r26	; 0x37
    1bc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1bc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1bc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4a ef       	ldi	r20, 0xFA	; 250
    1bd0:	54 e4       	ldi	r21, 0x44	; 68
    1bd2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	89 ab       	std	Y+49, r24	; 0x31
    1bdc:	9a ab       	std	Y+50, r25	; 0x32
    1bde:	ab ab       	std	Y+51, r26	; 0x33
    1be0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1be2:	69 a9       	ldd	r22, Y+49	; 0x31
    1be4:	7a a9       	ldd	r23, Y+50	; 0x32
    1be6:	8b a9       	ldd	r24, Y+51	; 0x33
    1be8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e8       	ldi	r20, 0x80	; 128
    1bf0:	5f e3       	ldi	r21, 0x3F	; 63
    1bf2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1bf6:	88 23       	and	r24, r24
    1bf8:	2c f4       	brge	.+10     	; 0x1c04 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
    1c02:	3f c0       	rjmp	.+126    	; 0x1c82 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c04:	69 a9       	ldd	r22, Y+49	; 0x31
    1c06:	7a a9       	ldd	r23, Y+50	; 0x32
    1c08:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	3f ef       	ldi	r19, 0xFF	; 255
    1c10:	4f e7       	ldi	r20, 0x7F	; 127
    1c12:	57 e4       	ldi	r21, 0x47	; 71
    1c14:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1c18:	18 16       	cp	r1, r24
    1c1a:	4c f5       	brge	.+82     	; 0x1c6e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c20:	8f a9       	ldd	r24, Y+55	; 0x37
    1c22:	98 ad       	ldd	r25, Y+56	; 0x38
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e2       	ldi	r20, 0x20	; 32
    1c2a:	51 e4       	ldi	r21, 0x41	; 65
    1c2c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	bc 01       	movw	r22, r24
    1c36:	cd 01       	movw	r24, r26
    1c38:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	98 ab       	std	Y+48, r25	; 0x30
    1c42:	8f a7       	std	Y+47, r24	; 0x2f
    1c44:	0f c0       	rjmp	.+30     	; 0x1c64 <LCD_displayCharacter+0xd2>
    1c46:	88 ec       	ldi	r24, 0xC8	; 200
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9e a7       	std	Y+46, r25	; 0x2e
    1c4c:	8d a7       	std	Y+45, r24	; 0x2d
    1c4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c50:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_displayCharacter+0xc0>
    1c56:	9e a7       	std	Y+46, r25	; 0x2e
    1c58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	98 ab       	std	Y+48, r25	; 0x30
    1c62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c66:	98 a9       	ldd	r25, Y+48	; 0x30
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	69 f7       	brne	.-38     	; 0x1c46 <LCD_displayCharacter+0xb4>
    1c6c:	14 c0       	rjmp	.+40     	; 0x1c96 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c70:	7a a9       	ldd	r23, Y+50	; 0x32
    1c72:	8b a9       	ldd	r24, Y+51	; 0x33
    1c74:	9c a9       	ldd	r25, Y+52	; 0x34
    1c76:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	98 ab       	std	Y+48, r25	; 0x30
    1c80:	8f a7       	std	Y+47, r24	; 0x2f
    1c82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c84:	98 a9       	ldd	r25, Y+48	; 0x30
    1c86:	9c a7       	std	Y+44, r25	; 0x2c
    1c88:	8b a7       	std	Y+43, r24	; 0x2b
    1c8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <LCD_displayCharacter+0xfc>
    1c92:	9c a7       	std	Y+44, r25	; 0x2c
    1c94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	61 e0       	ldi	r22, 0x01	; 1
    1c9a:	41 e0       	ldi	r20, 0x01	; 1
    1c9c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	a0 e8       	ldi	r26, 0x80	; 128
    1ca6:	bf e3       	ldi	r27, 0x3F	; 63
    1ca8:	8f a3       	std	Y+39, r24	; 0x27
    1caa:	98 a7       	std	Y+40, r25	; 0x28
    1cac:	a9 a7       	std	Y+41, r26	; 0x29
    1cae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4a ef       	ldi	r20, 0xFA	; 250
    1cbe:	54 e4       	ldi	r21, 0x44	; 68
    1cc0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	8b a3       	std	Y+35, r24	; 0x23
    1cca:	9c a3       	std	Y+36, r25	; 0x24
    1ccc:	ad a3       	std	Y+37, r26	; 0x25
    1cce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e8       	ldi	r20, 0x80	; 128
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1ce4:	88 23       	and	r24, r24
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9a a3       	std	Y+34, r25	; 0x22
    1cee:	89 a3       	std	Y+33, r24	; 0x21
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1cf2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	3f ef       	ldi	r19, 0xFF	; 255
    1cfe:	4f e7       	ldi	r20, 0x7F	; 127
    1d00:	57 e4       	ldi	r21, 0x47	; 71
    1d02:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1d06:	18 16       	cp	r1, r24
    1d08:	4c f5       	brge	.+82     	; 0x1d5c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9a a3       	std	Y+34, r25	; 0x22
    1d30:	89 a3       	std	Y+33, r24	; 0x21
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <LCD_displayCharacter+0x1c0>
    1d34:	88 ec       	ldi	r24, 0xC8	; 200
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	98 a3       	std	Y+32, r25	; 0x20
    1d3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_displayCharacter+0x1ae>
    1d44:	98 a3       	std	Y+32, r25	; 0x20
    1d46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9a a3       	std	Y+34, r25	; 0x22
    1d50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	89 a1       	ldd	r24, Y+33	; 0x21
    1d54:	9a a1       	ldd	r25, Y+34	; 0x22
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <LCD_displayCharacter+0x1a2>
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d60:	8d a1       	ldd	r24, Y+37	; 0x25
    1d62:	9e a1       	ldd	r25, Y+38	; 0x26
    1d64:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9a a3       	std	Y+34, r25	; 0x22
    1d6e:	89 a3       	std	Y+33, r24	; 0x21
    1d70:	89 a1       	ldd	r24, Y+33	; 0x21
    1d72:	9a a1       	ldd	r25, Y+34	; 0x22
    1d74:	9e 8f       	std	Y+30, r25	; 0x1e
    1d76:	8d 8f       	std	Y+29, r24	; 0x1d
    1d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <LCD_displayCharacter+0x1ea>
    1d80:	9e 8f       	std	Y+30, r25	; 0x1e
    1d82:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	69 ad       	ldd	r22, Y+57	; 0x39
    1d88:	0e 94 b5 0a 	call	0x156a	; 0x156a <GPIO_writePort>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e8       	ldi	r26, 0x80	; 128
    1d92:	bf e3       	ldi	r27, 0x3F	; 63
    1d94:	89 8f       	std	Y+25, r24	; 0x19
    1d96:	9a 8f       	std	Y+26, r25	; 0x1a
    1d98:	ab 8f       	std	Y+27, r26	; 0x1b
    1d9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	4a ef       	ldi	r20, 0xFA	; 250
    1daa:	54 e4       	ldi	r21, 0x44	; 68
    1dac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8d 8b       	std	Y+21, r24	; 0x15
    1db6:	9e 8b       	std	Y+22, r25	; 0x16
    1db8:	af 8b       	std	Y+23, r26	; 0x17
    1dba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	2c f4       	brge	.+10     	; 0x1dde <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9c 8b       	std	Y+20, r25	; 0x14
    1dda:	8b 8b       	std	Y+19, r24	; 0x13
    1ddc:	3f c0       	rjmp	.+126    	; 0x1e5c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1dde:	6d 89       	ldd	r22, Y+21	; 0x15
    1de0:	7e 89       	ldd	r23, Y+22	; 0x16
    1de2:	8f 89       	ldd	r24, Y+23	; 0x17
    1de4:	98 8d       	ldd	r25, Y+24	; 0x18
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	3f ef       	ldi	r19, 0xFF	; 255
    1dea:	4f e7       	ldi	r20, 0x7F	; 127
    1dec:	57 e4       	ldi	r21, 0x47	; 71
    1dee:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1df2:	18 16       	cp	r1, r24
    1df4:	4c f5       	brge	.+82     	; 0x1e48 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df6:	69 8d       	ldd	r22, Y+25	; 0x19
    1df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9c 8b       	std	Y+20, r25	; 0x14
    1e1c:	8b 8b       	std	Y+19, r24	; 0x13
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <LCD_displayCharacter+0x2ac>
    1e20:	88 ec       	ldi	r24, 0xC8	; 200
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9a 8b       	std	Y+18, r25	; 0x12
    1e26:	89 8b       	std	Y+17, r24	; 0x11
    1e28:	89 89       	ldd	r24, Y+17	; 0x11
    1e2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_displayCharacter+0x29a>
    1e30:	9a 8b       	std	Y+18, r25	; 0x12
    1e32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	9c 8b       	std	Y+20, r25	; 0x14
    1e3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e40:	9c 89       	ldd	r25, Y+20	; 0x14
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	69 f7       	brne	.-38     	; 0x1e20 <LCD_displayCharacter+0x28e>
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e48:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	9c 8b       	std	Y+20, r25	; 0x14
    1e5a:	8b 8b       	std	Y+19, r24	; 0x13
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	98 8b       	std	Y+16, r25	; 0x10
    1e62:	8f 87       	std	Y+15, r24	; 0x0f
    1e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e66:	98 89       	ldd	r25, Y+16	; 0x10
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_displayCharacter+0x2d6>
    1e6c:	98 8b       	std	Y+16, r25	; 0x10
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e8       	ldi	r26, 0x80	; 128
    1e80:	bf e3       	ldi	r27, 0x3F	; 63
    1e82:	8b 87       	std	Y+11, r24	; 0x0b
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	ad 87       	std	Y+13, r26	; 0x0d
    1e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a ef       	ldi	r20, 0xFA	; 250
    1e98:	54 e4       	ldi	r21, 0x44	; 68
    1e9a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	a9 87       	std	Y+9, r26	; 0x09
    1ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <LCD_displayCharacter+0x39a>
    1f0e:	88 ec       	ldi	r24, 0xC8	; 200
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_displayCharacter+0x388>
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <LCD_displayCharacter+0x37c>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_displayCharacter+0x3c4>
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f5e:	e9 96       	adiw	r28, 0x39	; 57
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <LCD_displayString+0x6>
    1f76:	0f 92       	push	r0
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9b 83       	std	Y+3, r25	; 0x03
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f80:	19 82       	std	Y+1, r1	; 0x01
    1f82:	0e c0       	rjmp	.+28     	; 0x1fa0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	fc 01       	movw	r30, r24
    1f90:	e2 0f       	add	r30, r18
    1f92:	f3 1f       	adc	r31, r19
    1f94:	80 81       	ld	r24, Z
    1f96:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
		i++;
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	8f 5f       	subi	r24, 0xFF	; 255
    1f9e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1faa:	fc 01       	movw	r30, r24
    1fac:	e2 0f       	add	r30, r18
    1fae:	f3 1f       	adc	r31, r19
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 23       	and	r24, r24
    1fb4:	39 f7       	brne	.-50     	; 0x1f84 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <LCD_moveCursor+0x6>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <LCD_moveCursor+0x8>
    1fca:	0f 92       	push	r0
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	8a 83       	std	Y+2, r24	; 0x02
    1fd2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	3d 83       	std	Y+5, r19	; 0x05
    1fdc:	2c 83       	std	Y+4, r18	; 0x04
    1fde:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	c1 f0       	breq	.+48     	; 0x2018 <LCD_moveCursor+0x56>
    1fe8:	2c 81       	ldd	r18, Y+4	; 0x04
    1fea:	3d 81       	ldd	r19, Y+5	; 0x05
    1fec:	22 30       	cpi	r18, 0x02	; 2
    1fee:	31 05       	cpc	r19, r1
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <LCD_moveCursor+0x3a>
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	61 f0       	breq	.+24     	; 0x2012 <LCD_moveCursor+0x50>
    1ffa:	19 c0       	rjmp	.+50     	; 0x202e <LCD_moveCursor+0x6c>
    1ffc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    2000:	22 30       	cpi	r18, 0x02	; 2
    2002:	31 05       	cpc	r19, r1
    2004:	69 f0       	breq	.+26     	; 0x2020 <LCD_moveCursor+0x5e>
    2006:	8c 81       	ldd	r24, Y+4	; 0x04
    2008:	9d 81       	ldd	r25, Y+5	; 0x05
    200a:	83 30       	cpi	r24, 0x03	; 3
    200c:	91 05       	cpc	r25, r1
    200e:	61 f0       	breq	.+24     	; 0x2028 <LCD_moveCursor+0x66>
    2010:	0e c0       	rjmp	.+28     	; 0x202e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	0b c0       	rjmp	.+22     	; 0x202e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	80 5c       	subi	r24, 0xC0	; 192
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	07 c0       	rjmp	.+14     	; 0x202e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	80 5f       	subi	r24, 0xF0	; 240
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	03 c0       	rjmp	.+6      	; 0x202e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	80 5b       	subi	r24, 0xB0	; 176
    202c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	80 68       	ori	r24, 0x80	; 128
    2032:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>
}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <LCD_displayStringRowColumn+0x6>
    204c:	00 d0       	rcall	.+0      	; 0x204e <LCD_displayStringRowColumn+0x8>
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	6a 83       	std	Y+2, r22	; 0x02
    2056:	5c 83       	std	Y+4, r21	; 0x04
    2058:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	6a 81       	ldd	r22, Y+2	; 0x02
    205e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LCD_displayString>
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	62 97       	sbiw	r28, 0x12	; 18
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	9a 8b       	std	Y+18, r25	; 0x12
    208e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2090:	89 89       	ldd	r24, Y+17	; 0x11
    2092:	9a 89       	ldd	r25, Y+18	; 0x12
    2094:	9e 01       	movw	r18, r28
    2096:	2f 5f       	subi	r18, 0xFF	; 255
    2098:	3f 4f       	sbci	r19, 0xFF	; 255
    209a:	b9 01       	movw	r22, r18
    209c:	4a e0       	ldi	r20, 0x0A	; 10
    209e:	50 e0       	ldi	r21, 0x00	; 0
    20a0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <itoa>
   LCD_displayString(buff); /* Display the string */
    20a4:	ce 01       	movw	r24, r28
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LCD_displayString>
}
    20ac:	62 96       	adiw	r28, 0x12	; 18
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <LCD_floatToString>:

/*
 * Description :
 * Converts a floating-point/double number to a string.
 */
void LCD_floatToString(float32 data) {
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	64 97       	sbiw	r28, 0x14	; 20
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	69 8b       	std	Y+17, r22	; 0x11
    20d8:	7a 8b       	std	Y+18, r23	; 0x12
    20da:	8b 8b       	std	Y+19, r24	; 0x13
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16]; /* String to hold the ascii result */
	dtostrf(data, 6, 1, buff); /* Use dtostrf C function to convert the data to its corresponding ASCII value, 10 for float decimal */
    20de:	89 89       	ldd	r24, Y+17	; 0x11
    20e0:	9a 89       	ldd	r25, Y+18	; 0x12
    20e2:	ab 89       	ldd	r26, Y+19	; 0x13
    20e4:	bc 89       	ldd	r27, Y+20	; 0x14
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	46 e0       	ldi	r20, 0x06	; 6
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	fe 01       	movw	r30, r28
    20f0:	31 96       	adiw	r30, 0x01	; 1
    20f2:	8f 01       	movw	r16, r30
    20f4:	0e 94 ef 1c 	call	0x39de	; 0x39de <dtostrf>
	LCD_displayString(buff); /* Display the string */
    20f8:	ce 01       	movw	r24, r28
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <LCD_displayString>
}
    2100:	64 96       	adiw	r28, 0x14	; 20
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_sendCommand>
}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	60 97       	sbiw	r28, 0x10	; 16
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	62 e0       	ldi	r22, 0x02	; 2
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    215c:	82 e0       	ldi	r24, 0x02	; 2
    215e:	63 e0       	ldi	r22, 0x03	; 3
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	64 e0       	ldi	r22, 0x04	; 4
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	65 e0       	ldi	r22, 0x05	; 5
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	66 e0       	ldi	r22, 0x06	; 6
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	67 e0       	ldi	r22, 0x07	; 7
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    218e:	1f 86       	std	Y+15, r1	; 0x0f
    2190:	ab c0       	rjmp	.+342    	; 0x22e8 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	6f 85       	ldd	r22, Y+15	; 0x0f
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	6f 85       	ldd	r22, Y+15	; 0x0f
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    21a6:	18 8a       	std	Y+16, r1	; 0x10
    21a8:	22 c0       	rjmp	.+68     	; 0x21ee <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    21aa:	88 89       	ldd	r24, Y+16	; 0x10
    21ac:	98 2f       	mov	r25, r24
    21ae:	9c 5f       	subi	r25, 0xFC	; 252
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	69 2f       	mov	r22, r25
    21b4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <GPIO_readPin>
    21b8:	88 23       	and	r24, r24
    21ba:	b1 f4       	brne	.+44     	; 0x21e8 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    21bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21be:	88 2f       	mov	r24, r24
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	98 2f       	mov	r25, r24
    21cc:	88 89       	ldd	r24, Y+16	; 0x10
    21ce:	89 0f       	add	r24, r25
    21d0:	8f 5f       	subi	r24, 0xFF	; 255
    21d2:	0e 94 79 11 	call	0x22f2	; 0x22f2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    21d6:	60 96       	adiw	r28, 0x10	; 16
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    21e8:	88 89       	ldd	r24, Y+16	; 0x10
    21ea:	8f 5f       	subi	r24, 0xFF	; 255
    21ec:	88 8b       	std	Y+16, r24	; 0x10
    21ee:	88 89       	ldd	r24, Y+16	; 0x10
    21f0:	84 30       	cpi	r24, 0x04	; 4
    21f2:	d8 f2       	brcs	.-74     	; 0x21aa <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	0e 94 00 08 	call	0x1000	; 0x1000 <GPIO_setupPinDirection>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 ea       	ldi	r26, 0xA0	; 160
    2204:	b0 e4       	ldi	r27, 0x40	; 64
    2206:	8b 87       	std	Y+11, r24	; 0x0b
    2208:	9c 87       	std	Y+12, r25	; 0x0c
    220a:	ad 87       	std	Y+13, r26	; 0x0d
    220c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2210:	7c 85       	ldd	r23, Y+12	; 0x0c
    2212:	8d 85       	ldd	r24, Y+13	; 0x0d
    2214:	9e 85       	ldd	r25, Y+14	; 0x0e
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a ef       	ldi	r20, 0xFA	; 250
    221c:	54 e4       	ldi	r21, 0x44	; 68
    221e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8f 83       	std	Y+7, r24	; 0x07
    2228:	98 87       	std	Y+8, r25	; 0x08
    222a:	a9 87       	std	Y+9, r26	; 0x09
    222c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	6b 85       	ldd	r22, Y+11	; 0x0b
    226a:	7c 85       	ldd	r23, Y+12	; 0x0c
    226c:	8d 85       	ldd	r24, Y+13	; 0x0d
    226e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <KEYPAD_getPressedKey+0x186>
    2292:	88 ec       	ldi	r24, 0xC8	; 200
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	8b 83       	std	Y+3, r24	; 0x03
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <KEYPAD_getPressedKey+0x174>
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <KEYPAD_getPressedKey+0x168>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <KEYPAD_getPressedKey+0x1b0>
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    22e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e4:	8f 5f       	subi	r24, 0xFF	; 255
    22e6:	8f 87       	std	Y+15, r24	; 0x0f
    22e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ea:	84 30       	cpi	r24, 0x04	; 4
    22ec:	08 f4       	brcc	.+2      	; 0x22f0 <KEYPAD_getPressedKey+0x1c6>
    22ee:	51 cf       	rjmp	.-350    	; 0x2192 <KEYPAD_getPressedKey+0x68>
    22f0:	4e cf       	rjmp	.-356    	; 0x218e <KEYPAD_getPressedKey+0x64>

000022f2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0x8>
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2300:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	3c 83       	std	Y+4, r19	; 0x04
    230a:	2b 83       	std	Y+3, r18	; 0x03
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	88 30       	cpi	r24, 0x08	; 8
    2312:	91 05       	cpc	r25, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2316:	70 c0       	rjmp	.+224    	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2318:	2b 81       	ldd	r18, Y+3	; 0x03
    231a:	3c 81       	ldd	r19, Y+4	; 0x04
    231c:	29 30       	cpi	r18, 0x09	; 9
    231e:	31 05       	cpc	r19, r1
    2320:	5c f5       	brge	.+86     	; 0x2378 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	84 30       	cpi	r24, 0x04	; 4
    2328:	91 05       	cpc	r25, r1
    232a:	09 f4       	brne	.+2      	; 0x232e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    232c:	59 c0       	rjmp	.+178    	; 0x23e0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    232e:	2b 81       	ldd	r18, Y+3	; 0x03
    2330:	3c 81       	ldd	r19, Y+4	; 0x04
    2332:	25 30       	cpi	r18, 0x05	; 5
    2334:	31 05       	cpc	r19, r1
    2336:	9c f4       	brge	.+38     	; 0x235e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	82 30       	cpi	r24, 0x02	; 2
    233e:	91 05       	cpc	r25, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2342:	48 c0       	rjmp	.+144    	; 0x23d4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2344:	2b 81       	ldd	r18, Y+3	; 0x03
    2346:	3c 81       	ldd	r19, Y+4	; 0x04
    2348:	23 30       	cpi	r18, 0x03	; 3
    234a:	31 05       	cpc	r19, r1
    234c:	0c f0       	brlt	.+2      	; 0x2350 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    234e:	45 c0       	rjmp	.+138    	; 0x23da <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	91 05       	cpc	r25, r1
    2358:	09 f4       	brne	.+2      	; 0x235c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    235a:	39 c0       	rjmp	.+114    	; 0x23ce <KEYPAD_4x4_adjustKeyNumber+0xdc>
    235c:	67 c0       	rjmp	.+206    	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    235e:	2b 81       	ldd	r18, Y+3	; 0x03
    2360:	3c 81       	ldd	r19, Y+4	; 0x04
    2362:	26 30       	cpi	r18, 0x06	; 6
    2364:	31 05       	cpc	r19, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2368:	41 c0       	rjmp	.+130    	; 0x23ec <KEYPAD_4x4_adjustKeyNumber+0xfa>
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	87 30       	cpi	r24, 0x07	; 7
    2370:	91 05       	cpc	r25, r1
    2372:	0c f0       	brlt	.+2      	; 0x2376 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2374:	3e c0       	rjmp	.+124    	; 0x23f2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2376:	37 c0       	rjmp	.+110    	; 0x23e6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2378:	2b 81       	ldd	r18, Y+3	; 0x03
    237a:	3c 81       	ldd	r19, Y+4	; 0x04
    237c:	2c 30       	cpi	r18, 0x0C	; 12
    237e:	31 05       	cpc	r19, r1
    2380:	09 f4       	brne	.+2      	; 0x2384 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2382:	46 c0       	rjmp	.+140    	; 0x2410 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	8d 30       	cpi	r24, 0x0D	; 13
    238a:	91 05       	cpc	r25, r1
    238c:	5c f4       	brge	.+22     	; 0x23a4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    238e:	2b 81       	ldd	r18, Y+3	; 0x03
    2390:	3c 81       	ldd	r19, Y+4	; 0x04
    2392:	2a 30       	cpi	r18, 0x0A	; 10
    2394:	31 05       	cpc	r19, r1
    2396:	b1 f1       	breq	.+108    	; 0x2404 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	8b 30       	cpi	r24, 0x0B	; 11
    239e:	91 05       	cpc	r25, r1
    23a0:	a4 f5       	brge	.+104    	; 0x240a <KEYPAD_4x4_adjustKeyNumber+0x118>
    23a2:	2d c0       	rjmp	.+90     	; 0x23fe <KEYPAD_4x4_adjustKeyNumber+0x10c>
    23a4:	2b 81       	ldd	r18, Y+3	; 0x03
    23a6:	3c 81       	ldd	r19, Y+4	; 0x04
    23a8:	2e 30       	cpi	r18, 0x0E	; 14
    23aa:	31 05       	cpc	r19, r1
    23ac:	b9 f1       	breq	.+110    	; 0x241c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	8e 30       	cpi	r24, 0x0E	; 14
    23b4:	91 05       	cpc	r25, r1
    23b6:	7c f1       	brlt	.+94     	; 0x2416 <KEYPAD_4x4_adjustKeyNumber+0x124>
    23b8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ba:	3c 81       	ldd	r19, Y+4	; 0x04
    23bc:	2f 30       	cpi	r18, 0x0F	; 15
    23be:	31 05       	cpc	r19, r1
    23c0:	79 f1       	breq	.+94     	; 0x2420 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	80 31       	cpi	r24, 0x10	; 16
    23c8:	91 05       	cpc	r25, r1
    23ca:	69 f1       	breq	.+90     	; 0x2426 <KEYPAD_4x4_adjustKeyNumber+0x134>
    23cc:	2f c0       	rjmp	.+94     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    23ce:	87 e0       	ldi	r24, 0x07	; 7
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	2e c0       	rjmp	.+92     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    23d4:	88 e0       	ldi	r24, 0x08	; 8
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	2b c0       	rjmp	.+86     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    23da:	89 e0       	ldi	r24, 0x09	; 9
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	28 c0       	rjmp	.+80     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    23e0:	85 e2       	ldi	r24, 0x25	; 37
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	25 c0       	rjmp	.+74     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    23e6:	84 e0       	ldi	r24, 0x04	; 4
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	22 c0       	rjmp	.+68     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    23ec:	85 e0       	ldi	r24, 0x05	; 5
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	1f c0       	rjmp	.+62     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    23f2:	86 e0       	ldi	r24, 0x06	; 6
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	1c c0       	rjmp	.+56     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    23f8:	8a e2       	ldi	r24, 0x2A	; 42
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	19 c0       	rjmp	.+50     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	16 c0       	rjmp	.+44     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2404:	82 e0       	ldi	r24, 0x02	; 2
    2406:	89 83       	std	Y+1, r24	; 0x01
    2408:	13 c0       	rjmp	.+38     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    240a:	83 e0       	ldi	r24, 0x03	; 3
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	10 c0       	rjmp	.+32     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2410:	8d e2       	ldi	r24, 0x2D	; 45
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	0d c0       	rjmp	.+26     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2416:	8d e0       	ldi	r24, 0x0D	; 13
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	0a c0       	rjmp	.+20     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    241c:	19 82       	std	Y+1, r1	; 0x01
    241e:	08 c0       	rjmp	.+16     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2420:	8d e3       	ldi	r24, 0x3D	; 61
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2426:	8b e2       	ldi	r24, 0x2B	; 43
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2430:	89 81       	ldd	r24, Y+1	; 0x01
}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <main>:
#include <avr/interrupt.h>
#include<util/delay.h>



int main(void) {
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	cd 55       	subi	r28, 0x5D	; 93
    244e:	d0 40       	sbci	r29, 0x00	; 0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
	/*enable global interrupt*/
	sei();
    245a:	78 94       	sei
		* Date Length: 8-Bits Data
		* Parity Type: Even Parity
		* Stop Bits: 1-Stop Bit
	  	* baud rate is 9600
	 */
	UART_ConfigType UART_config ={_8BIT,EVEN, ONE, 9600};
    245c:	ce 01       	movw	r24, r28
    245e:	88 5b       	subi	r24, 0xB8	; 184
    2460:	9f 4f       	sbci	r25, 0xFF	; 255
    2462:	6b 96       	adiw	r28, 0x1b	; 27
    2464:	9f af       	std	Y+63, r25	; 0x3f
    2466:	8e af       	std	Y+62, r24	; 0x3e
    2468:	6b 97       	sbiw	r28, 0x1b	; 27
    246a:	27 e0       	ldi	r18, 0x07	; 7
    246c:	31 e0       	ldi	r19, 0x01	; 1
    246e:	6d 96       	adiw	r28, 0x1d	; 29
    2470:	3f af       	std	Y+63, r19	; 0x3f
    2472:	2e af       	std	Y+62, r18	; 0x3e
    2474:	6d 97       	sbiw	r28, 0x1d	; 29
    2476:	35 e0       	ldi	r19, 0x05	; 5
    2478:	6e 96       	adiw	r28, 0x1e	; 30
    247a:	3f af       	std	Y+63, r19	; 0x3f
    247c:	6e 97       	sbiw	r28, 0x1e	; 30
    247e:	6d 96       	adiw	r28, 0x1d	; 29
    2480:	ee ad       	ldd	r30, Y+62	; 0x3e
    2482:	ff ad       	ldd	r31, Y+63	; 0x3f
    2484:	6d 97       	sbiw	r28, 0x1d	; 29
    2486:	00 80       	ld	r0, Z
    2488:	6d 96       	adiw	r28, 0x1d	; 29
    248a:	2e ad       	ldd	r18, Y+62	; 0x3e
    248c:	3f ad       	ldd	r19, Y+63	; 0x3f
    248e:	6d 97       	sbiw	r28, 0x1d	; 29
    2490:	2f 5f       	subi	r18, 0xFF	; 255
    2492:	3f 4f       	sbci	r19, 0xFF	; 255
    2494:	6d 96       	adiw	r28, 0x1d	; 29
    2496:	3f af       	std	Y+63, r19	; 0x3f
    2498:	2e af       	std	Y+62, r18	; 0x3e
    249a:	6d 97       	sbiw	r28, 0x1d	; 29
    249c:	6b 96       	adiw	r28, 0x1b	; 27
    249e:	ee ad       	ldd	r30, Y+62	; 0x3e
    24a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    24a2:	6b 97       	sbiw	r28, 0x1b	; 27
    24a4:	00 82       	st	Z, r0
    24a6:	6b 96       	adiw	r28, 0x1b	; 27
    24a8:	2e ad       	ldd	r18, Y+62	; 0x3e
    24aa:	3f ad       	ldd	r19, Y+63	; 0x3f
    24ac:	6b 97       	sbiw	r28, 0x1b	; 27
    24ae:	2f 5f       	subi	r18, 0xFF	; 255
    24b0:	3f 4f       	sbci	r19, 0xFF	; 255
    24b2:	6b 96       	adiw	r28, 0x1b	; 27
    24b4:	3f af       	std	Y+63, r19	; 0x3f
    24b6:	2e af       	std	Y+62, r18	; 0x3e
    24b8:	6b 97       	sbiw	r28, 0x1b	; 27
    24ba:	6e 96       	adiw	r28, 0x1e	; 30
    24bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    24be:	6e 97       	sbiw	r28, 0x1e	; 30
    24c0:	31 50       	subi	r19, 0x01	; 1
    24c2:	6e 96       	adiw	r28, 0x1e	; 30
    24c4:	3f af       	std	Y+63, r19	; 0x3f
    24c6:	6e 97       	sbiw	r28, 0x1e	; 30
    24c8:	6e 96       	adiw	r28, 0x1e	; 30
    24ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    24cc:	6e 97       	sbiw	r28, 0x1e	; 30
    24ce:	88 23       	and	r24, r24
    24d0:	b1 f6       	brne	.-84     	; 0x247e <main+0x3e>
	UART_init(&UART_config);
    24d2:	ce 01       	movw	r24, r28
    24d4:	88 5b       	subi	r24, 0xB8	; 184
    24d6:	9f 4f       	sbci	r25, 0xFF	; 255
    24d8:	0e 94 04 07 	call	0xe08	; 0xe08 <UART_init>
	LCD_init();
    24dc:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_init>

	uint8 userPass1[PASS_LENGTH];
	uint8 userPass2[PASS_LENGTH];
	uint8 pass_flag;
	while (1) {
		getUserPass(userPass1);
    24e0:	ce 01       	movw	r24, r28
    24e2:	83 5b       	subi	r24, 0xB3	; 179
    24e4:	9f 4f       	sbci	r25, 0xFF	; 255
    24e6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <getUserPass>
    24ea:	fe 01       	movw	r30, r28
    24ec:	ed 5b       	subi	r30, 0xBD	; 189
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	a6 e9       	ldi	r26, 0x96	; 150
    24f6:	b3 e4       	ldi	r27, 0x43	; 67
    24f8:	80 83       	st	Z, r24
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	a2 83       	std	Z+2, r26	; 0x02
    24fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2500:	8e 01       	movw	r16, r28
    2502:	01 5c       	subi	r16, 0xC1	; 193
    2504:	1f 4f       	sbci	r17, 0xFF	; 255
    2506:	fe 01       	movw	r30, r28
    2508:	ed 5b       	subi	r30, 0xBD	; 189
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	4a ef       	ldi	r20, 0xFA	; 250
    251a:	54 e4       	ldi	r21, 0x44	; 68
    251c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	f8 01       	movw	r30, r16
    2526:	80 83       	st	Z, r24
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	a2 83       	std	Z+2, r26	; 0x02
    252c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    252e:	fe 01       	movw	r30, r28
    2530:	ff 96       	adiw	r30, 0x3f	; 63
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2546:	88 23       	and	r24, r24
    2548:	2c f4       	brge	.+10     	; 0x2554 <main+0x114>
		__ticks = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9e af       	std	Y+62, r25	; 0x3e
    2550:	8d af       	std	Y+61, r24	; 0x3d
    2552:	46 c0       	rjmp	.+140    	; 0x25e0 <main+0x1a0>
	else if (__tmp > 65535)
    2554:	fe 01       	movw	r30, r28
    2556:	ff 96       	adiw	r30, 0x3f	; 63
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	57 e4       	ldi	r21, 0x47	; 71
    2568:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	64 f5       	brge	.+88     	; 0x25c8 <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	fe 01       	movw	r30, r28
    2572:	ed 5b       	subi	r30, 0xBD	; 189
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e af       	std	Y+62, r25	; 0x3e
    259c:	8d af       	std	Y+61, r24	; 0x3d
    259e:	0f c0       	rjmp	.+30     	; 0x25be <main+0x17e>
    25a0:	88 ec       	ldi	r24, 0xC8	; 200
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c af       	std	Y+60, r25	; 0x3c
    25a6:	8b af       	std	Y+59, r24	; 0x3b
    25a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    25aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <main+0x16c>
    25b0:	9c af       	std	Y+60, r25	; 0x3c
    25b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9e af       	std	Y+62, r25	; 0x3e
    25bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <main+0x160>
    25c6:	16 c0       	rjmp	.+44     	; 0x25f4 <main+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	fe 01       	movw	r30, r28
    25ca:	ff 96       	adiw	r30, 0x3f	; 63
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9e af       	std	Y+62, r25	; 0x3e
    25de:	8d af       	std	Y+61, r24	; 0x3d
    25e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25e4:	9a af       	std	Y+58, r25	; 0x3a
    25e6:	89 af       	std	Y+57, r24	; 0x39
    25e8:	89 ad       	ldd	r24, Y+57	; 0x39
    25ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <main+0x1ac>
    25f0:	9a af       	std	Y+58, r25	; 0x3a
    25f2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(300);
		confirmPass(userPass2);
    25f4:	ce 01       	movw	r24, r28
    25f6:	8e 5a       	subi	r24, 0xAE	; 174
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	0e 94 32 16 	call	0x2c64	; 0x2c64 <confirmPass>
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	a6 e9       	ldi	r26, 0x96	; 150
    2604:	b3 e4       	ldi	r27, 0x43	; 67
    2606:	8d ab       	std	Y+53, r24	; 0x35
    2608:	9e ab       	std	Y+54, r25	; 0x36
    260a:	af ab       	std	Y+55, r26	; 0x37
    260c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260e:	6d a9       	ldd	r22, Y+53	; 0x35
    2610:	7e a9       	ldd	r23, Y+54	; 0x36
    2612:	8f a9       	ldd	r24, Y+55	; 0x37
    2614:	98 ad       	ldd	r25, Y+56	; 0x38
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4a ef       	ldi	r20, 0xFA	; 250
    261c:	54 e4       	ldi	r21, 0x44	; 68
    261e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	89 ab       	std	Y+49, r24	; 0x31
    2628:	9a ab       	std	Y+50, r25	; 0x32
    262a:	ab ab       	std	Y+51, r26	; 0x33
    262c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    262e:	69 a9       	ldd	r22, Y+49	; 0x31
    2630:	7a a9       	ldd	r23, Y+50	; 0x32
    2632:	8b a9       	ldd	r24, Y+51	; 0x33
    2634:	9c a9       	ldd	r25, Y+52	; 0x34
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	2c f4       	brge	.+10     	; 0x2650 <main+0x210>
		__ticks = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	98 ab       	std	Y+48, r25	; 0x30
    264c:	8f a7       	std	Y+47, r24	; 0x2f
    264e:	3f c0       	rjmp	.+126    	; 0x26ce <main+0x28e>
	else if (__tmp > 65535)
    2650:	69 a9       	ldd	r22, Y+49	; 0x31
    2652:	7a a9       	ldd	r23, Y+50	; 0x32
    2654:	8b a9       	ldd	r24, Y+51	; 0x33
    2656:	9c a9       	ldd	r25, Y+52	; 0x34
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	57 e4       	ldi	r21, 0x47	; 71
    2660:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	4c f5       	brge	.+82     	; 0x26ba <main+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2668:	6d a9       	ldd	r22, Y+53	; 0x35
    266a:	7e a9       	ldd	r23, Y+54	; 0x36
    266c:	8f a9       	ldd	r24, Y+55	; 0x37
    266e:	98 ad       	ldd	r25, Y+56	; 0x38
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e2       	ldi	r20, 0x20	; 32
    2676:	51 e4       	ldi	r21, 0x41	; 65
    2678:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	98 ab       	std	Y+48, r25	; 0x30
    268e:	8f a7       	std	Y+47, r24	; 0x2f
    2690:	0f c0       	rjmp	.+30     	; 0x26b0 <main+0x270>
    2692:	88 ec       	ldi	r24, 0xC8	; 200
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	9e a7       	std	Y+46, r25	; 0x2e
    2698:	8d a7       	std	Y+45, r24	; 0x2d
    269a:	8d a5       	ldd	r24, Y+45	; 0x2d
    269c:	9e a5       	ldd	r25, Y+46	; 0x2e
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <main+0x25e>
    26a2:	9e a7       	std	Y+46, r25	; 0x2e
    26a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a8:	98 a9       	ldd	r25, Y+48	; 0x30
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	98 ab       	std	Y+48, r25	; 0x30
    26ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b2:	98 a9       	ldd	r25, Y+48	; 0x30
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	69 f7       	brne	.-38     	; 0x2692 <main+0x252>
    26b8:	14 c0       	rjmp	.+40     	; 0x26e2 <main+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ba:	69 a9       	ldd	r22, Y+49	; 0x31
    26bc:	7a a9       	ldd	r23, Y+50	; 0x32
    26be:	8b a9       	ldd	r24, Y+51	; 0x33
    26c0:	9c a9       	ldd	r25, Y+52	; 0x34
    26c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	98 ab       	std	Y+48, r25	; 0x30
    26cc:	8f a7       	std	Y+47, r24	; 0x2f
    26ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d0:	98 a9       	ldd	r25, Y+48	; 0x30
    26d2:	9c a7       	std	Y+44, r25	; 0x2c
    26d4:	8b a7       	std	Y+43, r24	; 0x2b
    26d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    26d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <main+0x29a>
    26de:	9c a7       	std	Y+44, r25	; 0x2c
    26e0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);

		send2pass_UART(userPass1, userPass2);
    26e2:	ce 01       	movw	r24, r28
    26e4:	83 5b       	subi	r24, 0xB3	; 179
    26e6:	9f 4f       	sbci	r25, 0xFF	; 255
    26e8:	9e 01       	movw	r18, r28
    26ea:	2e 5a       	subi	r18, 0xAE	; 174
    26ec:	3f 4f       	sbci	r19, 0xFF	; 255
    26ee:	b9 01       	movw	r22, r18
    26f0:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <send2pass_UART>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a6 e9       	ldi	r26, 0x96	; 150
    26fa:	b3 e4       	ldi	r27, 0x43	; 67
    26fc:	8f a3       	std	Y+39, r24	; 0x27
    26fe:	98 a7       	std	Y+40, r25	; 0x28
    2700:	a9 a7       	std	Y+41, r26	; 0x29
    2702:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	6f a1       	ldd	r22, Y+39	; 0x27
    2706:	78 a5       	ldd	r23, Y+40	; 0x28
    2708:	89 a5       	ldd	r24, Y+41	; 0x29
    270a:	9a a5       	ldd	r25, Y+42	; 0x2a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a ef       	ldi	r20, 0xFA	; 250
    2712:	54 e4       	ldi	r21, 0x44	; 68
    2714:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8b a3       	std	Y+35, r24	; 0x23
    271e:	9c a3       	std	Y+36, r25	; 0x24
    2720:	ad a3       	std	Y+37, r26	; 0x25
    2722:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2724:	6b a1       	ldd	r22, Y+35	; 0x23
    2726:	7c a1       	ldd	r23, Y+36	; 0x24
    2728:	8d a1       	ldd	r24, Y+37	; 0x25
    272a:	9e a1       	ldd	r25, Y+38	; 0x26
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <main+0x306>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9a a3       	std	Y+34, r25	; 0x22
    2742:	89 a3       	std	Y+33, r24	; 0x21
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <main+0x384>
	else if (__tmp > 65535)
    2746:	6b a1       	ldd	r22, Y+35	; 0x23
    2748:	7c a1       	ldd	r23, Y+36	; 0x24
    274a:	8d a1       	ldd	r24, Y+37	; 0x25
    274c:	9e a1       	ldd	r25, Y+38	; 0x26
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <main+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	6f a1       	ldd	r22, Y+39	; 0x27
    2760:	78 a5       	ldd	r23, Y+40	; 0x28
    2762:	89 a5       	ldd	r24, Y+41	; 0x29
    2764:	9a a5       	ldd	r25, Y+42	; 0x2a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9a a3       	std	Y+34, r25	; 0x22
    2784:	89 a3       	std	Y+33, r24	; 0x21
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <main+0x366>
    2788:	88 ec       	ldi	r24, 0xC8	; 200
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	98 a3       	std	Y+32, r25	; 0x20
    278e:	8f 8f       	std	Y+31, r24	; 0x1f
    2790:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2792:	98 a1       	ldd	r25, Y+32	; 0x20
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <main+0x354>
    2798:	98 a3       	std	Y+32, r25	; 0x20
    279a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	89 a1       	ldd	r24, Y+33	; 0x21
    279e:	9a a1       	ldd	r25, Y+34	; 0x22
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9a a3       	std	Y+34, r25	; 0x22
    27a4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	89 a1       	ldd	r24, Y+33	; 0x21
    27a8:	9a a1       	ldd	r25, Y+34	; 0x22
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <main+0x348>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <main+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6b a1       	ldd	r22, Y+35	; 0x23
    27b2:	7c a1       	ldd	r23, Y+36	; 0x24
    27b4:	8d a1       	ldd	r24, Y+37	; 0x25
    27b6:	9e a1       	ldd	r25, Y+38	; 0x26
    27b8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9a a3       	std	Y+34, r25	; 0x22
    27c2:	89 a3       	std	Y+33, r24	; 0x21
    27c4:	89 a1       	ldd	r24, Y+33	; 0x21
    27c6:	9a a1       	ldd	r25, Y+34	; 0x22
    27c8:	9e 8f       	std	Y+30, r25	; 0x1e
    27ca:	8d 8f       	std	Y+29, r24	; 0x1d
    27cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <main+0x390>
    27d4:	9e 8f       	std	Y+30, r25	; 0x1e
    27d6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(300);
		UART_sendByte(CHECKING_PASSWORD);
    27d8:	84 e0       	ldi	r24, 0x04	; 4
    27da:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_sendByte>
		pass_flag = UART_recieveByte();
    27de:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_recieveByte>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e9 5b       	subi	r30, 0xB9	; 185
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 83       	st	Z, r24

		switch (pass_flag)
    27ea:	fe 01       	movw	r30, r28
    27ec:	e9 5b       	subi	r30, 0xB9	; 185
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	69 96       	adiw	r28, 0x19	; 25
    27f8:	3f af       	std	Y+63, r19	; 0x3f
    27fa:	2e af       	std	Y+62, r18	; 0x3e
    27fc:	69 97       	sbiw	r28, 0x19	; 25
    27fe:	69 96       	adiw	r28, 0x19	; 25
    2800:	8e ad       	ldd	r24, Y+62	; 0x3e
    2802:	9f ad       	ldd	r25, Y+63	; 0x3f
    2804:	69 97       	sbiw	r28, 0x19	; 25
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <main+0x3ce>
    280c:	89 c0       	rjmp	.+274    	; 0x2920 <main+0x4e0>
    280e:	69 96       	adiw	r28, 0x19	; 25
    2810:	ee ad       	ldd	r30, Y+62	; 0x3e
    2812:	ff ad       	ldd	r31, Y+63	; 0x3f
    2814:	69 97       	sbiw	r28, 0x19	; 25
    2816:	e2 30       	cpi	r30, 0x02	; 2
    2818:	f1 05       	cpc	r31, r1
    281a:	09 f0       	breq	.+2      	; 0x281e <main+0x3de>
    281c:	61 ce       	rjmp	.-830    	; 0x24e0 <main+0xa0>
		{
			case VALID_PASSWORD:
					LCD_clearScreen();
    281e:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Pass Matched!");
    2822:	20 e6       	ldi	r18, 0x60	; 96
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	a9 01       	movw	r20, r18
    282c:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	a6 e9       	ldi	r26, 0x96	; 150
    2836:	b3 e4       	ldi	r27, 0x43	; 67
    2838:	89 8f       	std	Y+25, r24	; 0x19
    283a:	9a 8f       	std	Y+26, r25	; 0x1a
    283c:	ab 8f       	std	Y+27, r26	; 0x1b
    283e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2840:	69 8d       	ldd	r22, Y+25	; 0x19
    2842:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2844:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2846:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	4a ef       	ldi	r20, 0xFA	; 250
    284e:	54 e4       	ldi	r21, 0x44	; 68
    2850:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8d 8b       	std	Y+21, r24	; 0x15
    285a:	9e 8b       	std	Y+22, r25	; 0x16
    285c:	af 8b       	std	Y+23, r26	; 0x17
    285e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2860:	6d 89       	ldd	r22, Y+21	; 0x15
    2862:	7e 89       	ldd	r23, Y+22	; 0x16
    2864:	8f 89       	ldd	r24, Y+23	; 0x17
    2866:	98 8d       	ldd	r25, Y+24	; 0x18
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e8       	ldi	r20, 0x80	; 128
    286e:	5f e3       	ldi	r21, 0x3F	; 63
    2870:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2874:	88 23       	and	r24, r24
    2876:	2c f4       	brge	.+10     	; 0x2882 <main+0x442>
		__ticks = 1;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	9c 8b       	std	Y+20, r25	; 0x14
    287e:	8b 8b       	std	Y+19, r24	; 0x13
    2880:	3f c0       	rjmp	.+126    	; 0x2900 <main+0x4c0>
	else if (__tmp > 65535)
    2882:	6d 89       	ldd	r22, Y+21	; 0x15
    2884:	7e 89       	ldd	r23, Y+22	; 0x16
    2886:	8f 89       	ldd	r24, Y+23	; 0x17
    2888:	98 8d       	ldd	r25, Y+24	; 0x18
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	3f ef       	ldi	r19, 0xFF	; 255
    288e:	4f e7       	ldi	r20, 0x7F	; 127
    2890:	57 e4       	ldi	r21, 0x47	; 71
    2892:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2896:	18 16       	cp	r1, r24
    2898:	4c f5       	brge	.+82     	; 0x28ec <main+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289a:	69 8d       	ldd	r22, Y+25	; 0x19
    289c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    289e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e2       	ldi	r20, 0x20	; 32
    28a8:	51 e4       	ldi	r21, 0x41	; 65
    28aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9c 8b       	std	Y+20, r25	; 0x14
    28c0:	8b 8b       	std	Y+19, r24	; 0x13
    28c2:	0f c0       	rjmp	.+30     	; 0x28e2 <main+0x4a2>
    28c4:	88 ec       	ldi	r24, 0xC8	; 200
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9a 8b       	std	Y+18, r25	; 0x12
    28ca:	89 8b       	std	Y+17, r24	; 0x11
    28cc:	89 89       	ldd	r24, Y+17	; 0x11
    28ce:	9a 89       	ldd	r25, Y+18	; 0x12
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <main+0x490>
    28d4:	9a 8b       	std	Y+18, r25	; 0x12
    28d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d8:	8b 89       	ldd	r24, Y+19	; 0x13
    28da:	9c 89       	ldd	r25, Y+20	; 0x14
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	9c 8b       	std	Y+20, r25	; 0x14
    28e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	69 f7       	brne	.-38     	; 0x28c4 <main+0x484>
    28ea:	14 c0       	rjmp	.+40     	; 0x2914 <main+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ec:	6d 89       	ldd	r22, Y+21	; 0x15
    28ee:	7e 89       	ldd	r23, Y+22	; 0x16
    28f0:	8f 89       	ldd	r24, Y+23	; 0x17
    28f2:	98 8d       	ldd	r25, Y+24	; 0x18
    28f4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9c 8b       	std	Y+20, r25	; 0x14
    28fe:	8b 8b       	std	Y+19, r24	; 0x13
    2900:	8b 89       	ldd	r24, Y+19	; 0x13
    2902:	9c 89       	ldd	r25, Y+20	; 0x14
    2904:	98 8b       	std	Y+16, r25	; 0x10
    2906:	8f 87       	std	Y+15, r24	; 0x0f
    2908:	8f 85       	ldd	r24, Y+15	; 0x0f
    290a:	98 89       	ldd	r25, Y+16	; 0x10
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <main+0x4cc>
    2910:	98 8b       	std	Y+16, r25	; 0x10
    2912:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(300);
					handleSystemMenu(userPass1);
    2914:	ce 01       	movw	r24, r28
    2916:	83 5b       	subi	r24, 0xB3	; 179
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	0e 94 34 1a 	call	0x3468	; 0x3468 <handleSystemMenu>
    291e:	e0 cd       	rjmp	.-1088   	; 0x24e0 <main+0xa0>
				break;
			case INVALID_PASSWORD:
					LCD_clearScreen();
    2920:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Pass Not Matched!");
    2924:	2e e6       	ldi	r18, 0x6E	; 110
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	a9 01       	movw	r20, r18
    292e:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	a6 e9       	ldi	r26, 0x96	; 150
    2938:	b3 e4       	ldi	r27, 0x43	; 67
    293a:	8b 87       	std	Y+11, r24	; 0x0b
    293c:	9c 87       	std	Y+12, r25	; 0x0c
    293e:	ad 87       	std	Y+13, r26	; 0x0d
    2940:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2942:	6b 85       	ldd	r22, Y+11	; 0x0b
    2944:	7c 85       	ldd	r23, Y+12	; 0x0c
    2946:	8d 85       	ldd	r24, Y+13	; 0x0d
    2948:	9e 85       	ldd	r25, Y+14	; 0x0e
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	4a ef       	ldi	r20, 0xFA	; 250
    2950:	54 e4       	ldi	r21, 0x44	; 68
    2952:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	8f 83       	std	Y+7, r24	; 0x07
    295c:	98 87       	std	Y+8, r25	; 0x08
    295e:	a9 87       	std	Y+9, r26	; 0x09
    2960:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2962:	6f 81       	ldd	r22, Y+7	; 0x07
    2964:	78 85       	ldd	r23, Y+8	; 0x08
    2966:	89 85       	ldd	r24, Y+9	; 0x09
    2968:	9a 85       	ldd	r25, Y+10	; 0x0a
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e8       	ldi	r20, 0x80	; 128
    2970:	5f e3       	ldi	r21, 0x3F	; 63
    2972:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2976:	88 23       	and	r24, r24
    2978:	2c f4       	brge	.+10     	; 0x2984 <main+0x544>
		__ticks = 1;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	9e 83       	std	Y+6, r25	; 0x06
    2980:	8d 83       	std	Y+5, r24	; 0x05
    2982:	3f c0       	rjmp	.+126    	; 0x2a02 <main+0x5c2>
	else if (__tmp > 65535)
    2984:	6f 81       	ldd	r22, Y+7	; 0x07
    2986:	78 85       	ldd	r23, Y+8	; 0x08
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	3f ef       	ldi	r19, 0xFF	; 255
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	57 e4       	ldi	r21, 0x47	; 71
    2994:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	4c f5       	brge	.+82     	; 0x29ee <main+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299c:	6b 85       	ldd	r22, Y+11	; 0x0b
    299e:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <main+0x5a4>
    29c6:	88 ec       	ldi	r24, 0xC8	; 200
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9c 83       	std	Y+4, r25	; 0x04
    29cc:	8b 83       	std	Y+3, r24	; 0x03
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <main+0x592>
    29d6:	9c 83       	std	Y+4, r25	; 0x04
    29d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	69 f7       	brne	.-38     	; 0x29c6 <main+0x586>
    29ec:	79 cd       	rjmp	.-1294   	; 0x24e0 <main+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <main+0x5ce>
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	64 cd       	rjmp	.-1336   	; 0x24e0 <main+0xa0>

00002a18 <getUserPass>:
/*
 * getUserPass function takes a userPass of 5 digits from the user and
 * saves it in an array.
 */
void getUserPass(uint8 *userPass)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	a0 97       	sbiw	r28, 0x20	; 32
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	98 a3       	std	Y+32, r25	; 0x20
    2a2e:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 counter;
	uint8 pressedkey;
	LCD_clearScreen();
    2a30:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Pass:");
    2a34:	20 e8       	ldi	r18, 0x80	; 128
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	a9 01       	movw	r20, r18
    2a3e:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_moveCursor>
	counter=0;
    2a4a:	1e 8e       	std	Y+30, r1	; 0x1e
    2a4c:	88 c0       	rjmp	.+272    	; 0x2b5e <getUserPass+0x146>

	while (counter < PASS_LENGTH)
	{
		pressedkey =KEYPAD_getPressedKey();
    2a4e:	0e 94 95 10 	call	0x212a	; 0x212a <KEYPAD_getPressedKey>
    2a52:	8d 8f       	std	Y+29, r24	; 0x1d

		if ((pressedkey>= 0) && (pressedkey<= 9))
    2a54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a56:	8a 30       	cpi	r24, 0x0A	; 10
    2a58:	80 f4       	brcc	.+32     	; 0x2a7a <getUserPass+0x62>
		{
			userPass[counter] = pressedkey;
    2a5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a62:	98 a1       	ldd	r25, Y+32	; 0x20
    2a64:	fc 01       	movw	r30, r24
    2a66:	e2 0f       	add	r30, r18
    2a68:	f3 1f       	adc	r31, r19
    2a6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a6c:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    2a6e:	8a e2       	ldi	r24, 0x2A	; 42
    2a70:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
			counter++;
    2a74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a76:	8f 5f       	subi	r24, 0xFF	; 255
    2a78:	8e 8f       	std	Y+30, r24	; 0x1e
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	aa ef       	ldi	r26, 0xFA	; 250
    2a80:	b3 e4       	ldi	r27, 0x43	; 67
    2a82:	89 8f       	std	Y+25, r24	; 0x19
    2a84:	9a 8f       	std	Y+26, r25	; 0x1a
    2a86:	ab 8f       	std	Y+27, r26	; 0x1b
    2a88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a ef       	ldi	r20, 0xFA	; 250
    2a98:	54 e4       	ldi	r21, 0x44	; 68
    2a9a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8d 8b       	std	Y+21, r24	; 0x15
    2aa4:	9e 8b       	std	Y+22, r25	; 0x16
    2aa6:	af 8b       	std	Y+23, r26	; 0x17
    2aa8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2aac:	7e 89       	ldd	r23, Y+22	; 0x16
    2aae:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	2c f4       	brge	.+10     	; 0x2acc <getUserPass+0xb4>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9c 8b       	std	Y+20, r25	; 0x14
    2ac8:	8b 8b       	std	Y+19, r24	; 0x13
    2aca:	3f c0       	rjmp	.+126    	; 0x2b4a <getUserPass+0x132>
	else if (__tmp > 65535)
    2acc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ace:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	4c f5       	brge	.+82     	; 0x2b36 <getUserPass+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <getUserPass+0x114>
    2b0e:	88 ec       	ldi	r24, 0xC8	; 200
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9a 8b       	std	Y+18, r25	; 0x12
    2b14:	89 8b       	std	Y+17, r24	; 0x11
    2b16:	89 89       	ldd	r24, Y+17	; 0x11
    2b18:	9a 89       	ldd	r25, Y+18	; 0x12
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <getUserPass+0x102>
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	8b 89       	ldd	r24, Y+19	; 0x13
    2b24:	9c 89       	ldd	r25, Y+20	; 0x14
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9c 8b       	std	Y+20, r25	; 0x14
    2b2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <getUserPass+0xf6>
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <getUserPass+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	6d 89       	ldd	r22, Y+21	; 0x15
    2b38:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9c 8b       	std	Y+20, r25	; 0x14
    2b48:	8b 8b       	std	Y+19, r24	; 0x13
    2b4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4e:	98 8b       	std	Y+16, r25	; 0x10
    2b50:	8f 87       	std	Y+15, r24	; 0x0f
    2b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b54:	98 89       	ldd	r25, Y+16	; 0x10
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <getUserPass+0x13e>
    2b5a:	98 8b       	std	Y+16, r25	; 0x10
    2b5c:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter Pass:");
	LCD_moveCursor(1,0);
	counter=0;

	while (counter < PASS_LENGTH)
    2b5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b60:	85 30       	cpi	r24, 0x05	; 5
    2b62:	08 f4       	brcc	.+2      	; 0x2b66 <getUserPass+0x14e>
    2b64:	74 cf       	rjmp	.-280    	; 0x2a4e <getUserPass+0x36>
		_delay_ms(500);
	}
	/*
	 * Wait till enter key pressed
	 */
	while (KEYPAD_getPressedKey()!='=');
    2b66:	0e 94 95 10 	call	0x212a	; 0x212a <KEYPAD_getPressedKey>
    2b6a:	8d 33       	cpi	r24, 0x3D	; 61
    2b6c:	e1 f7       	brne	.-8      	; 0x2b66 <getUserPass+0x14e>
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	aa ef       	ldi	r26, 0xFA	; 250
    2b74:	b3 e4       	ldi	r27, 0x43	; 67
    2b76:	8b 87       	std	Y+11, r24	; 0x0b
    2b78:	9c 87       	std	Y+12, r25	; 0x0c
    2b7a:	ad 87       	std	Y+13, r26	; 0x0d
    2b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	4a ef       	ldi	r20, 0xFA	; 250
    2b8c:	54 e4       	ldi	r21, 0x44	; 68
    2b8e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	8f 83       	std	Y+7, r24	; 0x07
    2b98:	98 87       	std	Y+8, r25	; 0x08
    2b9a:	a9 87       	std	Y+9, r26	; 0x09
    2b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba0:	78 85       	ldd	r23, Y+8	; 0x08
    2ba2:	89 85       	ldd	r24, Y+9	; 0x09
    2ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e8       	ldi	r20, 0x80	; 128
    2bac:	5f e3       	ldi	r21, 0x3F	; 63
    2bae:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2bb2:	88 23       	and	r24, r24
    2bb4:	2c f4       	brge	.+10     	; 0x2bc0 <getUserPass+0x1a8>
		__ticks = 1;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
    2bbe:	3f c0       	rjmp	.+126    	; 0x2c3e <getUserPass+0x226>
	else if (__tmp > 65535)
    2bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc2:	78 85       	ldd	r23, Y+8	; 0x08
    2bc4:	89 85       	ldd	r24, Y+9	; 0x09
    2bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	3f ef       	ldi	r19, 0xFF	; 255
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	57 e4       	ldi	r21, 0x47	; 71
    2bd0:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	4c f5       	brge	.+82     	; 0x2c2a <getUserPass+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e2       	ldi	r20, 0x20	; 32
    2be6:	51 e4       	ldi	r21, 0x41	; 65
    2be8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	bc 01       	movw	r22, r24
    2bf2:	cd 01       	movw	r24, r26
    2bf4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	9e 83       	std	Y+6, r25	; 0x06
    2bfe:	8d 83       	std	Y+5, r24	; 0x05
    2c00:	0f c0       	rjmp	.+30     	; 0x2c20 <getUserPass+0x208>
    2c02:	88 ec       	ldi	r24, 0xC8	; 200
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9c 83       	std	Y+4, r25	; 0x04
    2c08:	8b 83       	std	Y+3, r24	; 0x03
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <getUserPass+0x1f6>
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	9e 83       	std	Y+6, r25	; 0x06
    2c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	9e 81       	ldd	r25, Y+6	; 0x06
    2c24:	00 97       	sbiw	r24, 0x00	; 0
    2c26:	69 f7       	brne	.-38     	; 0x2c02 <getUserPass+0x1ea>
    2c28:	14 c0       	rjmp	.+40     	; 0x2c52 <getUserPass+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2c:	78 85       	ldd	r23, Y+8	; 0x08
    2c2e:	89 85       	ldd	r24, Y+9	; 0x09
    2c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c32:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c40:	9e 81       	ldd	r25, Y+6	; 0x06
    2c42:	9a 83       	std	Y+2, r25	; 0x02
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <getUserPass+0x232>
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2c52:	a0 96       	adiw	r28, 0x20	; 32
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <confirmPass>:

/*
 * confirmPass function re-enters the same userPass to confirm it.
 */
void confirmPass(uint8 *userPass) {
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	a0 97       	sbiw	r28, 0x20	; 32
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	98 a3       	std	Y+32, r25	; 0x20
    2c7a:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 counter;
	uint8 pressedkey;
	LCD_clearScreen();
    2c7c:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Re-enter Pass:");
    2c80:	2c e8       	ldi	r18, 0x8C	; 140
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	60 e0       	ldi	r22, 0x00	; 0
    2c88:	a9 01       	movw	r20, r18
    2c8a:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_moveCursor>
	counter = 0;
    2c96:	1e 8e       	std	Y+30, r1	; 0x1e
    2c98:	88 c0       	rjmp	.+272    	; 0x2daa <confirmPass+0x146>

	while (counter < PASS_LENGTH)
	{
		pressedkey = KEYPAD_getPressedKey();
    2c9a:	0e 94 95 10 	call	0x212a	; 0x212a <KEYPAD_getPressedKey>
    2c9e:	8d 8f       	std	Y+29, r24	; 0x1d
		if ((pressedkey >= 0) && (pressedkey <= 9))
    2ca0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ca2:	8a 30       	cpi	r24, 0x0A	; 10
    2ca4:	80 f4       	brcc	.+32     	; 0x2cc6 <confirmPass+0x62>
		{
			userPass[counter] = pressedkey;
    2ca6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cae:	98 a1       	ldd	r25, Y+32	; 0x20
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	e2 0f       	add	r30, r18
    2cb4:	f3 1f       	adc	r31, r19
    2cb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb8:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    2cba:	8a e2       	ldi	r24, 0x2A	; 42
    2cbc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_displayCharacter>
			counter++;
    2cc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	8e 8f       	std	Y+30, r24	; 0x1e
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	aa ef       	ldi	r26, 0xFA	; 250
    2ccc:	b3 e4       	ldi	r27, 0x43	; 67
    2cce:	89 8f       	std	Y+25, r24	; 0x19
    2cd0:	9a 8f       	std	Y+26, r25	; 0x1a
    2cd2:	ab 8f       	std	Y+27, r26	; 0x1b
    2cd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	4a ef       	ldi	r20, 0xFA	; 250
    2ce4:	54 e4       	ldi	r21, 0x44	; 68
    2ce6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	8d 8b       	std	Y+21, r24	; 0x15
    2cf0:	9e 8b       	std	Y+22, r25	; 0x16
    2cf2:	af 8b       	std	Y+23, r26	; 0x17
    2cf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e8       	ldi	r20, 0x80	; 128
    2d04:	5f e3       	ldi	r21, 0x3F	; 63
    2d06:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2d0a:	88 23       	and	r24, r24
    2d0c:	2c f4       	brge	.+10     	; 0x2d18 <confirmPass+0xb4>
		__ticks = 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9c 8b       	std	Y+20, r25	; 0x14
    2d14:	8b 8b       	std	Y+19, r24	; 0x13
    2d16:	3f c0       	rjmp	.+126    	; 0x2d96 <confirmPass+0x132>
	else if (__tmp > 65535)
    2d18:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	3f ef       	ldi	r19, 0xFF	; 255
    2d24:	4f e7       	ldi	r20, 0x7F	; 127
    2d26:	57 e4       	ldi	r21, 0x47	; 71
    2d28:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2d2c:	18 16       	cp	r1, r24
    2d2e:	4c f5       	brge	.+82     	; 0x2d82 <confirmPass+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d30:	69 8d       	ldd	r22, Y+25	; 0x19
    2d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	51 e4       	ldi	r21, 0x41	; 65
    2d40:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9c 8b       	std	Y+20, r25	; 0x14
    2d56:	8b 8b       	std	Y+19, r24	; 0x13
    2d58:	0f c0       	rjmp	.+30     	; 0x2d78 <confirmPass+0x114>
    2d5a:	88 ec       	ldi	r24, 0xC8	; 200
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	9a 8b       	std	Y+18, r25	; 0x12
    2d60:	89 8b       	std	Y+17, r24	; 0x11
    2d62:	89 89       	ldd	r24, Y+17	; 0x11
    2d64:	9a 89       	ldd	r25, Y+18	; 0x12
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <confirmPass+0x102>
    2d6a:	9a 8b       	std	Y+18, r25	; 0x12
    2d6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d70:	9c 89       	ldd	r25, Y+20	; 0x14
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	9c 8b       	std	Y+20, r25	; 0x14
    2d76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	69 f7       	brne	.-38     	; 0x2d5a <confirmPass+0xf6>
    2d80:	14 c0       	rjmp	.+40     	; 0x2daa <confirmPass+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d82:	6d 89       	ldd	r22, Y+21	; 0x15
    2d84:	7e 89       	ldd	r23, Y+22	; 0x16
    2d86:	8f 89       	ldd	r24, Y+23	; 0x17
    2d88:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	9c 8b       	std	Y+20, r25	; 0x14
    2d94:	8b 8b       	std	Y+19, r24	; 0x13
    2d96:	8b 89       	ldd	r24, Y+19	; 0x13
    2d98:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9a:	98 8b       	std	Y+16, r25	; 0x10
    2d9c:	8f 87       	std	Y+15, r24	; 0x0f
    2d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da0:	98 89       	ldd	r25, Y+16	; 0x10
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <confirmPass+0x13e>
    2da6:	98 8b       	std	Y+16, r25	; 0x10
    2da8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Re-enter Pass:");
	LCD_moveCursor(1, 0);
	counter = 0;

	while (counter < PASS_LENGTH)
    2daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dac:	85 30       	cpi	r24, 0x05	; 5
    2dae:	08 f4       	brcc	.+2      	; 0x2db2 <confirmPass+0x14e>
    2db0:	74 cf       	rjmp	.-280    	; 0x2c9a <confirmPass+0x36>
			LCD_displayCharacter('*');
			counter++;
		}
		_delay_ms(500);
	}
	while(KEYPAD_getPressedKey()!= '=');
    2db2:	0e 94 95 10 	call	0x212a	; 0x212a <KEYPAD_getPressedKey>
    2db6:	8d 33       	cpi	r24, 0x3D	; 61
    2db8:	e1 f7       	brne	.-8      	; 0x2db2 <confirmPass+0x14e>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	aa ef       	ldi	r26, 0xFA	; 250
    2dc0:	b3 e4       	ldi	r27, 0x43	; 67
    2dc2:	8b 87       	std	Y+11, r24	; 0x0b
    2dc4:	9c 87       	std	Y+12, r25	; 0x0c
    2dc6:	ad 87       	std	Y+13, r26	; 0x0d
    2dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4a ef       	ldi	r20, 0xFA	; 250
    2dd8:	54 e4       	ldi	r21, 0x44	; 68
    2dda:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	8f 83       	std	Y+7, r24	; 0x07
    2de4:	98 87       	std	Y+8, r25	; 0x08
    2de6:	a9 87       	std	Y+9, r26	; 0x09
    2de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dea:	6f 81       	ldd	r22, Y+7	; 0x07
    2dec:	78 85       	ldd	r23, Y+8	; 0x08
    2dee:	89 85       	ldd	r24, Y+9	; 0x09
    2df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e8       	ldi	r20, 0x80	; 128
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2dfe:	88 23       	and	r24, r24
    2e00:	2c f4       	brge	.+10     	; 0x2e0c <confirmPass+0x1a8>
		__ticks = 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9e 83       	std	Y+6, r25	; 0x06
    2e08:	8d 83       	std	Y+5, r24	; 0x05
    2e0a:	3f c0       	rjmp	.+126    	; 0x2e8a <confirmPass+0x226>
	else if (__tmp > 65535)
    2e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0e:	78 85       	ldd	r23, Y+8	; 0x08
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	3f ef       	ldi	r19, 0xFF	; 255
    2e18:	4f e7       	ldi	r20, 0x7F	; 127
    2e1a:	57 e4       	ldi	r21, 0x47	; 71
    2e1c:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	4c f5       	brge	.+82     	; 0x2e76 <confirmPass+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e2       	ldi	r20, 0x20	; 32
    2e32:	51 e4       	ldi	r21, 0x41	; 65
    2e34:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9e 83       	std	Y+6, r25	; 0x06
    2e4a:	8d 83       	std	Y+5, r24	; 0x05
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <confirmPass+0x208>
    2e4e:	88 ec       	ldi	r24, 0xC8	; 200
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	9c 83       	std	Y+4, r25	; 0x04
    2e54:	8b 83       	std	Y+3, r24	; 0x03
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <confirmPass+0x1f6>
    2e5e:	9c 83       	std	Y+4, r25	; 0x04
    2e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	69 f7       	brne	.-38     	; 0x2e4e <confirmPass+0x1ea>
    2e74:	14 c0       	rjmp	.+40     	; 0x2e9e <confirmPass+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e76:	6f 81       	ldd	r22, Y+7	; 0x07
    2e78:	78 85       	ldd	r23, Y+8	; 0x08
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
    2e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8e:	9a 83       	std	Y+2, r25	; 0x02
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	9a 81       	ldd	r25, Y+2	; 0x02
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <confirmPass+0x232>
    2e9a:	9a 83       	std	Y+2, r25	; 0x02
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2e9e:	a0 96       	adiw	r28, 0x20	; 32
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <send2pass_UART>:

/*
 * send2pass_UART function sends two passwords via UART.
 */
void send2pass_UART(uint8 *userPass1, uint8 *userPass2) {
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	e0 97       	sbiw	r28, 0x30	; 48
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	f8 94       	cli
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	cd bf       	out	0x3d, r28	; 61
    2ec4:	9e a7       	std	Y+46, r25	; 0x2e
    2ec6:	8d a7       	std	Y+45, r24	; 0x2d
    2ec8:	78 ab       	std	Y+48, r23	; 0x30
    2eca:	6f a7       	std	Y+47, r22	; 0x2f
	LCD_clearScreen();
    2ecc:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Transmitting");
    2ed0:	2b e9       	ldi	r18, 0x9B	; 155
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	60 e0       	ldi	r22, 0x00	; 0
    2ed8:	a9 01       	movw	r20, r18
    2eda:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_moveCursor>
	while (UART_recieveByte() != SEND_UART);
    2ee6:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_recieveByte>
    2eea:	88 23       	and	r24, r24
    2eec:	e1 f7       	brne	.-8      	; 0x2ee6 <send2pass_UART+0x36>

	//Send Pass1
	for (uint8 counter=0;counter<PASS_LENGTH;counter++)
    2eee:	1c a6       	std	Y+44, r1	; 0x2c
    2ef0:	80 c0       	rjmp	.+256    	; 0x2ff2 <send2pass_UART+0x142>
	{
		UART_sendByte(userPass1[counter]);
    2ef2:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2efa:	9e a5       	ldd	r25, Y+46	; 0x2e
    2efc:	fc 01       	movw	r30, r24
    2efe:	e2 0f       	add	r30, r18
    2f00:	f3 1f       	adc	r31, r19
    2f02:	80 81       	ld	r24, Z
    2f04:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_sendByte>
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 e7       	ldi	r26, 0x70	; 112
    2f0e:	b1 e4       	ldi	r27, 0x41	; 65
    2f10:	8f a3       	std	Y+39, r24	; 0x27
    2f12:	98 a7       	std	Y+40, r25	; 0x28
    2f14:	a9 a7       	std	Y+41, r26	; 0x29
    2f16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f18:	6f a1       	ldd	r22, Y+39	; 0x27
    2f1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2f1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2f1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	4a ef       	ldi	r20, 0xFA	; 250
    2f26:	54 e4       	ldi	r21, 0x44	; 68
    2f28:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	8b a3       	std	Y+35, r24	; 0x23
    2f32:	9c a3       	std	Y+36, r25	; 0x24
    2f34:	ad a3       	std	Y+37, r26	; 0x25
    2f36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f38:	6b a1       	ldd	r22, Y+35	; 0x23
    2f3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	40 e8       	ldi	r20, 0x80	; 128
    2f46:	5f e3       	ldi	r21, 0x3F	; 63
    2f48:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    2f4c:	88 23       	and	r24, r24
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <send2pass_UART+0xaa>
		__ticks = 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	9a a3       	std	Y+34, r25	; 0x22
    2f56:	89 a3       	std	Y+33, r24	; 0x21
    2f58:	3f c0       	rjmp	.+126    	; 0x2fd8 <send2pass_UART+0x128>
	else if (__tmp > 65535)
    2f5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f60:	9e a1       	ldd	r25, Y+38	; 0x26
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	3f ef       	ldi	r19, 0xFF	; 255
    2f66:	4f e7       	ldi	r20, 0x7F	; 127
    2f68:	57 e4       	ldi	r21, 0x47	; 71
    2f6a:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	4c f5       	brge	.+82     	; 0x2fc4 <send2pass_UART+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	6f a1       	ldd	r22, Y+39	; 0x27
    2f74:	78 a5       	ldd	r23, Y+40	; 0x28
    2f76:	89 a5       	ldd	r24, Y+41	; 0x29
    2f78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	9a a3       	std	Y+34, r25	; 0x22
    2f98:	89 a3       	std	Y+33, r24	; 0x21
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <send2pass_UART+0x10a>
    2f9c:	88 ec       	ldi	r24, 0xC8	; 200
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	98 a3       	std	Y+32, r25	; 0x20
    2fa2:	8f 8f       	std	Y+31, r24	; 0x1f
    2fa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fa6:	98 a1       	ldd	r25, Y+32	; 0x20
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <send2pass_UART+0xf8>
    2fac:	98 a3       	std	Y+32, r25	; 0x20
    2fae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	9a a3       	std	Y+34, r25	; 0x22
    2fb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fba:	89 a1       	ldd	r24, Y+33	; 0x21
    2fbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	69 f7       	brne	.-38     	; 0x2f9c <send2pass_UART+0xec>
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <send2pass_UART+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2fca:	9e a1       	ldd	r25, Y+38	; 0x26
    2fcc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9a a3       	std	Y+34, r25	; 0x22
    2fd6:	89 a3       	std	Y+33, r24	; 0x21
    2fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fda:	9a a1       	ldd	r25, Y+34	; 0x22
    2fdc:	9e 8f       	std	Y+30, r25	; 0x1e
    2fde:	8d 8f       	std	Y+29, r24	; 0x1d
    2fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fe2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	f1 f7       	brne	.-4      	; 0x2fe4 <send2pass_UART+0x134>
    2fe8:	9e 8f       	std	Y+30, r25	; 0x1e
    2fea:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_displayStringRowColumn(0, 0, "Transmitting");
	LCD_moveCursor(1, 0);
	while (UART_recieveByte() != SEND_UART);

	//Send Pass1
	for (uint8 counter=0;counter<PASS_LENGTH;counter++)
    2fec:	8c a5       	ldd	r24, Y+44	; 0x2c
    2fee:	8f 5f       	subi	r24, 0xFF	; 255
    2ff0:	8c a7       	std	Y+44, r24	; 0x2c
    2ff2:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ff4:	85 30       	cpi	r24, 0x05	; 5
    2ff6:	08 f4       	brcc	.+2      	; 0x2ffa <send2pass_UART+0x14a>
    2ff8:	7c cf       	rjmp	.-264    	; 0x2ef2 <send2pass_UART+0x42>
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	aa ef       	ldi	r26, 0xFA	; 250
    3000:	b3 e4       	ldi	r27, 0x43	; 67
    3002:	89 8f       	std	Y+25, r24	; 0x19
    3004:	9a 8f       	std	Y+26, r25	; 0x1a
    3006:	ab 8f       	std	Y+27, r26	; 0x1b
    3008:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300a:	69 8d       	ldd	r22, Y+25	; 0x19
    300c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    300e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3010:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	4a ef       	ldi	r20, 0xFA	; 250
    3018:	54 e4       	ldi	r21, 0x44	; 68
    301a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	8d 8b       	std	Y+21, r24	; 0x15
    3024:	9e 8b       	std	Y+22, r25	; 0x16
    3026:	af 8b       	std	Y+23, r26	; 0x17
    3028:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    302a:	6d 89       	ldd	r22, Y+21	; 0x15
    302c:	7e 89       	ldd	r23, Y+22	; 0x16
    302e:	8f 89       	ldd	r24, Y+23	; 0x17
    3030:	98 8d       	ldd	r25, Y+24	; 0x18
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e8       	ldi	r20, 0x80	; 128
    3038:	5f e3       	ldi	r21, 0x3F	; 63
    303a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    303e:	88 23       	and	r24, r24
    3040:	2c f4       	brge	.+10     	; 0x304c <send2pass_UART+0x19c>
		__ticks = 1;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	9c 8b       	std	Y+20, r25	; 0x14
    3048:	8b 8b       	std	Y+19, r24	; 0x13
    304a:	3f c0       	rjmp	.+126    	; 0x30ca <send2pass_UART+0x21a>
	else if (__tmp > 65535)
    304c:	6d 89       	ldd	r22, Y+21	; 0x15
    304e:	7e 89       	ldd	r23, Y+22	; 0x16
    3050:	8f 89       	ldd	r24, Y+23	; 0x17
    3052:	98 8d       	ldd	r25, Y+24	; 0x18
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	3f ef       	ldi	r19, 0xFF	; 255
    3058:	4f e7       	ldi	r20, 0x7F	; 127
    305a:	57 e4       	ldi	r21, 0x47	; 71
    305c:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3060:	18 16       	cp	r1, r24
    3062:	4c f5       	brge	.+82     	; 0x30b6 <send2pass_UART+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3064:	69 8d       	ldd	r22, Y+25	; 0x19
    3066:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3068:	8b 8d       	ldd	r24, Y+27	; 0x1b
    306a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e2       	ldi	r20, 0x20	; 32
    3072:	51 e4       	ldi	r21, 0x41	; 65
    3074:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	9c 8b       	std	Y+20, r25	; 0x14
    308a:	8b 8b       	std	Y+19, r24	; 0x13
    308c:	0f c0       	rjmp	.+30     	; 0x30ac <send2pass_UART+0x1fc>
    308e:	88 ec       	ldi	r24, 0xC8	; 200
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9a 8b       	std	Y+18, r25	; 0x12
    3094:	89 8b       	std	Y+17, r24	; 0x11
    3096:	89 89       	ldd	r24, Y+17	; 0x11
    3098:	9a 89       	ldd	r25, Y+18	; 0x12
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <send2pass_UART+0x1ea>
    309e:	9a 8b       	std	Y+18, r25	; 0x12
    30a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a2:	8b 89       	ldd	r24, Y+19	; 0x13
    30a4:	9c 89       	ldd	r25, Y+20	; 0x14
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	9c 8b       	std	Y+20, r25	; 0x14
    30aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ac:	8b 89       	ldd	r24, Y+19	; 0x13
    30ae:	9c 89       	ldd	r25, Y+20	; 0x14
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	69 f7       	brne	.-38     	; 0x308e <send2pass_UART+0x1de>
    30b4:	14 c0       	rjmp	.+40     	; 0x30de <send2pass_UART+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b6:	6d 89       	ldd	r22, Y+21	; 0x15
    30b8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ba:	8f 89       	ldd	r24, Y+23	; 0x17
    30bc:	98 8d       	ldd	r25, Y+24	; 0x18
    30be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	9c 8b       	std	Y+20, r25	; 0x14
    30c8:	8b 8b       	std	Y+19, r24	; 0x13
    30ca:	8b 89       	ldd	r24, Y+19	; 0x13
    30cc:	9c 89       	ldd	r25, Y+20	; 0x14
    30ce:	98 8b       	std	Y+16, r25	; 0x10
    30d0:	8f 87       	std	Y+15, r24	; 0x0f
    30d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d4:	98 89       	ldd	r25, Y+16	; 0x10
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	f1 f7       	brne	.-4      	; 0x30d6 <send2pass_UART+0x226>
    30da:	98 8b       	std	Y+16, r25	; 0x10
    30dc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(15);
	}
	_delay_ms(500);

	//Send Pass2
	for (uint8 counter=0;counter<PASS_LENGTH;counter++)
    30de:	1b a6       	std	Y+43, r1	; 0x2b
    30e0:	80 c0       	rjmp	.+256    	; 0x31e2 <send2pass_UART+0x332>
	{
			UART_sendByte(userPass2[counter]);
    30e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ea:	98 a9       	ldd	r25, Y+48	; 0x30
    30ec:	fc 01       	movw	r30, r24
    30ee:	e2 0f       	add	r30, r18
    30f0:	f3 1f       	adc	r31, r19
    30f2:	80 81       	ld	r24, Z
    30f4:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_sendByte>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	a0 e7       	ldi	r26, 0x70	; 112
    30fe:	b1 e4       	ldi	r27, 0x41	; 65
    3100:	8b 87       	std	Y+11, r24	; 0x0b
    3102:	9c 87       	std	Y+12, r25	; 0x0c
    3104:	ad 87       	std	Y+13, r26	; 0x0d
    3106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3108:	6b 85       	ldd	r22, Y+11	; 0x0b
    310a:	7c 85       	ldd	r23, Y+12	; 0x0c
    310c:	8d 85       	ldd	r24, Y+13	; 0x0d
    310e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	4a ef       	ldi	r20, 0xFA	; 250
    3116:	54 e4       	ldi	r21, 0x44	; 68
    3118:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	8f 83       	std	Y+7, r24	; 0x07
    3122:	98 87       	std	Y+8, r25	; 0x08
    3124:	a9 87       	std	Y+9, r26	; 0x09
    3126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3128:	6f 81       	ldd	r22, Y+7	; 0x07
    312a:	78 85       	ldd	r23, Y+8	; 0x08
    312c:	89 85       	ldd	r24, Y+9	; 0x09
    312e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e8       	ldi	r20, 0x80	; 128
    3136:	5f e3       	ldi	r21, 0x3F	; 63
    3138:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    313c:	88 23       	and	r24, r24
    313e:	2c f4       	brge	.+10     	; 0x314a <send2pass_UART+0x29a>
		__ticks = 1;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	8d 83       	std	Y+5, r24	; 0x05
    3148:	3f c0       	rjmp	.+126    	; 0x31c8 <send2pass_UART+0x318>
	else if (__tmp > 65535)
    314a:	6f 81       	ldd	r22, Y+7	; 0x07
    314c:	78 85       	ldd	r23, Y+8	; 0x08
    314e:	89 85       	ldd	r24, Y+9	; 0x09
    3150:	9a 85       	ldd	r25, Y+10	; 0x0a
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	3f ef       	ldi	r19, 0xFF	; 255
    3156:	4f e7       	ldi	r20, 0x7F	; 127
    3158:	57 e4       	ldi	r21, 0x47	; 71
    315a:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    315e:	18 16       	cp	r1, r24
    3160:	4c f5       	brge	.+82     	; 0x31b4 <send2pass_UART+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3162:	6b 85       	ldd	r22, Y+11	; 0x0b
    3164:	7c 85       	ldd	r23, Y+12	; 0x0c
    3166:	8d 85       	ldd	r24, Y+13	; 0x0d
    3168:	9e 85       	ldd	r25, Y+14	; 0x0e
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e2       	ldi	r20, 0x20	; 32
    3170:	51 e4       	ldi	r21, 0x41	; 65
    3172:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	bc 01       	movw	r22, r24
    317c:	cd 01       	movw	r24, r26
    317e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	9e 83       	std	Y+6, r25	; 0x06
    3188:	8d 83       	std	Y+5, r24	; 0x05
    318a:	0f c0       	rjmp	.+30     	; 0x31aa <send2pass_UART+0x2fa>
    318c:	88 ec       	ldi	r24, 0xC8	; 200
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	9c 83       	std	Y+4, r25	; 0x04
    3192:	8b 83       	std	Y+3, r24	; 0x03
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	9c 81       	ldd	r25, Y+4	; 0x04
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	f1 f7       	brne	.-4      	; 0x3198 <send2pass_UART+0x2e8>
    319c:	9c 83       	std	Y+4, r25	; 0x04
    319e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	9e 83       	std	Y+6, r25	; 0x06
    31a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	9e 81       	ldd	r25, Y+6	; 0x06
    31ae:	00 97       	sbiw	r24, 0x00	; 0
    31b0:	69 f7       	brne	.-38     	; 0x318c <send2pass_UART+0x2dc>
    31b2:	14 c0       	rjmp	.+40     	; 0x31dc <send2pass_UART+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b4:	6f 81       	ldd	r22, Y+7	; 0x07
    31b6:	78 85       	ldd	r23, Y+8	; 0x08
    31b8:	89 85       	ldd	r24, Y+9	; 0x09
    31ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    31bc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	9e 83       	std	Y+6, r25	; 0x06
    31c6:	8d 83       	std	Y+5, r24	; 0x05
    31c8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ca:	9e 81       	ldd	r25, Y+6	; 0x06
    31cc:	9a 83       	std	Y+2, r25	; 0x02
    31ce:	89 83       	std	Y+1, r24	; 0x01
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	f1 f7       	brne	.-4      	; 0x31d4 <send2pass_UART+0x324>
    31d8:	9a 83       	std	Y+2, r25	; 0x02
    31da:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);
	}
	_delay_ms(500);

	//Send Pass2
	for (uint8 counter=0;counter<PASS_LENGTH;counter++)
    31dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    31de:	8f 5f       	subi	r24, 0xFF	; 255
    31e0:	8b a7       	std	Y+43, r24	; 0x2b
    31e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    31e4:	85 30       	cpi	r24, 0x05	; 5
    31e6:	08 f4       	brcc	.+2      	; 0x31ea <send2pass_UART+0x33a>
    31e8:	7c cf       	rjmp	.-264    	; 0x30e2 <send2pass_UART+0x232>
	{
			UART_sendByte(userPass2[counter]);
			_delay_ms(15);
	}
}
    31ea:	e0 96       	adiw	r28, 0x30	; 48
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	08 95       	ret

000031fc <SenduserPassUART>:

/*
 * Send saved userPasss function sends two userPasss via UART to check.
 */
void SenduserPassUART(uint8 *userPass1) {
    31fc:	df 93       	push	r29
    31fe:	cf 93       	push	r28
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	61 97       	sbiw	r28, 0x11	; 17
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	99 8b       	std	Y+17, r25	; 0x11
    3212:	88 8b       	std	Y+16, r24	; 0x10
	LCD_clearScreen();
    3214:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Transmitting");
    3218:	2b e9       	ldi	r18, 0x9B	; 155
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	a9 01       	movw	r20, r18
    3222:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	60 e0       	ldi	r22, 0x00	; 0
    322a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_moveCursor>
	while(UART_recieveByte()!= AVALIABLE);
    322e:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_recieveByte>
    3232:	85 30       	cpi	r24, 0x05	; 5
    3234:	e1 f7       	brne	.-8      	; 0x322e <SenduserPassUART+0x32>

	for (uint8 counter =0;counter<PASS_LENGTH;counter++)
    3236:	1f 86       	std	Y+15, r1	; 0x0f
    3238:	80 c0       	rjmp	.+256    	; 0x333a <SenduserPassUART+0x13e>
	{
		UART_sendByte(userPass1[counter]);
    323a:	8f 85       	ldd	r24, Y+15	; 0x0f
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	88 89       	ldd	r24, Y+16	; 0x10
    3242:	99 89       	ldd	r25, Y+17	; 0x11
    3244:	fc 01       	movw	r30, r24
    3246:	e2 0f       	add	r30, r18
    3248:	f3 1f       	adc	r31, r19
    324a:	80 81       	ld	r24, Z
    324c:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_sendByte>
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	a0 e7       	ldi	r26, 0x70	; 112
    3256:	b1 e4       	ldi	r27, 0x41	; 65
    3258:	8b 87       	std	Y+11, r24	; 0x0b
    325a:	9c 87       	std	Y+12, r25	; 0x0c
    325c:	ad 87       	std	Y+13, r26	; 0x0d
    325e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3260:	6b 85       	ldd	r22, Y+11	; 0x0b
    3262:	7c 85       	ldd	r23, Y+12	; 0x0c
    3264:	8d 85       	ldd	r24, Y+13	; 0x0d
    3266:	9e 85       	ldd	r25, Y+14	; 0x0e
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	4a ef       	ldi	r20, 0xFA	; 250
    326e:	54 e4       	ldi	r21, 0x44	; 68
    3270:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	8f 83       	std	Y+7, r24	; 0x07
    327a:	98 87       	std	Y+8, r25	; 0x08
    327c:	a9 87       	std	Y+9, r26	; 0x09
    327e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e8       	ldi	r20, 0x80	; 128
    328e:	5f e3       	ldi	r21, 0x3F	; 63
    3290:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    3294:	88 23       	and	r24, r24
    3296:	2c f4       	brge	.+10     	; 0x32a2 <SenduserPassUART+0xa6>
		__ticks = 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	3f c0       	rjmp	.+126    	; 0x3320 <SenduserPassUART+0x124>
	else if (__tmp > 65535)
    32a2:	6f 81       	ldd	r22, Y+7	; 0x07
    32a4:	78 85       	ldd	r23, Y+8	; 0x08
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	4c f5       	brge	.+82     	; 0x330c <SenduserPassUART+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    32bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    32be:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
    32e2:	0f c0       	rjmp	.+30     	; 0x3302 <SenduserPassUART+0x106>
    32e4:	88 ec       	ldi	r24, 0xC8	; 200
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9c 83       	std	Y+4, r25	; 0x04
    32ea:	8b 83       	std	Y+3, r24	; 0x03
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <SenduserPassUART+0xf4>
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	9e 83       	std	Y+6, r25	; 0x06
    3300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	69 f7       	brne	.-38     	; 0x32e4 <SenduserPassUART+0xe8>
    330a:	14 c0       	rjmp	.+40     	; 0x3334 <SenduserPassUART+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	6f 81       	ldd	r22, Y+7	; 0x07
    330e:	78 85       	ldd	r23, Y+8	; 0x08
    3310:	89 85       	ldd	r24, Y+9	; 0x09
    3312:	9a 85       	ldd	r25, Y+10	; 0x0a
    3314:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9e 83       	std	Y+6, r25	; 0x06
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	9e 81       	ldd	r25, Y+6	; 0x06
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <SenduserPassUART+0x130>
    3330:	9a 83       	std	Y+2, r25	; 0x02
    3332:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Transmitting");
	LCD_moveCursor(1, 0);
	while(UART_recieveByte()!= AVALIABLE);

	for (uint8 counter =0;counter<PASS_LENGTH;counter++)
    3334:	8f 85       	ldd	r24, Y+15	; 0x0f
    3336:	8f 5f       	subi	r24, 0xFF	; 255
    3338:	8f 87       	std	Y+15, r24	; 0x0f
    333a:	8f 85       	ldd	r24, Y+15	; 0x0f
    333c:	85 30       	cpi	r24, 0x05	; 5
    333e:	08 f4       	brcc	.+2      	; 0x3342 <SenduserPassUART+0x146>
    3340:	7c cf       	rjmp	.-264    	; 0x323a <SenduserPassUART+0x3e>
	{
		UART_sendByte(userPass1[counter]);
		_delay_ms(15);
	}
}
    3342:	61 96       	adiw	r28, 0x11	; 17
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
    334e:	cf 91       	pop	r28
    3350:	df 91       	pop	r29
    3352:	08 95       	ret

00003354 <timer1_TickHandler>:
/*
 * Timer1 Handler
 */
void timer1_TickHandler(void)
{
    3354:	df 93       	push	r29
    3356:	cf 93       	push	r28
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    335c:	80 91 15 01 	lds	r24, 0x0115
    3360:	8f 5f       	subi	r24, 0xFF	; 255
    3362:	80 93 15 01 	sts	0x0115, r24
}
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <delaySeconds>:

void delaySeconds(uint8 seconds)
{
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	2c 97       	sbiw	r28, 0x0c	; 12
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	8f 83       	std	Y+7, r24	; 0x07
	 * Initial Value =0
	 * Prescaler F_CPU/256
	 * Compare mode
	 * Compare value =31250
	 */
    ticks = 0;
    3382:	10 92 15 01 	sts	0x0115, r1
    Timer1_ConfigType Timer1_Config = {0,F_CPU_256,COMPARE,31250};
    3386:	ce 01       	movw	r24, r28
    3388:	01 96       	adiw	r24, 0x01	; 1
    338a:	99 87       	std	Y+9, r25	; 0x09
    338c:	88 87       	std	Y+8, r24	; 0x08
    338e:	ec e0       	ldi	r30, 0x0C	; 12
    3390:	f1 e0       	ldi	r31, 0x01	; 1
    3392:	fb 87       	std	Y+11, r31	; 0x0b
    3394:	ea 87       	std	Y+10, r30	; 0x0a
    3396:	f6 e0       	ldi	r31, 0x06	; 6
    3398:	fc 87       	std	Y+12, r31	; 0x0c
    339a:	ea 85       	ldd	r30, Y+10	; 0x0a
    339c:	fb 85       	ldd	r31, Y+11	; 0x0b
    339e:	00 80       	ld	r0, Z
    33a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33a4:	01 96       	adiw	r24, 0x01	; 1
    33a6:	9b 87       	std	Y+11, r25	; 0x0b
    33a8:	8a 87       	std	Y+10, r24	; 0x0a
    33aa:	e8 85       	ldd	r30, Y+8	; 0x08
    33ac:	f9 85       	ldd	r31, Y+9	; 0x09
    33ae:	00 82       	st	Z, r0
    33b0:	88 85       	ldd	r24, Y+8	; 0x08
    33b2:	99 85       	ldd	r25, Y+9	; 0x09
    33b4:	01 96       	adiw	r24, 0x01	; 1
    33b6:	99 87       	std	Y+9, r25	; 0x09
    33b8:	88 87       	std	Y+8, r24	; 0x08
    33ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    33bc:	91 50       	subi	r25, 0x01	; 1
    33be:	9c 87       	std	Y+12, r25	; 0x0c
    33c0:	ec 85       	ldd	r30, Y+12	; 0x0c
    33c2:	ee 23       	and	r30, r30
    33c4:	51 f7       	brne	.-44     	; 0x339a <delaySeconds+0x2e>
    Timer1_init(&Timer1_Config);
    33c6:	ce 01       	movw	r24, r28
    33c8:	01 96       	adiw	r24, 0x01	; 1
    33ca:	0e 94 88 06 	call	0xd10	; 0xd10 <Timer1_init>

    Timer1_setCallBack(timer1_TickHandler);
    33ce:	8a ea       	ldi	r24, 0xAA	; 170
    33d0:	99 e1       	ldi	r25, 0x19	; 25
    33d2:	0e 94 f2 06 	call	0xde4	; 0xde4 <Timer1_setCallBack>
    while (ticks != seconds);
    33d6:	90 91 15 01 	lds	r25, 0x0115
    33da:	8f 81       	ldd	r24, Y+7	; 0x07
    33dc:	98 17       	cp	r25, r24
    33de:	d9 f7       	brne	.-10     	; 0x33d6 <delaySeconds+0x6a>

    Timer1_deInit();
    33e0:	0e 94 d0 06 	call	0xda0	; 0xda0 <Timer1_deInit>
}
    33e4:	2c 96       	adiw	r28, 0x0c	; 12
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	f8 94       	cli
    33ea:	de bf       	out	0x3e, r29	; 62
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	cd bf       	out	0x3d, r28	; 61
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	08 95       	ret

000033f6 <doorLocker>:
void doorLocker(void)
{
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    33fe:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"Door is");
    3402:	28 ea       	ldi	r18, 0xA8	; 168
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	64 e0       	ldi	r22, 0x04	; 4
    340a:	a9 01       	movw	r20, r18
    340c:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,2,"Unlocking");
    3410:	20 eb       	ldi	r18, 0xB0	; 176
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	62 e0       	ldi	r22, 0x02	; 2
    3418:	a9 01       	movw	r20, r18
    341a:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
	delaySeconds(CW_sec);
    341e:	8f e0       	ldi	r24, 0x0F	; 15
    3420:	0e 94 b6 19 	call	0x336c	; 0x336c <delaySeconds>

	LCD_clearScreen();
    3424:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,3,"WAITING");
    3428:	2a eb       	ldi	r18, 0xBA	; 186
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	63 e0       	ldi	r22, 0x03	; 3
    3430:	a9 01       	movw	r20, r18
    3432:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
	delaySeconds(WAIT_sec);
    3436:	83 e0       	ldi	r24, 0x03	; 3
    3438:	0e 94 b6 19 	call	0x336c	; 0x336c <delaySeconds>

	LCD_clearScreen();
    343c:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,4,"Door is");
    3440:	28 ea       	ldi	r18, 0xA8	; 168
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	64 e0       	ldi	r22, 0x04	; 4
    3448:	a9 01       	movw	r20, r18
    344a:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,3,"Locking");
    344e:	22 ec       	ldi	r18, 0xC2	; 194
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	63 e0       	ldi	r22, 0x03	; 3
    3456:	a9 01       	movw	r20, r18
    3458:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
	delaySeconds(CCW_sec);
    345c:	8f e0       	ldi	r24, 0x0F	; 15
    345e:	0e 94 b6 19 	call	0x336c	; 0x336c <delaySeconds>
}
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <handleSystemMenu>:

/*
 * handleSystemMenu for handling system options
 */
void handleSystemMenu(uint8 *userPass) {
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    3470:	65 97       	sbiw	r28, 0x15	; 21
    3472:	0f b6       	in	r0, 0x3f	; 63
    3474:	f8 94       	cli
    3476:	de bf       	out	0x3e, r29	; 62
    3478:	0f be       	out	0x3f, r0	; 63
    347a:	cd bf       	out	0x3d, r28	; 61
    347c:	9b 8b       	std	Y+19, r25	; 0x13
    347e:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 pressedkey;
	uint8 PlusOption;
	uint8 MinusOption;
	while (1)
	{
		LCD_clearScreen();
    3480:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"+ : Open Door");
    3484:	2a ec       	ldi	r18, 0xCA	; 202
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	61 e0       	ldi	r22, 0x01	; 1
    348c:	a9 01       	movw	r20, r18
    348e:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,1,"- : Change pass");
    3492:	28 ed       	ldi	r18, 0xD8	; 216
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	61 e0       	ldi	r22, 0x01	; 1
    349a:	a9 01       	movw	r20, r18
    349c:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
		pressedkey = KEYPAD_getPressedKey();
    34a0:	0e 94 95 10 	call	0x212a	; 0x212a <KEYPAD_getPressedKey>
    34a4:	89 8b       	std	Y+17, r24	; 0x11
		while (UART_recieveByte() != SELECTING_OPTION );
    34a6:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_recieveByte>
    34aa:	86 30       	cpi	r24, 0x06	; 6
    34ac:	e1 f7       	brne	.-8      	; 0x34a6 <handleSystemMenu+0x3e>
    34ae:	47 c0       	rjmp	.+142    	; 0x353e <handleSystemMenu+0xd6>

		while( remaining_trials>0)
		{
			switch (pressedkey)
    34b0:	89 89       	ldd	r24, Y+17	; 0x11
    34b2:	28 2f       	mov	r18, r24
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	3d 8b       	std	Y+21, r19	; 0x15
    34b8:	2c 8b       	std	Y+20, r18	; 0x14
    34ba:	8c 89       	ldd	r24, Y+20	; 0x14
    34bc:	9d 89       	ldd	r25, Y+21	; 0x15
    34be:	8b 32       	cpi	r24, 0x2B	; 43
    34c0:	91 05       	cpc	r25, r1
    34c2:	31 f0       	breq	.+12     	; 0x34d0 <handleSystemMenu+0x68>
    34c4:	2c 89       	ldd	r18, Y+20	; 0x14
    34c6:	3d 89       	ldd	r19, Y+21	; 0x15
    34c8:	2d 32       	cpi	r18, 0x2D	; 45
    34ca:	31 05       	cpc	r19, r1
    34cc:	b1 f0       	breq	.+44     	; 0x34fa <handleSystemMenu+0x92>
    34ce:	29 c0       	rjmp	.+82     	; 0x3522 <handleSystemMenu+0xba>
			{
				case '+' :
					UART_sendByte(DOOR_CONTROL);
    34d0:	87 e0       	ldi	r24, 0x07	; 7
    34d2:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_sendByte>
					getUserPass(userPass);
    34d6:	8a 89       	ldd	r24, Y+18	; 0x12
    34d8:	9b 89       	ldd	r25, Y+19	; 0x13
    34da:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <getUserPass>
					SenduserPassUART(userPass);
    34de:	8a 89       	ldd	r24, Y+18	; 0x12
    34e0:	9b 89       	ldd	r25, Y+19	; 0x13
    34e2:	0e 94 fe 18 	call	0x31fc	; 0x31fc <SenduserPassUART>
					UART_sendByte(TRANSMIT);
    34e6:	83 e0       	ldi	r24, 0x03	; 3
    34e8:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_sendByte>
					PlusOption= UART_recieveByte();
    34ec:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_recieveByte>
    34f0:	88 8b       	std	Y+16, r24	; 0x10
					handlePlusOption(PlusOption);
    34f2:	88 89       	ldd	r24, Y+16	; 0x10
    34f4:	0e 94 24 1b 	call	0x3648	; 0x3648 <handlePlusOption>
    34f8:	14 c0       	rjmp	.+40     	; 0x3522 <handleSystemMenu+0xba>
					break;
				case '-' :
					UART_sendByte(PASSWORD_CHANGE);
    34fa:	88 e0       	ldi	r24, 0x08	; 8
    34fc:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_sendByte>
					getUserPass(userPass);
    3500:	8a 89       	ldd	r24, Y+18	; 0x12
    3502:	9b 89       	ldd	r25, Y+19	; 0x13
    3504:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <getUserPass>
					SenduserPassUART(userPass);
    3508:	8a 89       	ldd	r24, Y+18	; 0x12
    350a:	9b 89       	ldd	r25, Y+19	; 0x13
    350c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <SenduserPassUART>
					UART_sendByte(TRANSMIT);
    3510:	83 e0       	ldi	r24, 0x03	; 3
    3512:	0e 94 6e 07 	call	0xedc	; 0xedc <UART_sendByte>
					MinusOption= UART_recieveByte();
    3516:	0e 94 85 07 	call	0xf0a	; 0xf0a <UART_recieveByte>
    351a:	8f 87       	std	Y+15, r24	; 0x0f
					handleMinusOption(MinusOption);
    351c:	8f 85       	ldd	r24, Y+15	; 0x0f
    351e:	0e 94 de 1b 	call	0x37bc	; 0x37bc <handleMinusOption>
					break;
			}
			/*
			 * Go to main menu
			 */
			if(PlusOption == VALID_PASSWORD || MinusOption == VALID_PASSWORD||remaining_trials == 0 )
    3522:	88 89       	ldd	r24, Y+16	; 0x10
    3524:	82 30       	cpi	r24, 0x02	; 2
    3526:	39 f0       	breq	.+14     	; 0x3536 <handleSystemMenu+0xce>
    3528:	8f 85       	ldd	r24, Y+15	; 0x0f
    352a:	82 30       	cpi	r24, 0x02	; 2
    352c:	21 f0       	breq	.+8      	; 0x3536 <handleSystemMenu+0xce>
    352e:	80 91 06 01 	lds	r24, 0x0106
    3532:	88 23       	and	r24, r24
    3534:	21 f4       	brne	.+8      	; 0x353e <handleSystemMenu+0xd6>
				{
					remaining_trials = 3;
    3536:	83 e0       	ldi	r24, 0x03	; 3
    3538:	80 93 06 01 	sts	0x0106, r24
    353c:	05 c0       	rjmp	.+10     	; 0x3548 <handleSystemMenu+0xe0>
		LCD_displayStringRowColumn(0,1,"+ : Open Door");
		LCD_displayStringRowColumn(1,1,"- : Change pass");
		pressedkey = KEYPAD_getPressedKey();
		while (UART_recieveByte() != SELECTING_OPTION );

		while( remaining_trials>0)
    353e:	80 91 06 01 	lds	r24, 0x0106
    3542:	88 23       	and	r24, r24
    3544:	09 f0       	breq	.+2      	; 0x3548 <handleSystemMenu+0xe0>
    3546:	b4 cf       	rjmp	.-152    	; 0x34b0 <handleSystemMenu+0x48>
				{
					remaining_trials = 3;
					break;
				}
		}
		if(MinusOption == VALID_PASSWORD)
    3548:	8f 85       	ldd	r24, Y+15	; 0x0f
    354a:	82 30       	cpi	r24, 0x02	; 2
    354c:	09 f4       	brne	.+2      	; 0x3550 <handleSystemMenu+0xe8>
    354e:	73 c0       	rjmp	.+230    	; 0x3636 <handleSystemMenu+0x1ce>
		{
				break;  // Jump to set new password [getUserPass function]
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	a6 e9       	ldi	r26, 0x96	; 150
    3556:	b3 e4       	ldi	r27, 0x43	; 67
    3558:	8b 87       	std	Y+11, r24	; 0x0b
    355a:	9c 87       	std	Y+12, r25	; 0x0c
    355c:	ad 87       	std	Y+13, r26	; 0x0d
    355e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3560:	6b 85       	ldd	r22, Y+11	; 0x0b
    3562:	7c 85       	ldd	r23, Y+12	; 0x0c
    3564:	8d 85       	ldd	r24, Y+13	; 0x0d
    3566:	9e 85       	ldd	r25, Y+14	; 0x0e
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	4a ef       	ldi	r20, 0xFA	; 250
    356e:	54 e4       	ldi	r21, 0x44	; 68
    3570:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	8f 83       	std	Y+7, r24	; 0x07
    357a:	98 87       	std	Y+8, r25	; 0x08
    357c:	a9 87       	std	Y+9, r26	; 0x09
    357e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3580:	6f 81       	ldd	r22, Y+7	; 0x07
    3582:	78 85       	ldd	r23, Y+8	; 0x08
    3584:	89 85       	ldd	r24, Y+9	; 0x09
    3586:	9a 85       	ldd	r25, Y+10	; 0x0a
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e8       	ldi	r20, 0x80	; 128
    358e:	5f e3       	ldi	r21, 0x3F	; 63
    3590:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    3594:	88 23       	and	r24, r24
    3596:	2c f4       	brge	.+10     	; 0x35a2 <handleSystemMenu+0x13a>
		__ticks = 1;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	9e 83       	std	Y+6, r25	; 0x06
    359e:	8d 83       	std	Y+5, r24	; 0x05
    35a0:	3f c0       	rjmp	.+126    	; 0x3620 <handleSystemMenu+0x1b8>
	else if (__tmp > 65535)
    35a2:	6f 81       	ldd	r22, Y+7	; 0x07
    35a4:	78 85       	ldd	r23, Y+8	; 0x08
    35a6:	89 85       	ldd	r24, Y+9	; 0x09
    35a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	3f ef       	ldi	r19, 0xFF	; 255
    35ae:	4f e7       	ldi	r20, 0x7F	; 127
    35b0:	57 e4       	ldi	r21, 0x47	; 71
    35b2:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    35b6:	18 16       	cp	r1, r24
    35b8:	4c f5       	brge	.+82     	; 0x360c <handleSystemMenu+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    35bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    35be:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e2       	ldi	r20, 0x20	; 32
    35c8:	51 e4       	ldi	r21, 0x41	; 65
    35ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	bc 01       	movw	r22, r24
    35d4:	cd 01       	movw	r24, r26
    35d6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	9e 83       	std	Y+6, r25	; 0x06
    35e0:	8d 83       	std	Y+5, r24	; 0x05
    35e2:	0f c0       	rjmp	.+30     	; 0x3602 <handleSystemMenu+0x19a>
    35e4:	88 ec       	ldi	r24, 0xC8	; 200
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	9c 83       	std	Y+4, r25	; 0x04
    35ea:	8b 83       	std	Y+3, r24	; 0x03
    35ec:	8b 81       	ldd	r24, Y+3	; 0x03
    35ee:	9c 81       	ldd	r25, Y+4	; 0x04
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <handleSystemMenu+0x188>
    35f4:	9c 83       	std	Y+4, r25	; 0x04
    35f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f8:	8d 81       	ldd	r24, Y+5	; 0x05
    35fa:	9e 81       	ldd	r25, Y+6	; 0x06
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	9e 83       	std	Y+6, r25	; 0x06
    3600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3602:	8d 81       	ldd	r24, Y+5	; 0x05
    3604:	9e 81       	ldd	r25, Y+6	; 0x06
    3606:	00 97       	sbiw	r24, 0x00	; 0
    3608:	69 f7       	brne	.-38     	; 0x35e4 <handleSystemMenu+0x17c>
    360a:	3a cf       	rjmp	.-396    	; 0x3480 <handleSystemMenu+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360c:	6f 81       	ldd	r22, Y+7	; 0x07
    360e:	78 85       	ldd	r23, Y+8	; 0x08
    3610:	89 85       	ldd	r24, Y+9	; 0x09
    3612:	9a 85       	ldd	r25, Y+10	; 0x0a
    3614:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	9e 83       	std	Y+6, r25	; 0x06
    361e:	8d 83       	std	Y+5, r24	; 0x05
    3620:	8d 81       	ldd	r24, Y+5	; 0x05
    3622:	9e 81       	ldd	r25, Y+6	; 0x06
    3624:	9a 83       	std	Y+2, r25	; 0x02
    3626:	89 83       	std	Y+1, r24	; 0x01
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	9a 81       	ldd	r25, Y+2	; 0x02
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <handleSystemMenu+0x1c4>
    3630:	9a 83       	std	Y+2, r25	; 0x02
    3632:	89 83       	std	Y+1, r24	; 0x01
    3634:	25 cf       	rjmp	.-438    	; 0x3480 <handleSystemMenu+0x18>
		}
			_delay_ms(300);
	}
}
    3636:	65 96       	adiw	r28, 0x15	; 21
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	cf 91       	pop	r28
    3644:	df 91       	pop	r29
    3646:	08 95       	ret

00003648 <handlePlusOption>:

void handlePlusOption(uint8 PlusOption)
{
    3648:	df 93       	push	r29
    364a:	cf 93       	push	r28
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    3650:	61 97       	sbiw	r28, 0x11	; 17
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	8f 87       	std	Y+15, r24	; 0x0f
    switch (PlusOption) {
    365e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3660:	28 2f       	mov	r18, r24
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	39 8b       	std	Y+17, r19	; 0x11
    3666:	28 8b       	std	Y+16, r18	; 0x10
    3668:	88 89       	ldd	r24, Y+16	; 0x10
    366a:	99 89       	ldd	r25, Y+17	; 0x11
    366c:	81 30       	cpi	r24, 0x01	; 1
    366e:	91 05       	cpc	r25, r1
    3670:	61 f0       	breq	.+24     	; 0x368a <handlePlusOption+0x42>
    3672:	28 89       	ldd	r18, Y+16	; 0x10
    3674:	39 89       	ldd	r19, Y+17	; 0x11
    3676:	22 30       	cpi	r18, 0x02	; 2
    3678:	31 05       	cpc	r19, r1
    367a:	09 f0       	breq	.+2      	; 0x367e <handlePlusOption+0x36>
    367c:	96 c0       	rjmp	.+300    	; 0x37aa <handlePlusOption+0x162>
        case VALID_PASSWORD:
            doorLocker();
    367e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <doorLocker>
            remaining_trials = 3;
    3682:	83 e0       	ldi	r24, 0x03	; 3
    3684:	80 93 06 01 	sts	0x0106, r24
    3688:	90 c0       	rjmp	.+288    	; 0x37aa <handlePlusOption+0x162>
            break;
        case INVALID_PASSWORD:
            LCD_clearScreen();
    368a:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
            LCD_displayStringRowColumn(0,1,"Wrong Password");
    368e:	28 ee       	ldi	r18, 0xE8	; 232
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	61 e0       	ldi	r22, 0x01	; 1
    3696:	a9 01       	movw	r20, r18
    3698:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	a6 e1       	ldi	r26, 0x16	; 22
    36a2:	b4 e4       	ldi	r27, 0x44	; 68
    36a4:	8b 87       	std	Y+11, r24	; 0x0b
    36a6:	9c 87       	std	Y+12, r25	; 0x0c
    36a8:	ad 87       	std	Y+13, r26	; 0x0d
    36aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    36b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	4a ef       	ldi	r20, 0xFA	; 250
    36ba:	54 e4       	ldi	r21, 0x44	; 68
    36bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	8f 83       	std	Y+7, r24	; 0x07
    36c6:	98 87       	std	Y+8, r25	; 0x08
    36c8:	a9 87       	std	Y+9, r26	; 0x09
    36ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36cc:	6f 81       	ldd	r22, Y+7	; 0x07
    36ce:	78 85       	ldd	r23, Y+8	; 0x08
    36d0:	89 85       	ldd	r24, Y+9	; 0x09
    36d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	40 e8       	ldi	r20, 0x80	; 128
    36da:	5f e3       	ldi	r21, 0x3F	; 63
    36dc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    36e0:	88 23       	and	r24, r24
    36e2:	2c f4       	brge	.+10     	; 0x36ee <handlePlusOption+0xa6>
		__ticks = 1;
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	8d 83       	std	Y+5, r24	; 0x05
    36ec:	3f c0       	rjmp	.+126    	; 0x376c <handlePlusOption+0x124>
	else if (__tmp > 65535)
    36ee:	6f 81       	ldd	r22, Y+7	; 0x07
    36f0:	78 85       	ldd	r23, Y+8	; 0x08
    36f2:	89 85       	ldd	r24, Y+9	; 0x09
    36f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f6:	20 e0       	ldi	r18, 0x00	; 0
    36f8:	3f ef       	ldi	r19, 0xFF	; 255
    36fa:	4f e7       	ldi	r20, 0x7F	; 127
    36fc:	57 e4       	ldi	r21, 0x47	; 71
    36fe:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3702:	18 16       	cp	r1, r24
    3704:	4c f5       	brge	.+82     	; 0x3758 <handlePlusOption+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3706:	6b 85       	ldd	r22, Y+11	; 0x0b
    3708:	7c 85       	ldd	r23, Y+12	; 0x0c
    370a:	8d 85       	ldd	r24, Y+13	; 0x0d
    370c:	9e 85       	ldd	r25, Y+14	; 0x0e
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e2       	ldi	r20, 0x20	; 32
    3714:	51 e4       	ldi	r21, 0x41	; 65
    3716:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    371a:	dc 01       	movw	r26, r24
    371c:	cb 01       	movw	r24, r22
    371e:	bc 01       	movw	r22, r24
    3720:	cd 01       	movw	r24, r26
    3722:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	9e 83       	std	Y+6, r25	; 0x06
    372c:	8d 83       	std	Y+5, r24	; 0x05
    372e:	0f c0       	rjmp	.+30     	; 0x374e <handlePlusOption+0x106>
    3730:	88 ec       	ldi	r24, 0xC8	; 200
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9c 83       	std	Y+4, r25	; 0x04
    3736:	8b 83       	std	Y+3, r24	; 0x03
    3738:	8b 81       	ldd	r24, Y+3	; 0x03
    373a:	9c 81       	ldd	r25, Y+4	; 0x04
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <handlePlusOption+0xf4>
    3740:	9c 83       	std	Y+4, r25	; 0x04
    3742:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3744:	8d 81       	ldd	r24, Y+5	; 0x05
    3746:	9e 81       	ldd	r25, Y+6	; 0x06
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	9e 83       	std	Y+6, r25	; 0x06
    374c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    374e:	8d 81       	ldd	r24, Y+5	; 0x05
    3750:	9e 81       	ldd	r25, Y+6	; 0x06
    3752:	00 97       	sbiw	r24, 0x00	; 0
    3754:	69 f7       	brne	.-38     	; 0x3730 <handlePlusOption+0xe8>
    3756:	14 c0       	rjmp	.+40     	; 0x3780 <handlePlusOption+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3758:	6f 81       	ldd	r22, Y+7	; 0x07
    375a:	78 85       	ldd	r23, Y+8	; 0x08
    375c:	89 85       	ldd	r24, Y+9	; 0x09
    375e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3760:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	9e 83       	std	Y+6, r25	; 0x06
    376a:	8d 83       	std	Y+5, r24	; 0x05
    376c:	8d 81       	ldd	r24, Y+5	; 0x05
    376e:	9e 81       	ldd	r25, Y+6	; 0x06
    3770:	9a 83       	std	Y+2, r25	; 0x02
    3772:	89 83       	std	Y+1, r24	; 0x01
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	9a 81       	ldd	r25, Y+2	; 0x02
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	f1 f7       	brne	.-4      	; 0x3778 <handlePlusOption+0x130>
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(600);
            remaining_trials--;
    3780:	80 91 06 01 	lds	r24, 0x0106
    3784:	81 50       	subi	r24, 0x01	; 1
    3786:	80 93 06 01 	sts	0x0106, r24
            if (remaining_trials == 0) {
    378a:	80 91 06 01 	lds	r24, 0x0106
    378e:	88 23       	and	r24, r24
    3790:	61 f4       	brne	.+24     	; 0x37aa <handlePlusOption+0x162>
                LCD_clearScreen();
    3792:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
                LCD_displayStringRowColumn(0,5,"ERROR!");
    3796:	27 ef       	ldi	r18, 0xF7	; 247
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	65 e0       	ldi	r22, 0x05	; 5
    379e:	a9 01       	movw	r20, r18
    37a0:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
                delaySeconds(60);
    37a4:	8c e3       	ldi	r24, 0x3C	; 60
    37a6:	0e 94 b6 19 	call	0x336c	; 0x336c <delaySeconds>
            }
            break;
    }
}
    37aa:	61 96       	adiw	r28, 0x11	; 17
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	cf 91       	pop	r28
    37b8:	df 91       	pop	r29
    37ba:	08 95       	ret

000037bc <handleMinusOption>:

void handleMinusOption(uint8 MinusOption)
{
    37bc:	df 93       	push	r29
    37be:	cf 93       	push	r28
    37c0:	cd b7       	in	r28, 0x3d	; 61
    37c2:	de b7       	in	r29, 0x3e	; 62
    37c4:	61 97       	sbiw	r28, 0x11	; 17
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	f8 94       	cli
    37ca:	de bf       	out	0x3e, r29	; 62
    37cc:	0f be       	out	0x3f, r0	; 63
    37ce:	cd bf       	out	0x3d, r28	; 61
    37d0:	8f 87       	std	Y+15, r24	; 0x0f

    switch (MinusOption) {
    37d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d4:	28 2f       	mov	r18, r24
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	39 8b       	std	Y+17, r19	; 0x11
    37da:	28 8b       	std	Y+16, r18	; 0x10
    37dc:	88 89       	ldd	r24, Y+16	; 0x10
    37de:	99 89       	ldd	r25, Y+17	; 0x11
    37e0:	81 30       	cpi	r24, 0x01	; 1
    37e2:	91 05       	cpc	r25, r1
    37e4:	51 f0       	breq	.+20     	; 0x37fa <handleMinusOption+0x3e>
    37e6:	28 89       	ldd	r18, Y+16	; 0x10
    37e8:	39 89       	ldd	r19, Y+17	; 0x11
    37ea:	22 30       	cpi	r18, 0x02	; 2
    37ec:	31 05       	cpc	r19, r1
    37ee:	09 f0       	breq	.+2      	; 0x37f2 <handleMinusOption+0x36>
    37f0:	94 c0       	rjmp	.+296    	; 0x391a <handleMinusOption+0x15e>
        case VALID_PASSWORD:
            remaining_trials = 3;
    37f2:	83 e0       	ldi	r24, 0x03	; 3
    37f4:	80 93 06 01 	sts	0x0106, r24
    37f8:	90 c0       	rjmp	.+288    	; 0x391a <handleMinusOption+0x15e>
            break;
        case INVALID_PASSWORD:
            LCD_clearScreen();
    37fa:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
            LCD_displayStringRowColumn(0,1,"Wrong Password");
    37fe:	28 ee       	ldi	r18, 0xE8	; 232
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	61 e0       	ldi	r22, 0x01	; 1
    3806:	a9 01       	movw	r20, r18
    3808:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	a6 e1       	ldi	r26, 0x16	; 22
    3812:	b4 e4       	ldi	r27, 0x44	; 68
    3814:	8b 87       	std	Y+11, r24	; 0x0b
    3816:	9c 87       	std	Y+12, r25	; 0x0c
    3818:	ad 87       	std	Y+13, r26	; 0x0d
    381a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381c:	6b 85       	ldd	r22, Y+11	; 0x0b
    381e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3820:	8d 85       	ldd	r24, Y+13	; 0x0d
    3822:	9e 85       	ldd	r25, Y+14	; 0x0e
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	4a ef       	ldi	r20, 0xFA	; 250
    382a:	54 e4       	ldi	r21, 0x44	; 68
    382c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	8f 83       	std	Y+7, r24	; 0x07
    3836:	98 87       	std	Y+8, r25	; 0x08
    3838:	a9 87       	std	Y+9, r26	; 0x09
    383a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    383c:	6f 81       	ldd	r22, Y+7	; 0x07
    383e:	78 85       	ldd	r23, Y+8	; 0x08
    3840:	89 85       	ldd	r24, Y+9	; 0x09
    3842:	9a 85       	ldd	r25, Y+10	; 0x0a
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e8       	ldi	r20, 0x80	; 128
    384a:	5f e3       	ldi	r21, 0x3F	; 63
    384c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__ltsf2>
    3850:	88 23       	and	r24, r24
    3852:	2c f4       	brge	.+10     	; 0x385e <handleMinusOption+0xa2>
		__ticks = 1;
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	9e 83       	std	Y+6, r25	; 0x06
    385a:	8d 83       	std	Y+5, r24	; 0x05
    385c:	3f c0       	rjmp	.+126    	; 0x38dc <handleMinusOption+0x120>
	else if (__tmp > 65535)
    385e:	6f 81       	ldd	r22, Y+7	; 0x07
    3860:	78 85       	ldd	r23, Y+8	; 0x08
    3862:	89 85       	ldd	r24, Y+9	; 0x09
    3864:	9a 85       	ldd	r25, Y+10	; 0x0a
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	3f ef       	ldi	r19, 0xFF	; 255
    386a:	4f e7       	ldi	r20, 0x7F	; 127
    386c:	57 e4       	ldi	r21, 0x47	; 71
    386e:	0e 94 96 03 	call	0x72c	; 0x72c <__gtsf2>
    3872:	18 16       	cp	r1, r24
    3874:	4c f5       	brge	.+82     	; 0x38c8 <handleMinusOption+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3876:	6b 85       	ldd	r22, Y+11	; 0x0b
    3878:	7c 85       	ldd	r23, Y+12	; 0x0c
    387a:	8d 85       	ldd	r24, Y+13	; 0x0d
    387c:	9e 85       	ldd	r25, Y+14	; 0x0e
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e2       	ldi	r20, 0x20	; 32
    3884:	51 e4       	ldi	r21, 0x41	; 65
    3886:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    388a:	dc 01       	movw	r26, r24
    388c:	cb 01       	movw	r24, r22
    388e:	bc 01       	movw	r22, r24
    3890:	cd 01       	movw	r24, r26
    3892:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	9e 83       	std	Y+6, r25	; 0x06
    389c:	8d 83       	std	Y+5, r24	; 0x05
    389e:	0f c0       	rjmp	.+30     	; 0x38be <handleMinusOption+0x102>
    38a0:	88 ec       	ldi	r24, 0xC8	; 200
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	9c 83       	std	Y+4, r25	; 0x04
    38a6:	8b 83       	std	Y+3, r24	; 0x03
    38a8:	8b 81       	ldd	r24, Y+3	; 0x03
    38aa:	9c 81       	ldd	r25, Y+4	; 0x04
    38ac:	01 97       	sbiw	r24, 0x01	; 1
    38ae:	f1 f7       	brne	.-4      	; 0x38ac <handleMinusOption+0xf0>
    38b0:	9c 83       	std	Y+4, r25	; 0x04
    38b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b4:	8d 81       	ldd	r24, Y+5	; 0x05
    38b6:	9e 81       	ldd	r25, Y+6	; 0x06
    38b8:	01 97       	sbiw	r24, 0x01	; 1
    38ba:	9e 83       	std	Y+6, r25	; 0x06
    38bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38be:	8d 81       	ldd	r24, Y+5	; 0x05
    38c0:	9e 81       	ldd	r25, Y+6	; 0x06
    38c2:	00 97       	sbiw	r24, 0x00	; 0
    38c4:	69 f7       	brne	.-38     	; 0x38a0 <handleMinusOption+0xe4>
    38c6:	14 c0       	rjmp	.+40     	; 0x38f0 <handleMinusOption+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ca:	78 85       	ldd	r23, Y+8	; 0x08
    38cc:	89 85       	ldd	r24, Y+9	; 0x09
    38ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	9e 83       	std	Y+6, r25	; 0x06
    38da:	8d 83       	std	Y+5, r24	; 0x05
    38dc:	8d 81       	ldd	r24, Y+5	; 0x05
    38de:	9e 81       	ldd	r25, Y+6	; 0x06
    38e0:	9a 83       	std	Y+2, r25	; 0x02
    38e2:	89 83       	std	Y+1, r24	; 0x01
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
    38e6:	9a 81       	ldd	r25, Y+2	; 0x02
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <handleMinusOption+0x12c>
    38ec:	9a 83       	std	Y+2, r25	; 0x02
    38ee:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(600);
            remaining_trials--;
    38f0:	80 91 06 01 	lds	r24, 0x0106
    38f4:	81 50       	subi	r24, 0x01	; 1
    38f6:	80 93 06 01 	sts	0x0106, r24
            if (remaining_trials == 0) {
    38fa:	80 91 06 01 	lds	r24, 0x0106
    38fe:	88 23       	and	r24, r24
    3900:	61 f4       	brne	.+24     	; 0x391a <handleMinusOption+0x15e>
                LCD_clearScreen();
    3902:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_clearScreen>
                LCD_displayStringRowColumn(0,5,"ERROR!");
    3906:	27 ef       	ldi	r18, 0xF7	; 247
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	65 e0       	ldi	r22, 0x05	; 5
    390e:	a9 01       	movw	r20, r18
    3910:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_displayStringRowColumn>
                delaySeconds(60);
    3914:	8c e3       	ldi	r24, 0x3C	; 60
    3916:	0e 94 b6 19 	call	0x336c	; 0x336c <delaySeconds>
            }
            break;
    }
}
    391a:	61 96       	adiw	r28, 0x11	; 17
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	de bf       	out	0x3e, r29	; 62
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	cd bf       	out	0x3d, r28	; 61
    3926:	cf 91       	pop	r28
    3928:	df 91       	pop	r29
    392a:	08 95       	ret

0000392c <__udivmodsi4>:
    392c:	a1 e2       	ldi	r26, 0x21	; 33
    392e:	1a 2e       	mov	r1, r26
    3930:	aa 1b       	sub	r26, r26
    3932:	bb 1b       	sub	r27, r27
    3934:	fd 01       	movw	r30, r26
    3936:	0d c0       	rjmp	.+26     	; 0x3952 <__udivmodsi4_ep>

00003938 <__udivmodsi4_loop>:
    3938:	aa 1f       	adc	r26, r26
    393a:	bb 1f       	adc	r27, r27
    393c:	ee 1f       	adc	r30, r30
    393e:	ff 1f       	adc	r31, r31
    3940:	a2 17       	cp	r26, r18
    3942:	b3 07       	cpc	r27, r19
    3944:	e4 07       	cpc	r30, r20
    3946:	f5 07       	cpc	r31, r21
    3948:	20 f0       	brcs	.+8      	; 0x3952 <__udivmodsi4_ep>
    394a:	a2 1b       	sub	r26, r18
    394c:	b3 0b       	sbc	r27, r19
    394e:	e4 0b       	sbc	r30, r20
    3950:	f5 0b       	sbc	r31, r21

00003952 <__udivmodsi4_ep>:
    3952:	66 1f       	adc	r22, r22
    3954:	77 1f       	adc	r23, r23
    3956:	88 1f       	adc	r24, r24
    3958:	99 1f       	adc	r25, r25
    395a:	1a 94       	dec	r1
    395c:	69 f7       	brne	.-38     	; 0x3938 <__udivmodsi4_loop>
    395e:	60 95       	com	r22
    3960:	70 95       	com	r23
    3962:	80 95       	com	r24
    3964:	90 95       	com	r25
    3966:	9b 01       	movw	r18, r22
    3968:	ac 01       	movw	r20, r24
    396a:	bd 01       	movw	r22, r26
    396c:	cf 01       	movw	r24, r30
    396e:	08 95       	ret

00003970 <__prologue_saves__>:
    3970:	2f 92       	push	r2
    3972:	3f 92       	push	r3
    3974:	4f 92       	push	r4
    3976:	5f 92       	push	r5
    3978:	6f 92       	push	r6
    397a:	7f 92       	push	r7
    397c:	8f 92       	push	r8
    397e:	9f 92       	push	r9
    3980:	af 92       	push	r10
    3982:	bf 92       	push	r11
    3984:	cf 92       	push	r12
    3986:	df 92       	push	r13
    3988:	ef 92       	push	r14
    398a:	ff 92       	push	r15
    398c:	0f 93       	push	r16
    398e:	1f 93       	push	r17
    3990:	cf 93       	push	r28
    3992:	df 93       	push	r29
    3994:	cd b7       	in	r28, 0x3d	; 61
    3996:	de b7       	in	r29, 0x3e	; 62
    3998:	ca 1b       	sub	r28, r26
    399a:	db 0b       	sbc	r29, r27
    399c:	0f b6       	in	r0, 0x3f	; 63
    399e:	f8 94       	cli
    39a0:	de bf       	out	0x3e, r29	; 62
    39a2:	0f be       	out	0x3f, r0	; 63
    39a4:	cd bf       	out	0x3d, r28	; 61
    39a6:	09 94       	ijmp

000039a8 <__epilogue_restores__>:
    39a8:	2a 88       	ldd	r2, Y+18	; 0x12
    39aa:	39 88       	ldd	r3, Y+17	; 0x11
    39ac:	48 88       	ldd	r4, Y+16	; 0x10
    39ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    39b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    39b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    39b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    39b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    39b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    39ba:	b9 84       	ldd	r11, Y+9	; 0x09
    39bc:	c8 84       	ldd	r12, Y+8	; 0x08
    39be:	df 80       	ldd	r13, Y+7	; 0x07
    39c0:	ee 80       	ldd	r14, Y+6	; 0x06
    39c2:	fd 80       	ldd	r15, Y+5	; 0x05
    39c4:	0c 81       	ldd	r16, Y+4	; 0x04
    39c6:	1b 81       	ldd	r17, Y+3	; 0x03
    39c8:	aa 81       	ldd	r26, Y+2	; 0x02
    39ca:	b9 81       	ldd	r27, Y+1	; 0x01
    39cc:	ce 0f       	add	r28, r30
    39ce:	d1 1d       	adc	r29, r1
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	ed 01       	movw	r28, r26
    39dc:	08 95       	ret

000039de <dtostrf>:
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	f2 2f       	mov	r31, r18
    39e8:	f0 2e       	mov	r15, r16
    39ea:	47 fd       	sbrc	r20, 7
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <dtostrf+0x14>
    39ee:	e4 e0       	ldi	r30, 0x04	; 4
    39f0:	01 c0       	rjmp	.+2      	; 0x39f4 <dtostrf+0x16>
    39f2:	e4 e1       	ldi	r30, 0x14	; 20
    39f4:	24 2f       	mov	r18, r20
    39f6:	33 27       	eor	r19, r19
    39f8:	27 fd       	sbrc	r18, 7
    39fa:	30 95       	com	r19
    39fc:	37 ff       	sbrs	r19, 7
    39fe:	03 c0       	rjmp	.+6      	; 0x3a06 <dtostrf+0x28>
    3a00:	30 95       	com	r19
    3a02:	21 95       	neg	r18
    3a04:	3f 4f       	sbci	r19, 0xFF	; 255
    3a06:	4f 2d       	mov	r20, r15
    3a08:	51 2f       	mov	r21, r17
    3a0a:	0f 2f       	mov	r16, r31
    3a0c:	ee 2e       	mov	r14, r30
    3a0e:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <dtoa_prf>
    3a12:	8f 2d       	mov	r24, r15
    3a14:	91 2f       	mov	r25, r17
    3a16:	1f 91       	pop	r17
    3a18:	0f 91       	pop	r16
    3a1a:	ff 90       	pop	r15
    3a1c:	ef 90       	pop	r14
    3a1e:	08 95       	ret

00003a20 <itoa>:
    3a20:	fb 01       	movw	r30, r22
    3a22:	9f 01       	movw	r18, r30
    3a24:	e8 94       	clt
    3a26:	42 30       	cpi	r20, 0x02	; 2
    3a28:	c4 f0       	brlt	.+48     	; 0x3a5a <itoa+0x3a>
    3a2a:	45 32       	cpi	r20, 0x25	; 37
    3a2c:	b4 f4       	brge	.+44     	; 0x3a5a <itoa+0x3a>
    3a2e:	4a 30       	cpi	r20, 0x0A	; 10
    3a30:	29 f4       	brne	.+10     	; 0x3a3c <itoa+0x1c>
    3a32:	97 fb       	bst	r25, 7
    3a34:	1e f4       	brtc	.+6      	; 0x3a3c <itoa+0x1c>
    3a36:	90 95       	com	r25
    3a38:	81 95       	neg	r24
    3a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3c:	64 2f       	mov	r22, r20
    3a3e:	77 27       	eor	r23, r23
    3a40:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__udivmodhi4>
    3a44:	80 5d       	subi	r24, 0xD0	; 208
    3a46:	8a 33       	cpi	r24, 0x3A	; 58
    3a48:	0c f0       	brlt	.+2      	; 0x3a4c <itoa+0x2c>
    3a4a:	89 5d       	subi	r24, 0xD9	; 217
    3a4c:	81 93       	st	Z+, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	a1 f7       	brne	.-24     	; 0x3a3c <itoa+0x1c>
    3a54:	16 f4       	brtc	.+4      	; 0x3a5a <itoa+0x3a>
    3a56:	5d e2       	ldi	r21, 0x2D	; 45
    3a58:	51 93       	st	Z+, r21
    3a5a:	10 82       	st	Z, r1
    3a5c:	c9 01       	movw	r24, r18
    3a5e:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <strrev>

00003a62 <dtoa_prf>:
    3a62:	a9 e0       	ldi	r26, 0x09	; 9
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	e7 e3       	ldi	r30, 0x37	; 55
    3a68:	fd e1       	ldi	r31, 0x1D	; 29
    3a6a:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__+0x8>
    3a6e:	6a 01       	movw	r12, r20
    3a70:	12 2f       	mov	r17, r18
    3a72:	a0 2e       	mov	r10, r16
    3a74:	be 2c       	mov	r11, r14
    3a76:	2b e3       	ldi	r18, 0x3B	; 59
    3a78:	20 17       	cp	r18, r16
    3a7a:	18 f4       	brcc	.+6      	; 0x3a82 <dtoa_prf+0x20>
    3a7c:	2c e3       	ldi	r18, 0x3C	; 60
    3a7e:	92 2e       	mov	r9, r18
    3a80:	02 c0       	rjmp	.+4      	; 0x3a86 <dtoa_prf+0x24>
    3a82:	90 2e       	mov	r9, r16
    3a84:	93 94       	inc	r9
    3a86:	ae 01       	movw	r20, r28
    3a88:	4f 5f       	subi	r20, 0xFF	; 255
    3a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a8c:	27 e0       	ldi	r18, 0x07	; 7
    3a8e:	09 2d       	mov	r16, r9
    3a90:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <__ftoa_engine>
    3a94:	bc 01       	movw	r22, r24
    3a96:	89 81       	ldd	r24, Y+1	; 0x01
    3a98:	e8 2e       	mov	r14, r24
    3a9a:	ff 24       	eor	r15, r15
    3a9c:	c7 01       	movw	r24, r14
    3a9e:	89 70       	andi	r24, 0x09	; 9
    3aa0:	90 70       	andi	r25, 0x00	; 0
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	11 f4       	brne	.+4      	; 0x3aaa <dtoa_prf+0x48>
    3aa6:	ad e2       	ldi	r26, 0x2D	; 45
    3aa8:	09 c0       	rjmp	.+18     	; 0x3abc <dtoa_prf+0x5a>
    3aaa:	b1 fe       	sbrs	r11, 1
    3aac:	02 c0       	rjmp	.+4      	; 0x3ab2 <dtoa_prf+0x50>
    3aae:	ab e2       	ldi	r26, 0x2B	; 43
    3ab0:	05 c0       	rjmp	.+10     	; 0x3abc <dtoa_prf+0x5a>
    3ab2:	b0 fc       	sbrc	r11, 0
    3ab4:	02 c0       	rjmp	.+4      	; 0x3aba <dtoa_prf+0x58>
    3ab6:	a0 e0       	ldi	r26, 0x00	; 0
    3ab8:	01 c0       	rjmp	.+2      	; 0x3abc <dtoa_prf+0x5a>
    3aba:	a0 e2       	ldi	r26, 0x20	; 32
    3abc:	e3 fe       	sbrs	r14, 3
    3abe:	3b c0       	rjmp	.+118    	; 0x3b36 <dtoa_prf+0xd4>
    3ac0:	aa 23       	and	r26, r26
    3ac2:	11 f4       	brne	.+4      	; 0x3ac8 <dtoa_prf+0x66>
    3ac4:	23 e0       	ldi	r18, 0x03	; 3
    3ac6:	01 c0       	rjmp	.+2      	; 0x3aca <dtoa_prf+0x68>
    3ac8:	24 e0       	ldi	r18, 0x04	; 4
    3aca:	21 17       	cp	r18, r17
    3acc:	10 f0       	brcs	.+4      	; 0x3ad2 <dtoa_prf+0x70>
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	02 c0       	rjmp	.+4      	; 0x3ad6 <dtoa_prf+0x74>
    3ad2:	12 1b       	sub	r17, r18
    3ad4:	21 2f       	mov	r18, r17
    3ad6:	eb 2c       	mov	r14, r11
    3ad8:	b4 fe       	sbrs	r11, 4
    3ada:	02 c0       	rjmp	.+4      	; 0x3ae0 <dtoa_prf+0x7e>
    3adc:	32 2f       	mov	r19, r18
    3ade:	0a c0       	rjmp	.+20     	; 0x3af4 <dtoa_prf+0x92>
    3ae0:	f6 01       	movw	r30, r12
    3ae2:	32 2f       	mov	r19, r18
    3ae4:	80 e2       	ldi	r24, 0x20	; 32
    3ae6:	02 c0       	rjmp	.+4      	; 0x3aec <dtoa_prf+0x8a>
    3ae8:	81 93       	st	Z+, r24
    3aea:	31 50       	subi	r19, 0x01	; 1
    3aec:	33 23       	and	r19, r19
    3aee:	e1 f7       	brne	.-8      	; 0x3ae8 <dtoa_prf+0x86>
    3af0:	c2 0e       	add	r12, r18
    3af2:	d1 1c       	adc	r13, r1
    3af4:	aa 23       	and	r26, r26
    3af6:	19 f0       	breq	.+6      	; 0x3afe <dtoa_prf+0x9c>
    3af8:	f6 01       	movw	r30, r12
    3afa:	a1 93       	st	Z+, r26
    3afc:	6f 01       	movw	r12, r30
    3afe:	f6 01       	movw	r30, r12
    3b00:	31 96       	adiw	r30, 0x01	; 1
    3b02:	e2 fe       	sbrs	r14, 2
    3b04:	05 c0       	rjmp	.+10     	; 0x3b10 <dtoa_prf+0xae>
    3b06:	9e e4       	ldi	r25, 0x4E	; 78
    3b08:	d6 01       	movw	r26, r12
    3b0a:	9c 93       	st	X, r25
    3b0c:	81 e4       	ldi	r24, 0x41	; 65
    3b0e:	04 c0       	rjmp	.+8      	; 0x3b18 <dtoa_prf+0xb6>
    3b10:	9e e6       	ldi	r25, 0x6E	; 110
    3b12:	d6 01       	movw	r26, r12
    3b14:	9c 93       	st	X, r25
    3b16:	81 e6       	ldi	r24, 0x61	; 97
    3b18:	11 96       	adiw	r26, 0x01	; 1
    3b1a:	8c 93       	st	X, r24
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	32 96       	adiw	r30, 0x02	; 2
    3b20:	df 01       	movw	r26, r30
    3b22:	83 2f       	mov	r24, r19
    3b24:	90 e2       	ldi	r25, 0x20	; 32
    3b26:	02 c0       	rjmp	.+4      	; 0x3b2c <dtoa_prf+0xca>
    3b28:	9d 93       	st	X+, r25
    3b2a:	81 50       	subi	r24, 0x01	; 1
    3b2c:	88 23       	and	r24, r24
    3b2e:	e1 f7       	brne	.-8      	; 0x3b28 <dtoa_prf+0xc6>
    3b30:	e3 0f       	add	r30, r19
    3b32:	f1 1d       	adc	r31, r1
    3b34:	40 c0       	rjmp	.+128    	; 0x3bb6 <dtoa_prf+0x154>
    3b36:	e2 fe       	sbrs	r14, 2
    3b38:	42 c0       	rjmp	.+132    	; 0x3bbe <dtoa_prf+0x15c>
    3b3a:	aa 23       	and	r26, r26
    3b3c:	11 f4       	brne	.+4      	; 0x3b42 <dtoa_prf+0xe0>
    3b3e:	23 e0       	ldi	r18, 0x03	; 3
    3b40:	01 c0       	rjmp	.+2      	; 0x3b44 <dtoa_prf+0xe2>
    3b42:	24 e0       	ldi	r18, 0x04	; 4
    3b44:	21 17       	cp	r18, r17
    3b46:	10 f0       	brcs	.+4      	; 0x3b4c <dtoa_prf+0xea>
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	02 c0       	rjmp	.+4      	; 0x3b50 <dtoa_prf+0xee>
    3b4c:	12 1b       	sub	r17, r18
    3b4e:	21 2f       	mov	r18, r17
    3b50:	eb 2c       	mov	r14, r11
    3b52:	b4 fe       	sbrs	r11, 4
    3b54:	02 c0       	rjmp	.+4      	; 0x3b5a <dtoa_prf+0xf8>
    3b56:	92 2f       	mov	r25, r18
    3b58:	0a c0       	rjmp	.+20     	; 0x3b6e <dtoa_prf+0x10c>
    3b5a:	f6 01       	movw	r30, r12
    3b5c:	92 2f       	mov	r25, r18
    3b5e:	80 e2       	ldi	r24, 0x20	; 32
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <dtoa_prf+0x104>
    3b62:	81 93       	st	Z+, r24
    3b64:	91 50       	subi	r25, 0x01	; 1
    3b66:	99 23       	and	r25, r25
    3b68:	e1 f7       	brne	.-8      	; 0x3b62 <dtoa_prf+0x100>
    3b6a:	c2 0e       	add	r12, r18
    3b6c:	d1 1c       	adc	r13, r1
    3b6e:	aa 23       	and	r26, r26
    3b70:	19 f0       	breq	.+6      	; 0x3b78 <dtoa_prf+0x116>
    3b72:	f6 01       	movw	r30, r12
    3b74:	a1 93       	st	Z+, r26
    3b76:	6f 01       	movw	r12, r30
    3b78:	f6 01       	movw	r30, r12
    3b7a:	31 96       	adiw	r30, 0x01	; 1
    3b7c:	e2 fe       	sbrs	r14, 2
    3b7e:	08 c0       	rjmp	.+16     	; 0x3b90 <dtoa_prf+0x12e>
    3b80:	89 e4       	ldi	r24, 0x49	; 73
    3b82:	d6 01       	movw	r26, r12
    3b84:	8c 93       	st	X, r24
    3b86:	8e e4       	ldi	r24, 0x4E	; 78
    3b88:	11 96       	adiw	r26, 0x01	; 1
    3b8a:	8c 93       	st	X, r24
    3b8c:	86 e4       	ldi	r24, 0x46	; 70
    3b8e:	07 c0       	rjmp	.+14     	; 0x3b9e <dtoa_prf+0x13c>
    3b90:	89 e6       	ldi	r24, 0x69	; 105
    3b92:	d6 01       	movw	r26, r12
    3b94:	8c 93       	st	X, r24
    3b96:	8e e6       	ldi	r24, 0x6E	; 110
    3b98:	11 96       	adiw	r26, 0x01	; 1
    3b9a:	8c 93       	st	X, r24
    3b9c:	86 e6       	ldi	r24, 0x66	; 102
    3b9e:	81 83       	std	Z+1, r24	; 0x01
    3ba0:	32 96       	adiw	r30, 0x02	; 2
    3ba2:	df 01       	movw	r26, r30
    3ba4:	89 2f       	mov	r24, r25
    3ba6:	20 e2       	ldi	r18, 0x20	; 32
    3ba8:	02 c0       	rjmp	.+4      	; 0x3bae <dtoa_prf+0x14c>
    3baa:	2d 93       	st	X+, r18
    3bac:	81 50       	subi	r24, 0x01	; 1
    3bae:	88 23       	and	r24, r24
    3bb0:	e1 f7       	brne	.-8      	; 0x3baa <dtoa_prf+0x148>
    3bb2:	e9 0f       	add	r30, r25
    3bb4:	f1 1d       	adc	r31, r1
    3bb6:	10 82       	st	Z, r1
    3bb8:	2e ef       	ldi	r18, 0xFE	; 254
    3bba:	3f ef       	ldi	r19, 0xFF	; 255
    3bbc:	af c0       	rjmp	.+350    	; 0x3d1c <dtoa_prf+0x2ba>
    3bbe:	16 16       	cp	r1, r22
    3bc0:	17 06       	cpc	r1, r23
    3bc2:	1c f0       	brlt	.+6      	; 0x3bca <dtoa_prf+0x168>
    3bc4:	41 e0       	ldi	r20, 0x01	; 1
    3bc6:	50 e0       	ldi	r21, 0x00	; 0
    3bc8:	03 c0       	rjmp	.+6      	; 0x3bd0 <dtoa_prf+0x16e>
    3bca:	ab 01       	movw	r20, r22
    3bcc:	4f 5f       	subi	r20, 0xFF	; 255
    3bce:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd0:	aa 20       	and	r10, r10
    3bd2:	19 f4       	brne	.+6      	; 0x3bda <dtoa_prf+0x178>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	03 c0       	rjmp	.+6      	; 0x3be0 <dtoa_prf+0x17e>
    3bda:	8a 2d       	mov	r24, r10
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	01 96       	adiw	r24, 0x01	; 1
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	aa 23       	and	r26, r26
    3be6:	11 f0       	breq	.+4      	; 0x3bec <dtoa_prf+0x18a>
    3be8:	21 e0       	ldi	r18, 0x01	; 1
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	24 0f       	add	r18, r20
    3bee:	35 1f       	adc	r19, r21
    3bf0:	28 0f       	add	r18, r24
    3bf2:	39 1f       	adc	r19, r25
    3bf4:	81 2f       	mov	r24, r17
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	28 17       	cp	r18, r24
    3bfa:	39 07       	cpc	r19, r25
    3bfc:	14 f0       	brlt	.+4      	; 0x3c02 <dtoa_prf+0x1a0>
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <dtoa_prf+0x1a4>
    3c02:	12 1b       	sub	r17, r18
    3c04:	21 2f       	mov	r18, r17
    3c06:	4b 2d       	mov	r20, r11
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	ca 01       	movw	r24, r20
    3c0c:	80 71       	andi	r24, 0x10	; 16
    3c0e:	90 70       	andi	r25, 0x00	; 0
    3c10:	b4 fc       	sbrc	r11, 4
    3c12:	0d c0       	rjmp	.+26     	; 0x3c2e <dtoa_prf+0x1cc>
    3c14:	b3 fc       	sbrc	r11, 3
    3c16:	0b c0       	rjmp	.+22     	; 0x3c2e <dtoa_prf+0x1cc>
    3c18:	f6 01       	movw	r30, r12
    3c1a:	32 2f       	mov	r19, r18
    3c1c:	40 e2       	ldi	r20, 0x20	; 32
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <dtoa_prf+0x1c2>
    3c20:	41 93       	st	Z+, r20
    3c22:	31 50       	subi	r19, 0x01	; 1
    3c24:	33 23       	and	r19, r19
    3c26:	e1 f7       	brne	.-8      	; 0x3c20 <dtoa_prf+0x1be>
    3c28:	c2 0e       	add	r12, r18
    3c2a:	d1 1c       	adc	r13, r1
    3c2c:	01 c0       	rjmp	.+2      	; 0x3c30 <dtoa_prf+0x1ce>
    3c2e:	32 2f       	mov	r19, r18
    3c30:	aa 23       	and	r26, r26
    3c32:	19 f0       	breq	.+6      	; 0x3c3a <dtoa_prf+0x1d8>
    3c34:	f6 01       	movw	r30, r12
    3c36:	a1 93       	st	Z+, r26
    3c38:	6f 01       	movw	r12, r30
    3c3a:	89 2b       	or	r24, r25
    3c3c:	11 f0       	breq	.+4      	; 0x3c42 <dtoa_prf+0x1e0>
    3c3e:	13 2f       	mov	r17, r19
    3c40:	0a c0       	rjmp	.+20     	; 0x3c56 <dtoa_prf+0x1f4>
    3c42:	f6 01       	movw	r30, r12
    3c44:	13 2f       	mov	r17, r19
    3c46:	80 e3       	ldi	r24, 0x30	; 48
    3c48:	02 c0       	rjmp	.+4      	; 0x3c4e <dtoa_prf+0x1ec>
    3c4a:	81 93       	st	Z+, r24
    3c4c:	11 50       	subi	r17, 0x01	; 1
    3c4e:	11 23       	and	r17, r17
    3c50:	e1 f7       	brne	.-8      	; 0x3c4a <dtoa_prf+0x1e8>
    3c52:	c3 0e       	add	r12, r19
    3c54:	d1 1c       	adc	r13, r1
    3c56:	09 2d       	mov	r16, r9
    3c58:	06 0f       	add	r16, r22
    3c5a:	ba 80       	ldd	r11, Y+2	; 0x02
    3c5c:	90 e1       	ldi	r25, 0x10	; 16
    3c5e:	89 2e       	mov	r8, r25
    3c60:	91 2c       	mov	r9, r1
    3c62:	8e 20       	and	r8, r14
    3c64:	9f 20       	and	r9, r15
    3c66:	e4 fe       	sbrs	r14, 4
    3c68:	04 c0       	rjmp	.+8      	; 0x3c72 <dtoa_prf+0x210>
    3c6a:	f1 e3       	ldi	r31, 0x31	; 49
    3c6c:	bf 16       	cp	r11, r31
    3c6e:	09 f4       	brne	.+2      	; 0x3c72 <dtoa_prf+0x210>
    3c70:	01 50       	subi	r16, 0x01	; 1
    3c72:	10 16       	cp	r1, r16
    3c74:	14 f0       	brlt	.+4      	; 0x3c7a <dtoa_prf+0x218>
    3c76:	01 e0       	ldi	r16, 0x01	; 1
    3c78:	03 c0       	rjmp	.+6      	; 0x3c80 <dtoa_prf+0x21e>
    3c7a:	09 30       	cpi	r16, 0x09	; 9
    3c7c:	08 f0       	brcs	.+2      	; 0x3c80 <dtoa_prf+0x21e>
    3c7e:	08 e0       	ldi	r16, 0x08	; 8
    3c80:	9b 01       	movw	r18, r22
    3c82:	77 ff       	sbrs	r23, 7
    3c84:	02 c0       	rjmp	.+4      	; 0x3c8a <dtoa_prf+0x228>
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	01 96       	adiw	r24, 0x01	; 1
    3c8e:	82 1b       	sub	r24, r18
    3c90:	93 0b       	sbc	r25, r19
    3c92:	fe 01       	movw	r30, r28
    3c94:	31 96       	adiw	r30, 0x01	; 1
    3c96:	e8 0f       	add	r30, r24
    3c98:	f9 1f       	adc	r31, r25
    3c9a:	8e e2       	ldi	r24, 0x2E	; 46
    3c9c:	f8 2e       	mov	r15, r24
    3c9e:	3b 01       	movw	r6, r22
    3ca0:	60 1a       	sub	r6, r16
    3ca2:	71 08       	sbc	r7, r1
    3ca4:	8a 2d       	mov	r24, r10
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	44 27       	eor	r20, r20
    3caa:	55 27       	eor	r21, r21
    3cac:	48 1b       	sub	r20, r24
    3cae:	59 0b       	sbc	r21, r25
    3cb0:	8f ef       	ldi	r24, 0xFF	; 255
    3cb2:	2f 3f       	cpi	r18, 0xFF	; 255
    3cb4:	38 07       	cpc	r19, r24
    3cb6:	19 f4       	brne	.+6      	; 0x3cbe <dtoa_prf+0x25c>
    3cb8:	d6 01       	movw	r26, r12
    3cba:	fd 92       	st	X+, r15
    3cbc:	6d 01       	movw	r12, r26
    3cbe:	62 17       	cp	r22, r18
    3cc0:	73 07       	cpc	r23, r19
    3cc2:	2c f0       	brlt	.+10     	; 0x3cce <dtoa_prf+0x26c>
    3cc4:	62 16       	cp	r6, r18
    3cc6:	73 06       	cpc	r7, r19
    3cc8:	14 f4       	brge	.+4      	; 0x3cce <dtoa_prf+0x26c>
    3cca:	80 81       	ld	r24, Z
    3ccc:	01 c0       	rjmp	.+2      	; 0x3cd0 <dtoa_prf+0x26e>
    3cce:	80 e3       	ldi	r24, 0x30	; 48
    3cd0:	21 50       	subi	r18, 0x01	; 1
    3cd2:	30 40       	sbci	r19, 0x00	; 0
    3cd4:	31 96       	adiw	r30, 0x01	; 1
    3cd6:	24 17       	cp	r18, r20
    3cd8:	35 07       	cpc	r19, r21
    3cda:	24 f0       	brlt	.+8      	; 0x3ce4 <dtoa_prf+0x282>
    3cdc:	d6 01       	movw	r26, r12
    3cde:	8d 93       	st	X+, r24
    3ce0:	6d 01       	movw	r12, r26
    3ce2:	e6 cf       	rjmp	.-52     	; 0x3cb0 <dtoa_prf+0x24e>
    3ce4:	26 17       	cp	r18, r22
    3ce6:	37 07       	cpc	r19, r23
    3ce8:	49 f4       	brne	.+18     	; 0x3cfc <dtoa_prf+0x29a>
    3cea:	b5 e3       	ldi	r27, 0x35	; 53
    3cec:	bb 15       	cp	r27, r11
    3cee:	28 f0       	brcs	.+10     	; 0x3cfa <dtoa_prf+0x298>
    3cf0:	bb 16       	cp	r11, r27
    3cf2:	21 f4       	brne	.+8      	; 0x3cfc <dtoa_prf+0x29a>
    3cf4:	81 14       	cp	r8, r1
    3cf6:	91 04       	cpc	r9, r1
    3cf8:	09 f4       	brne	.+2      	; 0x3cfc <dtoa_prf+0x29a>
    3cfa:	81 e3       	ldi	r24, 0x31	; 49
    3cfc:	f6 01       	movw	r30, r12
    3cfe:	81 93       	st	Z+, r24
    3d00:	d6 01       	movw	r26, r12
    3d02:	81 2f       	mov	r24, r17
    3d04:	90 e2       	ldi	r25, 0x20	; 32
    3d06:	02 c0       	rjmp	.+4      	; 0x3d0c <dtoa_prf+0x2aa>
    3d08:	9c 93       	st	X, r25
    3d0a:	81 50       	subi	r24, 0x01	; 1
    3d0c:	11 96       	adiw	r26, 0x01	; 1
    3d0e:	88 23       	and	r24, r24
    3d10:	d9 f7       	brne	.-10     	; 0x3d08 <dtoa_prf+0x2a6>
    3d12:	e1 0f       	add	r30, r17
    3d14:	f1 1d       	adc	r31, r1
    3d16:	10 82       	st	Z, r1
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	30 e0       	ldi	r19, 0x00	; 0
    3d1c:	c9 01       	movw	r24, r18
    3d1e:	29 96       	adiw	r28, 0x09	; 9
    3d20:	ee e0       	ldi	r30, 0x0E	; 14
    3d22:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__+0x8>

00003d26 <__ftoa_engine>:
    3d26:	28 30       	cpi	r18, 0x08	; 8
    3d28:	08 f0       	brcs	.+2      	; 0x3d2c <__ftoa_engine+0x6>
    3d2a:	27 e0       	ldi	r18, 0x07	; 7
    3d2c:	33 27       	eor	r19, r19
    3d2e:	da 01       	movw	r26, r20
    3d30:	99 0f       	add	r25, r25
    3d32:	31 1d       	adc	r19, r1
    3d34:	87 fd       	sbrc	r24, 7
    3d36:	91 60       	ori	r25, 0x01	; 1
    3d38:	00 96       	adiw	r24, 0x00	; 0
    3d3a:	61 05       	cpc	r22, r1
    3d3c:	71 05       	cpc	r23, r1
    3d3e:	39 f4       	brne	.+14     	; 0x3d4e <__ftoa_engine+0x28>
    3d40:	32 60       	ori	r19, 0x02	; 2
    3d42:	2e 5f       	subi	r18, 0xFE	; 254
    3d44:	3d 93       	st	X+, r19
    3d46:	30 e3       	ldi	r19, 0x30	; 48
    3d48:	2a 95       	dec	r18
    3d4a:	e1 f7       	brne	.-8      	; 0x3d44 <__ftoa_engine+0x1e>
    3d4c:	08 95       	ret
    3d4e:	9f 3f       	cpi	r25, 0xFF	; 255
    3d50:	30 f0       	brcs	.+12     	; 0x3d5e <__ftoa_engine+0x38>
    3d52:	80 38       	cpi	r24, 0x80	; 128
    3d54:	71 05       	cpc	r23, r1
    3d56:	61 05       	cpc	r22, r1
    3d58:	09 f0       	breq	.+2      	; 0x3d5c <__ftoa_engine+0x36>
    3d5a:	3c 5f       	subi	r19, 0xFC	; 252
    3d5c:	3c 5f       	subi	r19, 0xFC	; 252
    3d5e:	3d 93       	st	X+, r19
    3d60:	91 30       	cpi	r25, 0x01	; 1
    3d62:	08 f0       	brcs	.+2      	; 0x3d66 <__ftoa_engine+0x40>
    3d64:	80 68       	ori	r24, 0x80	; 128
    3d66:	91 1d       	adc	r25, r1
    3d68:	df 93       	push	r29
    3d6a:	cf 93       	push	r28
    3d6c:	1f 93       	push	r17
    3d6e:	0f 93       	push	r16
    3d70:	ff 92       	push	r15
    3d72:	ef 92       	push	r14
    3d74:	19 2f       	mov	r17, r25
    3d76:	98 7f       	andi	r25, 0xF8	; 248
    3d78:	96 95       	lsr	r25
    3d7a:	e9 2f       	mov	r30, r25
    3d7c:	96 95       	lsr	r25
    3d7e:	96 95       	lsr	r25
    3d80:	e9 0f       	add	r30, r25
    3d82:	ff 27       	eor	r31, r31
    3d84:	e2 55       	subi	r30, 0x52	; 82
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	99 27       	eor	r25, r25
    3d8a:	33 27       	eor	r19, r19
    3d8c:	ee 24       	eor	r14, r14
    3d8e:	ff 24       	eor	r15, r15
    3d90:	a7 01       	movw	r20, r14
    3d92:	e7 01       	movw	r28, r14
    3d94:	05 90       	lpm	r0, Z+
    3d96:	08 94       	sec
    3d98:	07 94       	ror	r0
    3d9a:	28 f4       	brcc	.+10     	; 0x3da6 <__ftoa_engine+0x80>
    3d9c:	36 0f       	add	r19, r22
    3d9e:	e7 1e       	adc	r14, r23
    3da0:	f8 1e       	adc	r15, r24
    3da2:	49 1f       	adc	r20, r25
    3da4:	51 1d       	adc	r21, r1
    3da6:	66 0f       	add	r22, r22
    3da8:	77 1f       	adc	r23, r23
    3daa:	88 1f       	adc	r24, r24
    3dac:	99 1f       	adc	r25, r25
    3dae:	06 94       	lsr	r0
    3db0:	a1 f7       	brne	.-24     	; 0x3d9a <__ftoa_engine+0x74>
    3db2:	05 90       	lpm	r0, Z+
    3db4:	07 94       	ror	r0
    3db6:	28 f4       	brcc	.+10     	; 0x3dc2 <__ftoa_engine+0x9c>
    3db8:	e7 0e       	add	r14, r23
    3dba:	f8 1e       	adc	r15, r24
    3dbc:	49 1f       	adc	r20, r25
    3dbe:	56 1f       	adc	r21, r22
    3dc0:	c1 1d       	adc	r28, r1
    3dc2:	77 0f       	add	r23, r23
    3dc4:	88 1f       	adc	r24, r24
    3dc6:	99 1f       	adc	r25, r25
    3dc8:	66 1f       	adc	r22, r22
    3dca:	06 94       	lsr	r0
    3dcc:	a1 f7       	brne	.-24     	; 0x3db6 <__ftoa_engine+0x90>
    3dce:	05 90       	lpm	r0, Z+
    3dd0:	07 94       	ror	r0
    3dd2:	28 f4       	brcc	.+10     	; 0x3dde <__ftoa_engine+0xb8>
    3dd4:	f8 0e       	add	r15, r24
    3dd6:	49 1f       	adc	r20, r25
    3dd8:	56 1f       	adc	r21, r22
    3dda:	c7 1f       	adc	r28, r23
    3ddc:	d1 1d       	adc	r29, r1
    3dde:	88 0f       	add	r24, r24
    3de0:	99 1f       	adc	r25, r25
    3de2:	66 1f       	adc	r22, r22
    3de4:	77 1f       	adc	r23, r23
    3de6:	06 94       	lsr	r0
    3de8:	a1 f7       	brne	.-24     	; 0x3dd2 <__ftoa_engine+0xac>
    3dea:	05 90       	lpm	r0, Z+
    3dec:	07 94       	ror	r0
    3dee:	20 f4       	brcc	.+8      	; 0x3df8 <__ftoa_engine+0xd2>
    3df0:	49 0f       	add	r20, r25
    3df2:	56 1f       	adc	r21, r22
    3df4:	c7 1f       	adc	r28, r23
    3df6:	d8 1f       	adc	r29, r24
    3df8:	99 0f       	add	r25, r25
    3dfa:	66 1f       	adc	r22, r22
    3dfc:	77 1f       	adc	r23, r23
    3dfe:	88 1f       	adc	r24, r24
    3e00:	06 94       	lsr	r0
    3e02:	a9 f7       	brne	.-22     	; 0x3dee <__ftoa_engine+0xc8>
    3e04:	84 91       	lpm	r24, Z+
    3e06:	10 95       	com	r17
    3e08:	17 70       	andi	r17, 0x07	; 7
    3e0a:	41 f0       	breq	.+16     	; 0x3e1c <__ftoa_engine+0xf6>
    3e0c:	d6 95       	lsr	r29
    3e0e:	c7 95       	ror	r28
    3e10:	57 95       	ror	r21
    3e12:	47 95       	ror	r20
    3e14:	f7 94       	ror	r15
    3e16:	e7 94       	ror	r14
    3e18:	1a 95       	dec	r17
    3e1a:	c1 f7       	brne	.-16     	; 0x3e0c <__ftoa_engine+0xe6>
    3e1c:	e4 e5       	ldi	r30, 0x54	; 84
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	68 94       	set
    3e22:	15 90       	lpm	r1, Z+
    3e24:	15 91       	lpm	r17, Z+
    3e26:	35 91       	lpm	r19, Z+
    3e28:	65 91       	lpm	r22, Z+
    3e2a:	95 91       	lpm	r25, Z+
    3e2c:	05 90       	lpm	r0, Z+
    3e2e:	7f e2       	ldi	r23, 0x2F	; 47
    3e30:	73 95       	inc	r23
    3e32:	e1 18       	sub	r14, r1
    3e34:	f1 0a       	sbc	r15, r17
    3e36:	43 0b       	sbc	r20, r19
    3e38:	56 0b       	sbc	r21, r22
    3e3a:	c9 0b       	sbc	r28, r25
    3e3c:	d0 09       	sbc	r29, r0
    3e3e:	c0 f7       	brcc	.-16     	; 0x3e30 <__ftoa_engine+0x10a>
    3e40:	e1 0c       	add	r14, r1
    3e42:	f1 1e       	adc	r15, r17
    3e44:	43 1f       	adc	r20, r19
    3e46:	56 1f       	adc	r21, r22
    3e48:	c9 1f       	adc	r28, r25
    3e4a:	d0 1d       	adc	r29, r0
    3e4c:	7e f4       	brtc	.+30     	; 0x3e6c <__ftoa_engine+0x146>
    3e4e:	70 33       	cpi	r23, 0x30	; 48
    3e50:	11 f4       	brne	.+4      	; 0x3e56 <__ftoa_engine+0x130>
    3e52:	8a 95       	dec	r24
    3e54:	e6 cf       	rjmp	.-52     	; 0x3e22 <__ftoa_engine+0xfc>
    3e56:	e8 94       	clt
    3e58:	01 50       	subi	r16, 0x01	; 1
    3e5a:	30 f0       	brcs	.+12     	; 0x3e68 <__ftoa_engine+0x142>
    3e5c:	08 0f       	add	r16, r24
    3e5e:	0a f4       	brpl	.+2      	; 0x3e62 <__ftoa_engine+0x13c>
    3e60:	00 27       	eor	r16, r16
    3e62:	02 17       	cp	r16, r18
    3e64:	08 f4       	brcc	.+2      	; 0x3e68 <__ftoa_engine+0x142>
    3e66:	20 2f       	mov	r18, r16
    3e68:	23 95       	inc	r18
    3e6a:	02 2f       	mov	r16, r18
    3e6c:	7a 33       	cpi	r23, 0x3A	; 58
    3e6e:	28 f0       	brcs	.+10     	; 0x3e7a <__ftoa_engine+0x154>
    3e70:	79 e3       	ldi	r23, 0x39	; 57
    3e72:	7d 93       	st	X+, r23
    3e74:	2a 95       	dec	r18
    3e76:	e9 f7       	brne	.-6      	; 0x3e72 <__ftoa_engine+0x14c>
    3e78:	10 c0       	rjmp	.+32     	; 0x3e9a <__ftoa_engine+0x174>
    3e7a:	7d 93       	st	X+, r23
    3e7c:	2a 95       	dec	r18
    3e7e:	89 f6       	brne	.-94     	; 0x3e22 <__ftoa_engine+0xfc>
    3e80:	06 94       	lsr	r0
    3e82:	97 95       	ror	r25
    3e84:	67 95       	ror	r22
    3e86:	37 95       	ror	r19
    3e88:	17 95       	ror	r17
    3e8a:	17 94       	ror	r1
    3e8c:	e1 18       	sub	r14, r1
    3e8e:	f1 0a       	sbc	r15, r17
    3e90:	43 0b       	sbc	r20, r19
    3e92:	56 0b       	sbc	r21, r22
    3e94:	c9 0b       	sbc	r28, r25
    3e96:	d0 09       	sbc	r29, r0
    3e98:	98 f0       	brcs	.+38     	; 0x3ec0 <__ftoa_engine+0x19a>
    3e9a:	23 95       	inc	r18
    3e9c:	7e 91       	ld	r23, -X
    3e9e:	73 95       	inc	r23
    3ea0:	7a 33       	cpi	r23, 0x3A	; 58
    3ea2:	08 f0       	brcs	.+2      	; 0x3ea6 <__ftoa_engine+0x180>
    3ea4:	70 e3       	ldi	r23, 0x30	; 48
    3ea6:	7c 93       	st	X, r23
    3ea8:	20 13       	cpse	r18, r16
    3eaa:	b8 f7       	brcc	.-18     	; 0x3e9a <__ftoa_engine+0x174>
    3eac:	7e 91       	ld	r23, -X
    3eae:	70 61       	ori	r23, 0x10	; 16
    3eb0:	7d 93       	st	X+, r23
    3eb2:	30 f0       	brcs	.+12     	; 0x3ec0 <__ftoa_engine+0x19a>
    3eb4:	83 95       	inc	r24
    3eb6:	71 e3       	ldi	r23, 0x31	; 49
    3eb8:	7d 93       	st	X+, r23
    3eba:	70 e3       	ldi	r23, 0x30	; 48
    3ebc:	2a 95       	dec	r18
    3ebe:	e1 f7       	brne	.-8      	; 0x3eb8 <__ftoa_engine+0x192>
    3ec0:	11 24       	eor	r1, r1
    3ec2:	ef 90       	pop	r14
    3ec4:	ff 90       	pop	r15
    3ec6:	0f 91       	pop	r16
    3ec8:	1f 91       	pop	r17
    3eca:	cf 91       	pop	r28
    3ecc:	df 91       	pop	r29
    3ece:	99 27       	eor	r25, r25
    3ed0:	87 fd       	sbrc	r24, 7
    3ed2:	90 95       	com	r25
    3ed4:	08 95       	ret

00003ed6 <strrev>:
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	fc 01       	movw	r30, r24
    3eda:	67 2f       	mov	r22, r23
    3edc:	71 91       	ld	r23, Z+
    3ede:	77 23       	and	r23, r23
    3ee0:	e1 f7       	brne	.-8      	; 0x3eda <strrev+0x4>
    3ee2:	32 97       	sbiw	r30, 0x02	; 2
    3ee4:	04 c0       	rjmp	.+8      	; 0x3eee <strrev+0x18>
    3ee6:	7c 91       	ld	r23, X
    3ee8:	6d 93       	st	X+, r22
    3eea:	70 83       	st	Z, r23
    3eec:	62 91       	ld	r22, -Z
    3eee:	ae 17       	cp	r26, r30
    3ef0:	bf 07       	cpc	r27, r31
    3ef2:	c8 f3       	brcs	.-14     	; 0x3ee6 <strrev+0x10>
    3ef4:	08 95       	ret

00003ef6 <__udivmodhi4>:
    3ef6:	aa 1b       	sub	r26, r26
    3ef8:	bb 1b       	sub	r27, r27
    3efa:	51 e1       	ldi	r21, 0x11	; 17
    3efc:	07 c0       	rjmp	.+14     	; 0x3f0c <__udivmodhi4_ep>

00003efe <__udivmodhi4_loop>:
    3efe:	aa 1f       	adc	r26, r26
    3f00:	bb 1f       	adc	r27, r27
    3f02:	a6 17       	cp	r26, r22
    3f04:	b7 07       	cpc	r27, r23
    3f06:	10 f0       	brcs	.+4      	; 0x3f0c <__udivmodhi4_ep>
    3f08:	a6 1b       	sub	r26, r22
    3f0a:	b7 0b       	sbc	r27, r23

00003f0c <__udivmodhi4_ep>:
    3f0c:	88 1f       	adc	r24, r24
    3f0e:	99 1f       	adc	r25, r25
    3f10:	5a 95       	dec	r21
    3f12:	a9 f7       	brne	.-22     	; 0x3efe <__udivmodhi4_loop>
    3f14:	80 95       	com	r24
    3f16:	90 95       	com	r25
    3f18:	bc 01       	movw	r22, r24
    3f1a:	cd 01       	movw	r24, r26
    3f1c:	08 95       	ret

00003f1e <_exit>:
    3f1e:	f8 94       	cli

00003f20 <__stop_program>:
    3f20:	ff cf       	rjmp	.-2      	; 0x3f20 <__stop_program>
